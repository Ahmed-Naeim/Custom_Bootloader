
BootloaderApp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003784  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000069c  08003890  08003890  00013890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f2c  08003f2c  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08003f2c  08003f2c  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f2c  08003f2c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f2c  08003f2c  00013f2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f30  08003f30  00013f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003f34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f0  20000068  08003f9c  00020068  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000358  08003f9c  00020358  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008564  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f40  00000000  00000000  00028638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008c0  00000000  00000000  0002a578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000691  00000000  00000000  0002ae38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017d6c  00000000  00000000  0002b4c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bd93  00000000  00000000  00043235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000833bd  00000000  00000000  0004efc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002620  00000000  00000000  000d2388  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009b  00000000  00000000  000d49a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08003878 	.word	0x08003878

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08003878 	.word	0x08003878

0800014c <BL_UART_Featch_Host_Command>:
/*****************************************Static Functions Declarations End*****************************************/


/*****************************************Software Interface Implementation Start*****************************************/

BL_Status BL_UART_Featch_Host_Command(void){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	/*
	 * Host Command Format:
	 * Command Length (1 byte =N) + Command Code (1 Byte) + Details (N Bytes) as Memory address or page number + CRC (4 Bytes)
	 * */

	BL_Status Status =BL_NACK;
 8000152:	2300      	movs	r3, #0
 8000154:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef HAL_Status = HAL_ERROR;
 8000156:	2301      	movs	r3, #1
 8000158:	71bb      	strb	r3, [r7, #6]
	uint8_t Data_Length = 0;
 800015a:	2300      	movs	r3, #0
 800015c:	717b      	strb	r3, [r7, #5]

	memset(BL_HOST_BUFFER,0,BL_HOST_BUFFER_RX_LENGTH);
 800015e:	22c8      	movs	r2, #200	; 0xc8
 8000160:	2100      	movs	r1, #0
 8000162:	4864      	ldr	r0, [pc, #400]	; (80002f4 <BL_UART_Featch_Host_Command+0x1a8>)
 8000164:	f002 fef6 	bl	8002f54 <memset>

	HAL_Status = HAL_UART_Receive(BL_HOST_COMMUNICATION_UART, BL_HOST_BUFFER, 1, HAL_MAX_DELAY);
 8000168:	f04f 33ff 	mov.w	r3, #4294967295
 800016c:	2201      	movs	r2, #1
 800016e:	4961      	ldr	r1, [pc, #388]	; (80002f4 <BL_UART_Featch_Host_Command+0x1a8>)
 8000170:	4861      	ldr	r0, [pc, #388]	; (80002f8 <BL_UART_Featch_Host_Command+0x1ac>)
 8000172:	f002 fd40 	bl	8002bf6 <HAL_UART_Receive>
 8000176:	4603      	mov	r3, r0
 8000178:	71bb      	strb	r3, [r7, #6]
	if (HAL_Status != HAL_OK)
 800017a:	79bb      	ldrb	r3, [r7, #6]
 800017c:	2b00      	cmp	r3, #0
 800017e:	d002      	beq.n	8000186 <BL_UART_Featch_Host_Command+0x3a>
	{
		Status = BL_NACK;
 8000180:	2300      	movs	r3, #0
 8000182:	71fb      	strb	r3, [r7, #7]
 8000184:	e0b0      	b.n	80002e8 <BL_UART_Featch_Host_Command+0x19c>
	}
	else{
		Data_Length = BL_HOST_BUFFER[0];				/* Put number of bytes to make bootloader receive from the host in the first index */
 8000186:	4b5b      	ldr	r3, [pc, #364]	; (80002f4 <BL_UART_Featch_Host_Command+0x1a8>)
 8000188:	781b      	ldrb	r3, [r3, #0]
 800018a:	717b      	strb	r3, [r7, #5]

		HAL_Status = HAL_UART_Receive(BL_HOST_COMMUNICATION_UART, &BL_HOST_BUFFER[1], Data_Length, HAL_MAX_DELAY); /* start from index [1] to write the command code*/
 800018c:	797b      	ldrb	r3, [r7, #5]
 800018e:	b29a      	uxth	r2, r3
 8000190:	f04f 33ff 	mov.w	r3, #4294967295
 8000194:	4959      	ldr	r1, [pc, #356]	; (80002fc <BL_UART_Featch_Host_Command+0x1b0>)
 8000196:	4858      	ldr	r0, [pc, #352]	; (80002f8 <BL_UART_Featch_Host_Command+0x1ac>)
 8000198:	f002 fd2d 	bl	8002bf6 <HAL_UART_Receive>
 800019c:	4603      	mov	r3, r0
 800019e:	71bb      	strb	r3, [r7, #6]
		if (HAL_Status != HAL_OK){
 80001a0:	79bb      	ldrb	r3, [r7, #6]
 80001a2:	2b00      	cmp	r3, #0
 80001a4:	d002      	beq.n	80001ac <BL_UART_Featch_Host_Command+0x60>
			Status = BL_NACK;
 80001a6:	2300      	movs	r3, #0
 80001a8:	71fb      	strb	r3, [r7, #7]
 80001aa:	e09d      	b.n	80002e8 <BL_UART_Featch_Host_Command+0x19c>
		}
		else{
			switch(BL_HOST_BUFFER[1]){
 80001ac:	4b51      	ldr	r3, [pc, #324]	; (80002f4 <BL_UART_Featch_Host_Command+0x1a8>)
 80001ae:	785b      	ldrb	r3, [r3, #1]
 80001b0:	3b10      	subs	r3, #16
 80001b2:	2b11      	cmp	r3, #17
 80001b4:	f200 8094 	bhi.w	80002e0 <BL_UART_Featch_Host_Command+0x194>
 80001b8:	a201      	add	r2, pc, #4	; (adr r2, 80001c0 <BL_UART_Featch_Host_Command+0x74>)
 80001ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001be:	bf00      	nop
 80001c0:	08000209 	.word	0x08000209
 80001c4:	0800021b 	.word	0x0800021b
 80001c8:	0800022d 	.word	0x0800022d
 80001cc:	0800023f 	.word	0x0800023f
 80001d0:	08000251 	.word	0x08000251
 80001d4:	08000263 	.word	0x08000263
 80001d8:	08000275 	.word	0x08000275
 80001dc:	08000287 	.word	0x08000287
 80001e0:	08000299 	.word	0x08000299
 80001e4:	080002ab 	.word	0x080002ab
 80001e8:	080002e1 	.word	0x080002e1
 80001ec:	080002e1 	.word	0x080002e1
 80001f0:	080002e1 	.word	0x080002e1
 80001f4:	080002e1 	.word	0x080002e1
 80001f8:	080002e1 	.word	0x080002e1
 80001fc:	080002e1 	.word	0x080002e1
 8000200:	080002bd 	.word	0x080002bd
 8000204:	080002cf 	.word	0x080002cf
			case CBL_GET_VER_CMD:
				BL_Print_Message("Read the bootloader version from the MCU !! \r\n");
 8000208:	483d      	ldr	r0, [pc, #244]	; (8000300 <BL_UART_Featch_Host_Command+0x1b4>)
 800020a:	f000 f893 	bl	8000334 <BL_Print_Message>
				Bootloader_Get_Version(BL_HOST_BUFFER);
 800020e:	4839      	ldr	r0, [pc, #228]	; (80002f4 <BL_UART_Featch_Host_Command+0x1a8>)
 8000210:	f000 f932 	bl	8000478 <Bootloader_Get_Version>
				Status = BL_OK;
 8000214:	2301      	movs	r3, #1
 8000216:	71fb      	strb	r3, [r7, #7]
				break;
 8000218:	e066      	b.n	80002e8 <BL_UART_Featch_Host_Command+0x19c>

			case CBL_GET_HELP_CMD:
				BL_Print_Message("Read the commands supported by the bootloader !! \r\n");
 800021a:	483a      	ldr	r0, [pc, #232]	; (8000304 <BL_UART_Featch_Host_Command+0x1b8>)
 800021c:	f000 f88a 	bl	8000334 <BL_Print_Message>
				Bootloader_Get_Help(BL_HOST_BUFFER);
 8000220:	4834      	ldr	r0, [pc, #208]	; (80002f4 <BL_UART_Featch_Host_Command+0x1a8>)
 8000222:	f000 f967 	bl	80004f4 <Bootloader_Get_Help>
				Status = BL_OK;
 8000226:	2301      	movs	r3, #1
 8000228:	71fb      	strb	r3, [r7, #7]

				break;
 800022a:	e05d      	b.n	80002e8 <BL_UART_Featch_Host_Command+0x19c>

			case CBL_GET_CID_CMD:
				BL_Print_Message("Read the MCU chip identification number !! \r\n");
 800022c:	4836      	ldr	r0, [pc, #216]	; (8000308 <BL_UART_Featch_Host_Command+0x1bc>)
 800022e:	f000 f881 	bl	8000334 <BL_Print_Message>
				Bootloader_Get_Chip_Identification_Number(BL_HOST_BUFFER);
 8000232:	4830      	ldr	r0, [pc, #192]	; (80002f4 <BL_UART_Featch_Host_Command+0x1a8>)
 8000234:	f000 f99a 	bl	800056c <Bootloader_Get_Chip_Identification_Number>
				Status = BL_OK;
 8000238:	2301      	movs	r3, #1
 800023a:	71fb      	strb	r3, [r7, #7]

				break;
 800023c:	e054      	b.n	80002e8 <BL_UART_Featch_Host_Command+0x19c>

			case CBL_GET_RDP_STATUS_CMD:
				BL_Print_Message("Read the Flash Read protection level !! \r\n");
 800023e:	4833      	ldr	r0, [pc, #204]	; (800030c <BL_UART_Featch_Host_Command+0x1c0>)
 8000240:	f000 f878 	bl	8000334 <BL_Print_Message>
				Bootloader_Read_Protection_Level(BL_HOST_BUFFER);
 8000244:	482b      	ldr	r0, [pc, #172]	; (80002f4 <BL_UART_Featch_Host_Command+0x1a8>)
 8000246:	f000 f9e5 	bl	8000614 <Bootloader_Read_Protection_Level>
				Status = BL_OK;
 800024a:	2301      	movs	r3, #1
 800024c:	71fb      	strb	r3, [r7, #7]

				break;
 800024e:	e04b      	b.n	80002e8 <BL_UART_Featch_Host_Command+0x19c>

			case CBL_GO_TO_ADDR_CMD:
				BL_Print_Message("Jump bootloader into specified address !! \r\n");
 8000250:	482f      	ldr	r0, [pc, #188]	; (8000310 <BL_UART_Featch_Host_Command+0x1c4>)
 8000252:	f000 f86f 	bl	8000334 <BL_Print_Message>
				Bootloader_Jump_To_Address(BL_HOST_BUFFER);
 8000256:	4827      	ldr	r0, [pc, #156]	; (80002f4 <BL_UART_Featch_Host_Command+0x1a8>)
 8000258:	f000 fa46 	bl	80006e8 <Bootloader_Jump_To_Address>
				Status = BL_OK;
 800025c:	2301      	movs	r3, #1
 800025e:	71fb      	strb	r3, [r7, #7]

				break;
 8000260:	e042      	b.n	80002e8 <BL_UART_Featch_Host_Command+0x19c>

			case CBL_FLASH_ERASE_CMD:
				BL_Print_Message("Mass erase or page erase to the user flash !! \r\n");
 8000262:	482c      	ldr	r0, [pc, #176]	; (8000314 <BL_UART_Featch_Host_Command+0x1c8>)
 8000264:	f000 f866 	bl	8000334 <BL_Print_Message>
				Bootloader_Erase_Flash(BL_HOST_BUFFER);
 8000268:	4822      	ldr	r0, [pc, #136]	; (80002f4 <BL_UART_Featch_Host_Command+0x1a8>)
 800026a:	f000 fb13 	bl	8000894 <Bootloader_Erase_Flash>
				Status = BL_OK;
 800026e:	2301      	movs	r3, #1
 8000270:	71fb      	strb	r3, [r7, #7]

				break;
 8000272:	e039      	b.n	80002e8 <BL_UART_Featch_Host_Command+0x19c>

			case CBL_MEM_WRITE_CMD:
				BL_Print_Message("Write data into different memories in MCU !! \r\n");
 8000274:	4828      	ldr	r0, [pc, #160]	; (8000318 <BL_UART_Featch_Host_Command+0x1cc>)
 8000276:	f000 f85d 	bl	8000334 <BL_Print_Message>
				Bootloader_Memory_Write(BL_HOST_BUFFER);
 800027a:	481e      	ldr	r0, [pc, #120]	; (80002f4 <BL_UART_Featch_Host_Command+0x1a8>)
 800027c:	f000 fbb6 	bl	80009ec <Bootloader_Memory_Write>
				Status = BL_OK;
 8000280:	2301      	movs	r3, #1
 8000282:	71fb      	strb	r3, [r7, #7]

				break;
 8000284:	e030      	b.n	80002e8 <BL_UART_Featch_Host_Command+0x19c>

			case CBL_ENABLE_R_W_PROTECT_CMD:
				BL_Print_Message("Enable Read/Write protect on different pages of user flash !! \r\n");
 8000286:	4825      	ldr	r0, [pc, #148]	; (800031c <BL_UART_Featch_Host_Command+0x1d0>)
 8000288:	f000 f854 	bl	8000334 <BL_Print_Message>
				Bootloader_Enable_RW_Protection(BL_HOST_BUFFER);
 800028c:	4819      	ldr	r0, [pc, #100]	; (80002f4 <BL_UART_Featch_Host_Command+0x1a8>)
 800028e:	f000 fc2d 	bl	8000aec <Bootloader_Enable_RW_Protection>
				Status = BL_OK;
 8000292:	2301      	movs	r3, #1
 8000294:	71fb      	strb	r3, [r7, #7]

				break;
 8000296:	e027      	b.n	80002e8 <BL_UART_Featch_Host_Command+0x19c>

			case CBL_MEM_READ_CMD:
				BL_Print_Message("Read data form different memories in MCU !! \r\n");
 8000298:	4821      	ldr	r0, [pc, #132]	; (8000320 <BL_UART_Featch_Host_Command+0x1d4>)
 800029a:	f000 f84b 	bl	8000334 <BL_Print_Message>
				Bootloader_Memory_Read(BL_HOST_BUFFER);
 800029e:	4815      	ldr	r0, [pc, #84]	; (80002f4 <BL_UART_Featch_Host_Command+0x1a8>)
 80002a0:	f000 fc2d 	bl	8000afe <Bootloader_Memory_Read>
				Status = BL_OK;
 80002a4:	2301      	movs	r3, #1
 80002a6:	71fb      	strb	r3, [r7, #7]

				break;
 80002a8:	e01e      	b.n	80002e8 <BL_UART_Featch_Host_Command+0x19c>

			case CBL_READ_PAGE_STATUS_CMD:
				BL_Print_Message("Read all pages protection status !! \r\n");
 80002aa:	481e      	ldr	r0, [pc, #120]	; (8000324 <BL_UART_Featch_Host_Command+0x1d8>)
 80002ac:	f000 f842 	bl	8000334 <BL_Print_Message>
				Bootloader_Get_Page_Protection_Status(BL_HOST_BUFFER);
 80002b0:	4810      	ldr	r0, [pc, #64]	; (80002f4 <BL_UART_Featch_Host_Command+0x1a8>)
 80002b2:	f000 fc2d 	bl	8000b10 <Bootloader_Get_Page_Protection_Status>
				Status = BL_OK;
 80002b6:	2301      	movs	r3, #1
 80002b8:	71fb      	strb	r3, [r7, #7]

				break;
 80002ba:	e015      	b.n	80002e8 <BL_UART_Featch_Host_Command+0x19c>

			case CBL_OTP_READ_CMD:
				BL_Print_Message("Read the OTP content !! \r\n");
 80002bc:	481a      	ldr	r0, [pc, #104]	; (8000328 <BL_UART_Featch_Host_Command+0x1dc>)
 80002be:	f000 f839 	bl	8000334 <BL_Print_Message>
				Bootloader_Read_OTP(BL_HOST_BUFFER);
 80002c2:	480c      	ldr	r0, [pc, #48]	; (80002f4 <BL_UART_Featch_Host_Command+0x1a8>)
 80002c4:	f000 fc2d 	bl	8000b22 <Bootloader_Read_OTP>
				Status = BL_OK;
 80002c8:	2301      	movs	r3, #1
 80002ca:	71fb      	strb	r3, [r7, #7]

				break;
 80002cc:	e00c      	b.n	80002e8 <BL_UART_Featch_Host_Command+0x19c>

			case CBL_DIS_R_W_PROTECT_CMD:
				BL_Print_Message("Disable Read/Write protect on different pages of user flash !! \r\n");
 80002ce:	4817      	ldr	r0, [pc, #92]	; (800032c <BL_UART_Featch_Host_Command+0x1e0>)
 80002d0:	f000 f830 	bl	8000334 <BL_Print_Message>
				Bootloader_Change_Read_Protection_Level(BL_HOST_BUFFER);
 80002d4:	4807      	ldr	r0, [pc, #28]	; (80002f4 <BL_UART_Featch_Host_Command+0x1a8>)
 80002d6:	f000 fc93 	bl	8000c00 <Bootloader_Change_Read_Protection_Level>
				Status = BL_OK;
 80002da:	2301      	movs	r3, #1
 80002dc:	71fb      	strb	r3, [r7, #7]

				break;
 80002de:	e003      	b.n	80002e8 <BL_UART_Featch_Host_Command+0x19c>

			default:
				BL_Print_Message("Invalid Code Command Received from the Host !! \r\n");
 80002e0:	4813      	ldr	r0, [pc, #76]	; (8000330 <BL_UART_Featch_Host_Command+0x1e4>)
 80002e2:	f000 f827 	bl	8000334 <BL_Print_Message>
				break;
 80002e6:	bf00      	nop

			}
		}
	}

	return Status;
 80002e8:	79fb      	ldrb	r3, [r7, #7]
}
 80002ea:	4618      	mov	r0, r3
 80002ec:	3708      	adds	r7, #8
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	20000084 	.word	0x20000084
 80002f8:	20000158 	.word	0x20000158
 80002fc:	20000085 	.word	0x20000085
 8000300:	08003890 	.word	0x08003890
 8000304:	080038c0 	.word	0x080038c0
 8000308:	080038f4 	.word	0x080038f4
 800030c:	08003924 	.word	0x08003924
 8000310:	08003950 	.word	0x08003950
 8000314:	08003980 	.word	0x08003980
 8000318:	080039b4 	.word	0x080039b4
 800031c:	080039e4 	.word	0x080039e4
 8000320:	08003a28 	.word	0x08003a28
 8000324:	08003a58 	.word	0x08003a58
 8000328:	08003a80 	.word	0x08003a80
 800032c:	08003a9c 	.word	0x08003a9c
 8000330:	08003ae0 	.word	0x08003ae0

08000334 <BL_Print_Message>:


void BL_Print_Message(char *format, ...){
 8000334:	b40f      	push	{r0, r1, r2, r3}
 8000336:	b580      	push	{r7, lr}
 8000338:	b09a      	sub	sp, #104	; 0x68
 800033a:	af00      	add	r7, sp, #0
	char Messsage[100] = {0};
 800033c:	2300      	movs	r3, #0
 800033e:	607b      	str	r3, [r7, #4]
 8000340:	f107 0308 	add.w	r3, r7, #8
 8000344:	2260      	movs	r2, #96	; 0x60
 8000346:	2100      	movs	r1, #0
 8000348:	4618      	mov	r0, r3
 800034a:	f002 fe03 	bl	8002f54 <memset>
	/* holds the information needed by va_start, va_arg, va_end */
	va_list args;
	/* Enables access to the variable arguments */
	va_start(args, format);
 800034e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000352:	603b      	str	r3, [r7, #0]
	/* Write formatted data from variable argument list to string */
	vsprintf(Messsage, format, args);
 8000354:	1d3b      	adds	r3, r7, #4
 8000356:	683a      	ldr	r2, [r7, #0]
 8000358:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800035a:	4618      	mov	r0, r3
 800035c:	f002 fdf0 	bl	8002f40 <vsiprintf>
#if (BL_DEBUG_METHOD == BL_ENABLE_UART_DEBUG_MESSAGE)
	/* Trasmit the formatted data through the defined UART */
	HAL_UART_Transmit(BL_DEBUG_UART, (uint8_t *)Messsage, sizeof(Messsage), HAL_MAX_DELAY);
 8000360:	1d39      	adds	r1, r7, #4
 8000362:	f04f 33ff 	mov.w	r3, #4294967295
 8000366:	2264      	movs	r2, #100	; 0x64
 8000368:	4804      	ldr	r0, [pc, #16]	; (800037c <BL_Print_Message+0x48>)
 800036a:	f002 fbc1 	bl	8002af0 <HAL_UART_Transmit>
#elif (BL_DEBUG_METHOD == BL_ENABLE_CAN_DEBUG_MESSAGE)
	/* Trasmit the formatted data through the defined CAN */
#endif
	/* Performs cleanup for an object initialized by a call to va_start */
	va_end(args);
}
 800036e:	bf00      	nop
 8000370:	3768      	adds	r7, #104	; 0x68
 8000372:	46bd      	mov	sp, r7
 8000374:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000378:	b004      	add	sp, #16
 800037a:	4770      	bx	lr
 800037c:	20000158 	.word	0x20000158

08000380 <Bootloader_CRC_Verify>:
/*****************************************Software Interface Implementation End*****************************************/


/*****************************************Static Functions Implementation Start*****************************************/

static uint8_t Bootloader_CRC_Verify(uint8_t *pData, uint32_t Data_Len, uint32_t Host_CRC){
 8000380:	b580      	push	{r7, lr}
 8000382:	b088      	sub	sp, #32
 8000384:	af00      	add	r7, sp, #0
 8000386:	60f8      	str	r0, [r7, #12]
 8000388:	60b9      	str	r1, [r7, #8]
 800038a:	607a      	str	r2, [r7, #4]
	uint8_t CRC_Status = CRC_VERIFICATION_FAILED;
 800038c:	2300      	movs	r3, #0
 800038e:	77fb      	strb	r3, [r7, #31]
	uint32_t MCU_CRC_Calculated = 0;
 8000390:	2300      	movs	r3, #0
 8000392:	61bb      	str	r3, [r7, #24]
	uint8_t Data_Counter =0;
 8000394:	2300      	movs	r3, #0
 8000396:	75fb      	strb	r3, [r7, #23]
	uint32_t Data_buffer = 0;			/*because function waits for uint32_t parameter but the input is uint8_t *pData*/
 8000398:	2300      	movs	r3, #0
 800039a:	613b      	str	r3, [r7, #16]

	/*Calculate CRC32*/
	for (Data_Counter = 0; Data_Counter < Data_Len; ++Data_Counter) {
 800039c:	2300      	movs	r3, #0
 800039e:	75fb      	strb	r3, [r7, #23]
 80003a0:	e00f      	b.n	80003c2 <Bootloader_CRC_Verify+0x42>
		Data_buffer = (uint32_t) pData[Data_Counter];		/*explicit casting to turn uint8_t into uint32_t*/
 80003a2:	7dfb      	ldrb	r3, [r7, #23]
 80003a4:	68fa      	ldr	r2, [r7, #12]
 80003a6:	4413      	add	r3, r2
 80003a8:	781b      	ldrb	r3, [r3, #0]
 80003aa:	613b      	str	r3, [r7, #16]
		MCU_CRC_Calculated = HAL_CRC_Accumulate(CRC_ENGINE_OBJ, &Data_buffer, 1); /*1 because it is already Data_len because the for loop*/
 80003ac:	f107 0310 	add.w	r3, r7, #16
 80003b0:	2201      	movs	r2, #1
 80003b2:	4619      	mov	r1, r3
 80003b4:	4810      	ldr	r0, [pc, #64]	; (80003f8 <Bootloader_CRC_Verify+0x78>)
 80003b6:	f001 f84c 	bl	8001452 <HAL_CRC_Accumulate>
 80003ba:	61b8      	str	r0, [r7, #24]
	for (Data_Counter = 0; Data_Counter < Data_Len; ++Data_Counter) {
 80003bc:	7dfb      	ldrb	r3, [r7, #23]
 80003be:	3301      	adds	r3, #1
 80003c0:	75fb      	strb	r3, [r7, #23]
 80003c2:	7dfb      	ldrb	r3, [r7, #23]
 80003c4:	68ba      	ldr	r2, [r7, #8]
 80003c6:	429a      	cmp	r2, r3
 80003c8:	d8eb      	bhi.n	80003a2 <Bootloader_CRC_Verify+0x22>
	}

	/*Reset CRC Calculation Unit*/
	__HAL_CRC_DR_RESET(CRC_ENGINE_OBJ);
 80003ca:	4b0b      	ldr	r3, [pc, #44]	; (80003f8 <Bootloader_CRC_Verify+0x78>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	689a      	ldr	r2, [r3, #8]
 80003d0:	4b09      	ldr	r3, [pc, #36]	; (80003f8 <Bootloader_CRC_Verify+0x78>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	f042 0201 	orr.w	r2, r2, #1
 80003d8:	609a      	str	r2, [r3, #8]


	/*Compare the host CRC and Calculated CRC */
	if(MCU_CRC_Calculated == Host_CRC){
 80003da:	69ba      	ldr	r2, [r7, #24]
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	429a      	cmp	r2, r3
 80003e0:	d102      	bne.n	80003e8 <Bootloader_CRC_Verify+0x68>
		CRC_Status = CRC_VERIFICATION_PASSED;
 80003e2:	2301      	movs	r3, #1
 80003e4:	77fb      	strb	r3, [r7, #31]
 80003e6:	e001      	b.n	80003ec <Bootloader_CRC_Verify+0x6c>
	}
	else{
		CRC_Status = CRC_VERIFICATION_FAILED;
 80003e8:	2300      	movs	r3, #0
 80003ea:	77fb      	strb	r3, [r7, #31]
	}

	return CRC_Status;
 80003ec:	7ffb      	ldrb	r3, [r7, #31]

}
 80003ee:	4618      	mov	r0, r3
 80003f0:	3720      	adds	r7, #32
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	2000014c 	.word	0x2000014c

080003fc <Bootloader_Send_ACK>:

static void Bootloader_Send_ACK(uint8_t Reply_Len){
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b084      	sub	sp, #16
 8000400:	af00      	add	r7, sp, #0
 8000402:	4603      	mov	r3, r0
 8000404:	71fb      	strb	r3, [r7, #7]
	uint8_t Ack_Value [2] = {0};
 8000406:	2300      	movs	r3, #0
 8000408:	81bb      	strh	r3, [r7, #12]
	Ack_Value [0] = CBL_SEND_ACK;
 800040a:	23cd      	movs	r3, #205	; 0xcd
 800040c:	733b      	strb	r3, [r7, #12]
	Ack_Value [1] =Reply_Len;
 800040e:	79fb      	ldrb	r3, [r7, #7]
 8000410:	737b      	strb	r3, [r7, #13]
	HAL_UART_Transmit(BL_HOST_COMMUNICATION_UART, (uint8_t *)Ack_Value, 2, HAL_MAX_DELAY);
 8000412:	f107 010c 	add.w	r1, r7, #12
 8000416:	f04f 33ff 	mov.w	r3, #4294967295
 800041a:	2202      	movs	r2, #2
 800041c:	4803      	ldr	r0, [pc, #12]	; (800042c <Bootloader_Send_ACK+0x30>)
 800041e:	f002 fb67 	bl	8002af0 <HAL_UART_Transmit>

}
 8000422:	bf00      	nop
 8000424:	3710      	adds	r7, #16
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	20000158 	.word	0x20000158

08000430 <Bootloader_Send_NACK>:

static void Bootloader_Send_NACK(){
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
	uint8_t Ack_Value = CBL_SEND_NACK;
 8000436:	23ab      	movs	r3, #171	; 0xab
 8000438:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(BL_HOST_COMMUNICATION_UART, &Ack_Value, 1, HAL_MAX_DELAY);
 800043a:	1df9      	adds	r1, r7, #7
 800043c:	f04f 33ff 	mov.w	r3, #4294967295
 8000440:	2201      	movs	r2, #1
 8000442:	4803      	ldr	r0, [pc, #12]	; (8000450 <Bootloader_Send_NACK+0x20>)
 8000444:	f002 fb54 	bl	8002af0 <HAL_UART_Transmit>
}
 8000448:	bf00      	nop
 800044a:	3708      	adds	r7, #8
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}
 8000450:	20000158 	.word	0x20000158

08000454 <Bootloader_Send_Data_To_Host>:

static void Bootloader_Send_Data_To_Host(uint8_t *Host_Buffer, uint32_t Data_Len){
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
 800045c:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(BL_HOST_COMMUNICATION_UART, Host_Buffer, 4, HAL_MAX_DELAY);
 800045e:	f04f 33ff 	mov.w	r3, #4294967295
 8000462:	2204      	movs	r2, #4
 8000464:	6879      	ldr	r1, [r7, #4]
 8000466:	4803      	ldr	r0, [pc, #12]	; (8000474 <Bootloader_Send_Data_To_Host+0x20>)
 8000468:	f002 fb42 	bl	8002af0 <HAL_UART_Transmit>

}
 800046c:	bf00      	nop
 800046e:	3708      	adds	r7, #8
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}
 8000474:	20000158 	.word	0x20000158

08000478 <Bootloader_Get_Version>:

static void Bootloader_Get_Version(uint8_t *Host_Buffer){
 8000478:	b580      	push	{r7, lr}
 800047a:	b086      	sub	sp, #24
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
	uint8_t BL_Version[4] = {CBL_VENDOR_ID,CBL_SW_MAJOR_VERSION,CBL_SW_MINOR_VERSION,CBL_SW_PATCH_VERSION};
 8000480:	f44f 73b2 	mov.w	r3, #356	; 0x164
 8000484:	60fb      	str	r3, [r7, #12]
	uint16_t Host_CMD_Packet_Len = 0;
 8000486:	2300      	movs	r3, #0
 8000488:	82fb      	strh	r3, [r7, #22]
	uint32_t Host_CRC32 = 0;
 800048a:	2300      	movs	r3, #0
 800048c:	613b      	str	r3, [r7, #16]

#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_Print_Message("Read The bootloader version from the MCU !! \r\n");
 800048e:	4817      	ldr	r0, [pc, #92]	; (80004ec <Bootloader_Get_Version+0x74>)
 8000490:	f7ff ff50 	bl	8000334 <BL_Print_Message>

#endif

	/*Extract CRC32 and Packet Length sent by the host*/

	Host_CMD_Packet_Len = Host_Buffer[0] +1 ;
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	781b      	ldrb	r3, [r3, #0]
 8000498:	b29b      	uxth	r3, r3
 800049a:	3301      	adds	r3, #1
 800049c:	82fb      	strh	r3, [r7, #22]
	Host_CRC32 = *((uint32_t *) (Host_Buffer + Host_CMD_Packet_Len - CRC_TYPE_SIZE_BYTE));
 800049e:	8afb      	ldrh	r3, [r7, #22]
 80004a0:	3b04      	subs	r3, #4
 80004a2:	687a      	ldr	r2, [r7, #4]
 80004a4:	4413      	add	r3, r2
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	613b      	str	r3, [r7, #16]

	/*CRC Verificatipn*/
	if(CRC_VERIFICATION_PASSED == Bootloader_CRC_Verify((uint8_t *)&Host_Buffer[0] ,Host_CMD_Packet_Len - 4 ,Host_CRC32)){
 80004aa:	8afb      	ldrh	r3, [r7, #22]
 80004ac:	3b04      	subs	r3, #4
 80004ae:	693a      	ldr	r2, [r7, #16]
 80004b0:	4619      	mov	r1, r3
 80004b2:	6878      	ldr	r0, [r7, #4]
 80004b4:	f7ff ff64 	bl	8000380 <Bootloader_CRC_Verify>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b01      	cmp	r3, #1
 80004bc:	d10c      	bne.n	80004d8 <Bootloader_Get_Version+0x60>

#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_Print_Message("CRC Verification Passed !! \r\n");
 80004be:	480c      	ldr	r0, [pc, #48]	; (80004f0 <Bootloader_Get_Version+0x78>)
 80004c0:	f7ff ff38 	bl	8000334 <BL_Print_Message>

#endif
		Bootloader_Send_ACK(4);
 80004c4:	2004      	movs	r0, #4
 80004c6:	f7ff ff99 	bl	80003fc <Bootloader_Send_ACK>
		Bootloader_Send_Data_To_Host((uint8_t *) BL_Version, 4);
 80004ca:	f107 030c 	add.w	r3, r7, #12
 80004ce:	2104      	movs	r1, #4
 80004d0:	4618      	mov	r0, r3
 80004d2:	f7ff ffbf 	bl	8000454 <Bootloader_Send_Data_To_Host>
		BL_Print_Message("CRC Verification Passed !! \r\n");

#endif
		Bootloader_Send_NACK();
	}
}
 80004d6:	e004      	b.n	80004e2 <Bootloader_Get_Version+0x6a>
		BL_Print_Message("CRC Verification Passed !! \r\n");
 80004d8:	4805      	ldr	r0, [pc, #20]	; (80004f0 <Bootloader_Get_Version+0x78>)
 80004da:	f7ff ff2b 	bl	8000334 <BL_Print_Message>
		Bootloader_Send_NACK();
 80004de:	f7ff ffa7 	bl	8000430 <Bootloader_Send_NACK>
}
 80004e2:	bf00      	nop
 80004e4:	3718      	adds	r7, #24
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	08003b14 	.word	0x08003b14
 80004f0:	08003b44 	.word	0x08003b44

080004f4 <Bootloader_Get_Help>:
static void Bootloader_Get_Help(uint8_t *Host_Buffer){
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
 80004fc:	2300      	movs	r3, #0
 80004fe:	81fb      	strh	r3, [r7, #14]
	uint32_t Host_CRC32 = 0;
 8000500:	2300      	movs	r3, #0
 8000502:	60bb      	str	r3, [r7, #8]
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_Print_Message("Read the commands supported by the bootloader \r\n");
 8000504:	4815      	ldr	r0, [pc, #84]	; (800055c <Bootloader_Get_Help+0x68>)
 8000506:	f7ff ff15 	bl	8000334 <BL_Print_Message>
#endif
	/* Extract the CRC32 and packet length sent by the HOST */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	b29b      	uxth	r3, r3
 8000510:	3301      	adds	r3, #1
 8000512:	81fb      	strh	r3, [r7, #14]
	Host_CRC32 = *((uint32_t *)((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 8000514:	89fb      	ldrh	r3, [r7, #14]
 8000516:	3b04      	subs	r3, #4
 8000518:	687a      	ldr	r2, [r7, #4]
 800051a:	4413      	add	r3, r2
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	60bb      	str	r3, [r7, #8]
	/* CRC Verification */
	if(CRC_VERIFICATION_PASSED == Bootloader_CRC_Verify((uint8_t *)&Host_Buffer[0] , Host_CMD_Packet_Len - 4, Host_CRC32)){
 8000520:	89fb      	ldrh	r3, [r7, #14]
 8000522:	3b04      	subs	r3, #4
 8000524:	68ba      	ldr	r2, [r7, #8]
 8000526:	4619      	mov	r1, r3
 8000528:	6878      	ldr	r0, [r7, #4]
 800052a:	f7ff ff29 	bl	8000380 <Bootloader_CRC_Verify>
 800052e:	4603      	mov	r3, r0
 8000530:	2b01      	cmp	r3, #1
 8000532:	d10a      	bne.n	800054a <Bootloader_Get_Help+0x56>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Passed \r\n");
 8000534:	480a      	ldr	r0, [pc, #40]	; (8000560 <Bootloader_Get_Help+0x6c>)
 8000536:	f7ff fefd 	bl	8000334 <BL_Print_Message>
#endif
		Bootloader_Send_ACK(12);
 800053a:	200c      	movs	r0, #12
 800053c:	f7ff ff5e 	bl	80003fc <Bootloader_Send_ACK>
		Bootloader_Send_Data_To_Host((uint8_t *)(&Bootloader_Supported_CMDs[0]), 12);
 8000540:	210c      	movs	r1, #12
 8000542:	4808      	ldr	r0, [pc, #32]	; (8000564 <Bootloader_Get_Help+0x70>)
 8000544:	f7ff ff86 	bl	8000454 <Bootloader_Send_Data_To_Host>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Failed \r\n");
#endif
		Bootloader_Send_NACK();
	}
}
 8000548:	e004      	b.n	8000554 <Bootloader_Get_Help+0x60>
		BL_Print_Message("CRC Verification Failed \r\n");
 800054a:	4807      	ldr	r0, [pc, #28]	; (8000568 <Bootloader_Get_Help+0x74>)
 800054c:	f7ff fef2 	bl	8000334 <BL_Print_Message>
		Bootloader_Send_NACK();
 8000550:	f7ff ff6e 	bl	8000430 <Bootloader_Send_NACK>
}
 8000554:	bf00      	nop
 8000556:	3710      	adds	r7, #16
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	08003b64 	.word	0x08003b64
 8000560:	08003b98 	.word	0x08003b98
 8000564:	20000000 	.word	0x20000000
 8000568:	08003bb4 	.word	0x08003bb4

0800056c <Bootloader_Get_Chip_Identification_Number>:
static void Bootloader_Get_Chip_Identification_Number(uint8_t *Host_Buffer){
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
 8000574:	2300      	movs	r3, #0
 8000576:	82fb      	strh	r3, [r7, #22]
	uint32_t Host_CRC32 = 0;
 8000578:	2300      	movs	r3, #0
 800057a:	613b      	str	r3, [r7, #16]
	uint16_t MCU_Identification_Number = 0;
 800057c:	2300      	movs	r3, #0
 800057e:	81fb      	strh	r3, [r7, #14]
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_Print_Message("Read the MCU chip identification number \r\n");
 8000580:	481a      	ldr	r0, [pc, #104]	; (80005ec <Bootloader_Get_Chip_Identification_Number+0x80>)
 8000582:	f7ff fed7 	bl	8000334 <BL_Print_Message>
#endif
	/* Extract the CRC32 and packet length sent by the HOST */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	b29b      	uxth	r3, r3
 800058c:	3301      	adds	r3, #1
 800058e:	82fb      	strh	r3, [r7, #22]
	Host_CRC32 = *((uint32_t *)((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 8000590:	8afb      	ldrh	r3, [r7, #22]
 8000592:	3b04      	subs	r3, #4
 8000594:	687a      	ldr	r2, [r7, #4]
 8000596:	4413      	add	r3, r2
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	613b      	str	r3, [r7, #16]
	/* CRC Verification */
	if(CRC_VERIFICATION_PASSED == Bootloader_CRC_Verify((uint8_t *)&Host_Buffer[0] , Host_CMD_Packet_Len - 4, Host_CRC32)){
 800059c:	8afb      	ldrh	r3, [r7, #22]
 800059e:	3b04      	subs	r3, #4
 80005a0:	693a      	ldr	r2, [r7, #16]
 80005a2:	4619      	mov	r1, r3
 80005a4:	6878      	ldr	r0, [r7, #4]
 80005a6:	f7ff feeb 	bl	8000380 <Bootloader_CRC_Verify>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b01      	cmp	r3, #1
 80005ae:	d113      	bne.n	80005d8 <Bootloader_Get_Chip_Identification_Number+0x6c>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Passed \r\n");
 80005b0:	480f      	ldr	r0, [pc, #60]	; (80005f0 <Bootloader_Get_Chip_Identification_Number+0x84>)
 80005b2:	f7ff febf 	bl	8000334 <BL_Print_Message>
#endif
		/* Get the MCU chip identification number */
		MCU_Identification_Number = (uint16_t)((DBGMCU->IDCODE) & 0x00000FFF);
 80005b6:	4b0f      	ldr	r3, [pc, #60]	; (80005f4 <Bootloader_Get_Chip_Identification_Number+0x88>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	b29b      	uxth	r3, r3
 80005bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80005c0:	b29b      	uxth	r3, r3
 80005c2:	81fb      	strh	r3, [r7, #14]
		/* Report chip identification number to HOST */
		Bootloader_Send_ACK(2);
 80005c4:	2002      	movs	r0, #2
 80005c6:	f7ff ff19 	bl	80003fc <Bootloader_Send_ACK>
		Bootloader_Send_Data_To_Host((uint8_t *)&MCU_Identification_Number, 2);
 80005ca:	f107 030e 	add.w	r3, r7, #14
 80005ce:	2102      	movs	r1, #2
 80005d0:	4618      	mov	r0, r3
 80005d2:	f7ff ff3f 	bl	8000454 <Bootloader_Send_Data_To_Host>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Failed \r\n");
#endif
		Bootloader_Send_NACK();
	}
}
 80005d6:	e004      	b.n	80005e2 <Bootloader_Get_Chip_Identification_Number+0x76>
		BL_Print_Message("CRC Verification Failed \r\n");
 80005d8:	4807      	ldr	r0, [pc, #28]	; (80005f8 <Bootloader_Get_Chip_Identification_Number+0x8c>)
 80005da:	f7ff feab 	bl	8000334 <BL_Print_Message>
		Bootloader_Send_NACK();
 80005de:	f7ff ff27 	bl	8000430 <Bootloader_Send_NACK>
}
 80005e2:	bf00      	nop
 80005e4:	3718      	adds	r7, #24
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	08003bd0 	.word	0x08003bd0
 80005f0:	08003b98 	.word	0x08003b98
 80005f4:	e0042000 	.word	0xe0042000
 80005f8:	08003bb4 	.word	0x08003bb4

080005fc <CBL_STM32F103_Get_RDP_Level>:

	/*Jump to Application reset handler*/
	ResetHandler_Address();
}

static uint8_t CBL_STM32F103_Get_RDP_Level(){
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b088      	sub	sp, #32
 8000600:	af00      	add	r7, sp, #0
	FLASH_OBProgramInitTypeDef FLASH_OBProgram;
	/* Get the Option byte configuration */
	HAL_FLASHEx_OBGetConfig(&FLASH_OBProgram);
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	4618      	mov	r0, r3
 8000606:	f001 fa03 	bl	8001a10 <HAL_FLASHEx_OBGetConfig>

	return (uint8_t)(FLASH_OBProgram.RDPLevel);
 800060a:	7d3b      	ldrb	r3, [r7, #20]

}
 800060c:	4618      	mov	r0, r3
 800060e:	3720      	adds	r7, #32
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}

08000614 <Bootloader_Read_Protection_Level>:

static void Bootloader_Read_Protection_Level(uint8_t *Host_Buffer){
 8000614:	b580      	push	{r7, lr}
 8000616:	b086      	sub	sp, #24
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
 800061c:	2300      	movs	r3, #0
 800061e:	82fb      	strh	r3, [r7, #22]
	uint32_t Host_CRC32 = 0;
 8000620:	2300      	movs	r3, #0
 8000622:	613b      	str	r3, [r7, #16]
	uint8_t RDP_Level = 0;
 8000624:	2300      	movs	r3, #0
 8000626:	73fb      	strb	r3, [r7, #15]

#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_Print_Message("Read the FLASH Read Protection Out level \r\n");
 8000628:	4818      	ldr	r0, [pc, #96]	; (800068c <Bootloader_Read_Protection_Level+0x78>)
 800062a:	f7ff fe83 	bl	8000334 <BL_Print_Message>
#endif
	/* Extract the CRC32 and packet length sent by the HOST */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	b29b      	uxth	r3, r3
 8000634:	3301      	adds	r3, #1
 8000636:	82fb      	strh	r3, [r7, #22]
	Host_CRC32 = *((uint32_t *)((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 8000638:	8afb      	ldrh	r3, [r7, #22]
 800063a:	3b04      	subs	r3, #4
 800063c:	687a      	ldr	r2, [r7, #4]
 800063e:	4413      	add	r3, r2
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	613b      	str	r3, [r7, #16]
/* CRC Verification */
	if(CRC_VERIFICATION_PASSED == Bootloader_CRC_Verify((uint8_t *)&Host_Buffer[0] , Host_CMD_Packet_Len - 4, Host_CRC32)){
 8000644:	8afb      	ldrh	r3, [r7, #22]
 8000646:	3b04      	subs	r3, #4
 8000648:	693a      	ldr	r2, [r7, #16]
 800064a:	4619      	mov	r1, r3
 800064c:	6878      	ldr	r0, [r7, #4]
 800064e:	f7ff fe97 	bl	8000380 <Bootloader_CRC_Verify>
 8000652:	4603      	mov	r3, r0
 8000654:	2b01      	cmp	r3, #1
 8000656:	d110      	bne.n	800067a <Bootloader_Read_Protection_Level+0x66>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Passed \r\n");
 8000658:	480d      	ldr	r0, [pc, #52]	; (8000690 <Bootloader_Read_Protection_Level+0x7c>)
 800065a:	f7ff fe6b 	bl	8000334 <BL_Print_Message>
#endif
		Bootloader_Send_ACK(1);
 800065e:	2001      	movs	r0, #1
 8000660:	f7ff fecc 	bl	80003fc <Bootloader_Send_ACK>
		/* Read Protection Level */
		RDP_Level = CBL_STM32F103_Get_RDP_Level();
 8000664:	f7ff ffca 	bl	80005fc <CBL_STM32F103_Get_RDP_Level>
 8000668:	4603      	mov	r3, r0
 800066a:	73fb      	strb	r3, [r7, #15]
		/* Report Valid Protection Level */
		Bootloader_Send_Data_To_Host((uint8_t *)&RDP_Level, 1);
 800066c:	f107 030f 	add.w	r3, r7, #15
 8000670:	2101      	movs	r1, #1
 8000672:	4618      	mov	r0, r3
 8000674:	f7ff feee 	bl	8000454 <Bootloader_Send_Data_To_Host>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Failed \r\n");
#endif
		Bootloader_Send_NACK();
	}
}
 8000678:	e004      	b.n	8000684 <Bootloader_Read_Protection_Level+0x70>
		BL_Print_Message("CRC Verification Failed \r\n");
 800067a:	4806      	ldr	r0, [pc, #24]	; (8000694 <Bootloader_Read_Protection_Level+0x80>)
 800067c:	f7ff fe5a 	bl	8000334 <BL_Print_Message>
		Bootloader_Send_NACK();
 8000680:	f7ff fed6 	bl	8000430 <Bootloader_Send_NACK>
}
 8000684:	bf00      	nop
 8000686:	3718      	adds	r7, #24
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	08003bfc 	.word	0x08003bfc
 8000690:	08003b98 	.word	0x08003b98
 8000694:	08003bb4 	.word	0x08003bb4

08000698 <Host_Jump_Address_Verification>:

static uint8_t Host_Jump_Address_Verification(uint32_t Jump_Address){
 8000698:	b480      	push	{r7}
 800069a:	b085      	sub	sp, #20
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
	uint8_t Address_Verification = ADDRESS_IS_INVALID;
 80006a0:	2300      	movs	r3, #0
 80006a2:	73fb      	strb	r3, [r7, #15]
	if((Jump_Address >= SRAM_BASE) && (Jump_Address <= STM32F103_SRAM_END))
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006aa:	d305      	bcc.n	80006b8 <Host_Jump_Address_Verification+0x20>
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	4a0c      	ldr	r2, [pc, #48]	; (80006e0 <Host_Jump_Address_Verification+0x48>)
 80006b0:	4293      	cmp	r3, r2
 80006b2:	d801      	bhi.n	80006b8 <Host_Jump_Address_Verification+0x20>
	{
		Address_Verification = ADDRESS_IS_VALID;
 80006b4:	2301      	movs	r3, #1
 80006b6:	73fb      	strb	r3, [r7, #15]
	}
	if((Jump_Address >= FLASH_BASE) && (Jump_Address <= STM32F103_FLASH_END))
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80006be:	d306      	bcc.n	80006ce <Host_Jump_Address_Verification+0x36>
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	4a08      	ldr	r2, [pc, #32]	; (80006e4 <Host_Jump_Address_Verification+0x4c>)
 80006c4:	4293      	cmp	r3, r2
 80006c6:	d802      	bhi.n	80006ce <Host_Jump_Address_Verification+0x36>
	{
		Address_Verification = ADDRESS_IS_VALID;
 80006c8:	2301      	movs	r3, #1
 80006ca:	73fb      	strb	r3, [r7, #15]
 80006cc:	e001      	b.n	80006d2 <Host_Jump_Address_Verification+0x3a>
	}
	else{
		Address_Verification = ADDRESS_IS_INVALID;
 80006ce:	2300      	movs	r3, #0
 80006d0:	73fb      	strb	r3, [r7, #15]
	}


	return Address_Verification;
 80006d2:	7bfb      	ldrb	r3, [r7, #15]

}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3714      	adds	r7, #20
 80006d8:	46bd      	mov	sp, r7
 80006da:	bc80      	pop	{r7}
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	20005000 	.word	0x20005000
 80006e4:	08010000 	.word	0x08010000

080006e8 <Bootloader_Jump_To_Address>:
static void Bootloader_Jump_To_Address(uint8_t *Host_Buffer){
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b088      	sub	sp, #32
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
 80006f0:	2300      	movs	r3, #0
 80006f2:	83fb      	strh	r3, [r7, #30]
	uint32_t Host_CRC32 = 0;
 80006f4:	2300      	movs	r3, #0
 80006f6:	61bb      	str	r3, [r7, #24]
	uint32_t HOST_Jump_Address = 0;
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]
	uint8_t Address_Verification = ADDRESS_IS_INVALID;
 80006fc:	2300      	movs	r3, #0
 80006fe:	73fb      	strb	r3, [r7, #15]
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_Print_Message("Read the commands supported by the bootloader \r\n");
 8000700:	4826      	ldr	r0, [pc, #152]	; (800079c <Bootloader_Jump_To_Address+0xb4>)
 8000702:	f7ff fe17 	bl	8000334 <BL_Print_Message>
#endif
	/* Extract the CRC32 and packet length sent by the HOST */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	b29b      	uxth	r3, r3
 800070c:	3301      	adds	r3, #1
 800070e:	83fb      	strh	r3, [r7, #30]
	Host_CRC32 = *((uint32_t *)((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 8000710:	8bfb      	ldrh	r3, [r7, #30]
 8000712:	3b04      	subs	r3, #4
 8000714:	687a      	ldr	r2, [r7, #4]
 8000716:	4413      	add	r3, r2
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	61bb      	str	r3, [r7, #24]
	/* CRC Verification */
	if(CRC_VERIFICATION_PASSED == Bootloader_CRC_Verify((uint8_t *)&Host_Buffer[0] , Host_CMD_Packet_Len - 4, Host_CRC32)){
 800071c:	8bfb      	ldrh	r3, [r7, #30]
 800071e:	3b04      	subs	r3, #4
 8000720:	69ba      	ldr	r2, [r7, #24]
 8000722:	4619      	mov	r1, r3
 8000724:	6878      	ldr	r0, [r7, #4]
 8000726:	f7ff fe2b 	bl	8000380 <Bootloader_CRC_Verify>
 800072a:	4603      	mov	r3, r0
 800072c:	2b01      	cmp	r3, #1
 800072e:	d12b      	bne.n	8000788 <Bootloader_Jump_To_Address+0xa0>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Passed \r\n");
 8000730:	481b      	ldr	r0, [pc, #108]	; (80007a0 <Bootloader_Jump_To_Address+0xb8>)
 8000732:	f7ff fdff 	bl	8000334 <BL_Print_Message>
#endif
		Bootloader_Send_ACK(1);
 8000736:	2001      	movs	r0, #1
 8000738:	f7ff fe60 	bl	80003fc <Bootloader_Send_ACK>
		/*extract address from the host from host packet*/
		HOST_Jump_Address = *((uint32_t *) &Host_Buffer [2]);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000742:	617b      	str	r3, [r7, #20]

		/*Verify Address is Valid*/
		Address_Verification = Host_Jump_Address_Verification(HOST_Jump_Address);
 8000744:	6978      	ldr	r0, [r7, #20]
 8000746:	f7ff ffa7 	bl	8000698 <Host_Jump_Address_Verification>
 800074a:	4603      	mov	r3, r0
 800074c:	73fb      	strb	r3, [r7, #15]
		if(ADDRESS_IS_VALID == Address_Verification)
 800074e:	7bfb      	ldrb	r3, [r7, #15]
 8000750:	2b01      	cmp	r3, #1
 8000752:	d112      	bne.n	800077a <Bootloader_Jump_To_Address+0x92>
		{
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("Address verification succeeded \r\n");
 8000754:	4813      	ldr	r0, [pc, #76]	; (80007a4 <Bootloader_Jump_To_Address+0xbc>)
 8000756:	f7ff fded 	bl	8000334 <BL_Print_Message>
#endif
			/*address verification succeeded*/
			Bootloader_Send_Data_To_Host((uint8_t *)&Address_Verification, 1);
 800075a:	f107 030f 	add.w	r3, r7, #15
 800075e:	2101      	movs	r1, #1
 8000760:	4618      	mov	r0, r3
 8000762:	f7ff fe77 	bl	8000454 <Bootloader_Send_Data_To_Host>
			/*prepare address to jump*/
			JumpPtr Jump_Address = (JumpPtr) (HOST_Jump_Address + 1);
 8000766:	697b      	ldr	r3, [r7, #20]
 8000768:	3301      	adds	r3, #1
 800076a:	613b      	str	r3, [r7, #16]
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("Jump to ox%X \r\n",Jump_Address);
 800076c:	6939      	ldr	r1, [r7, #16]
 800076e:	480e      	ldr	r0, [pc, #56]	; (80007a8 <Bootloader_Jump_To_Address+0xc0>)
 8000770:	f7ff fde0 	bl	8000334 <BL_Print_Message>
#endif
			Jump_Address();
 8000774:	693b      	ldr	r3, [r7, #16]
 8000776:	4798      	blx	r3
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Failed \r\n");
#endif
		Bootloader_Send_NACK();
	}
}
 8000778:	e00b      	b.n	8000792 <Bootloader_Jump_To_Address+0xaa>
			Bootloader_Send_Data_To_Host((uint8_t *)&Address_Verification, 1);
 800077a:	f107 030f 	add.w	r3, r7, #15
 800077e:	2101      	movs	r1, #1
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff fe67 	bl	8000454 <Bootloader_Send_Data_To_Host>
}
 8000786:	e004      	b.n	8000792 <Bootloader_Jump_To_Address+0xaa>
		BL_Print_Message("CRC Verification Failed \r\n");
 8000788:	4808      	ldr	r0, [pc, #32]	; (80007ac <Bootloader_Jump_To_Address+0xc4>)
 800078a:	f7ff fdd3 	bl	8000334 <BL_Print_Message>
		Bootloader_Send_NACK();
 800078e:	f7ff fe4f 	bl	8000430 <Bootloader_Send_NACK>
}
 8000792:	bf00      	nop
 8000794:	3720      	adds	r7, #32
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	08003b64 	.word	0x08003b64
 80007a0:	08003b98 	.word	0x08003b98
 80007a4:	08003c28 	.word	0x08003c28
 80007a8:	08003c4c 	.word	0x08003c4c
 80007ac:	08003bb4 	.word	0x08003bb4

080007b0 <Perform_Flash_Erase>:


static uint8_t Perform_Flash_Erase (uint8_t Page_Number, uint16_t Number_of_Pages){
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b088      	sub	sp, #32
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	4603      	mov	r3, r0
 80007b8:	460a      	mov	r2, r1
 80007ba:	71fb      	strb	r3, [r7, #7]
 80007bc:	4613      	mov	r3, r2
 80007be:	80bb      	strh	r3, [r7, #4]

	uint8_t Page_Validity_Status = INVALID_PAGE_NUMBER;
 80007c0:	2300      	movs	r3, #0
 80007c2:	77fb      	strb	r3, [r7, #31]
	FLASH_EraseInitTypeDef pEraseInit;
	uint8_t Remaining_Pages = 0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	77bb      	strb	r3, [r7, #30]
	HAL_StatusTypeDef HAL_Status = HAL_ERROR;
 80007c8:	2301      	movs	r3, #1
 80007ca:	777b      	strb	r3, [r7, #29]
	uint32_t Page_Error = 0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	60bb      	str	r3, [r7, #8]

	if(Number_of_Pages > CBL_FLASH_MAX_PAGE_NUMBER)
 80007d0:	88bb      	ldrh	r3, [r7, #4]
 80007d2:	2b80      	cmp	r3, #128	; 0x80
 80007d4:	d902      	bls.n	80007dc <Perform_Flash_Erase+0x2c>
	{
		/*Number of Pages is out of range*/
		Page_Validity_Status = INVALID_PAGE_NUMBER;
 80007d6:	2300      	movs	r3, #0
 80007d8:	77fb      	strb	r3, [r7, #31]
 80007da:	e04e      	b.n	800087a <Perform_Flash_Erase+0xca>
	}
	else{
		Page_Validity_Status = VALID_PAGE_NUMBER;
 80007dc:	2301      	movs	r3, #1
 80007de:	77fb      	strb	r3, [r7, #31]
		if((Page_Number <= (CBL_FLASH_MAX_PAGE_NUMBER -1)) || (CBL_FLASH_MASS_ERASE == Page_Number)){
 80007e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	da02      	bge.n	80007ee <Perform_Flash_Erase+0x3e>
 80007e8:	79fb      	ldrb	r3, [r7, #7]
 80007ea:	2bff      	cmp	r3, #255	; 0xff
 80007ec:	d143      	bne.n	8000876 <Perform_Flash_Erase+0xc6>
			if(CBL_FLASH_MASS_ERASE == Page_Number)
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	2bff      	cmp	r3, #255	; 0xff
 80007f2:	d105      	bne.n	8000800 <Perform_Flash_Erase+0x50>
			{
				/*Flash MASS ERASE activation*/
				pEraseInit.TypeErase = FLASH_TYPEERASE_MASSERASE;
 80007f4:	2302      	movs	r3, #2
 80007f6:	60fb      	str	r3, [r7, #12]
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("Flash MASS ERASE activation \r\n");
 80007f8:	4822      	ldr	r0, [pc, #136]	; (8000884 <Perform_Flash_Erase+0xd4>)
 80007fa:	f7ff fd9b 	bl	8000334 <BL_Print_Message>
 80007fe:	e016      	b.n	800082e <Perform_Flash_Erase+0x7e>
#endif
			}
			else{
				/*Pages Erase ONLY*/
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("Flash MPages Erase ONLY activation \r\n");
 8000800:	4821      	ldr	r0, [pc, #132]	; (8000888 <Perform_Flash_Erase+0xd8>)
 8000802:	f7ff fd97 	bl	8000334 <BL_Print_Message>
#endif
				Remaining_Pages = CBL_FLASH_MAX_PAGE_NUMBER - Page_Number;
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 800080c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8000810:	3380      	adds	r3, #128	; 0x80
 8000812:	77bb      	strb	r3, [r7, #30]
				/*If user entered more pages than the available number from the page number entered*/
				if(Number_of_Pages > Remaining_Pages){
 8000814:	7fbb      	ldrb	r3, [r7, #30]
 8000816:	b29b      	uxth	r3, r3
 8000818:	88ba      	ldrh	r2, [r7, #4]
 800081a:	429a      	cmp	r2, r3
 800081c:	d901      	bls.n	8000822 <Perform_Flash_Erase+0x72>
					Number_of_Pages = Remaining_Pages;
 800081e:	7fbb      	ldrb	r3, [r7, #30]
 8000820:	80bb      	strh	r3, [r7, #4]
				}
				else{
					/*Nothing*/
				}
				pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8000822:	2300      	movs	r3, #0
 8000824:	60fb      	str	r3, [r7, #12]
				pEraseInit.PageAddress = Page_Number; 								/*Initial FLASH page address to erase when mass erase is disabled*/
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	617b      	str	r3, [r7, #20]
				pEraseInit.NbPages = Number_of_Pages; 								/*Number of pages to be erased*/
 800082a:	88bb      	ldrh	r3, [r7, #4]
 800082c:	61bb      	str	r3, [r7, #24]


			}

			pEraseInit.Banks = 3U;													 /*Both Bank 1 and Bank 2*/
 800082e:	2303      	movs	r3, #3
 8000830:	613b      	str	r3, [r7, #16]

			HAL_Status = HAL_FLASH_OB_Unlock();										/*Unlock Flash control register*/
 8000832:	f000 fedf 	bl	80015f4 <HAL_FLASH_OB_Unlock>
 8000836:	4603      	mov	r3, r0
 8000838:	777b      	strb	r3, [r7, #29]
			HAL_Status = HAL_FLASHEx_Erase(&pEraseInit, &Page_Error);				/*Erase Flash memory pages*/
 800083a:	f107 0208 	add.w	r2, r7, #8
 800083e:	f107 030c 	add.w	r3, r7, #12
 8000842:	4611      	mov	r1, r2
 8000844:	4618      	mov	r0, r3
 8000846:	f000 ffb9 	bl	80017bc <HAL_FLASHEx_Erase>
 800084a:	4603      	mov	r3, r0
 800084c:	777b      	strb	r3, [r7, #29]

			if(HAL_SUCCESSFUL_ERASE == Page_Error){
 800084e:	68bb      	ldr	r3, [r7, #8]
 8000850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000854:	d105      	bne.n	8000862 <Perform_Flash_Erase+0xb2>
				Page_Validity_Status = SUCCESSFUL_ERASE;
 8000856:	2303      	movs	r3, #3
 8000858:	77fb      	strb	r3, [r7, #31]
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("SUCCESSFUL ERASE \r\n");
 800085a:	480c      	ldr	r0, [pc, #48]	; (800088c <Perform_Flash_Erase+0xdc>)
 800085c:	f7ff fd6a 	bl	8000334 <BL_Print_Message>
 8000860:	e004      	b.n	800086c <Perform_Flash_Erase+0xbc>
#endif

			}
			else{
				Page_Validity_Status = UNSUCCESSFUL_ERASE;
 8000862:	2302      	movs	r3, #2
 8000864:	77fb      	strb	r3, [r7, #31]
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("UNSUCCESSFUL ERASE \r\n");
 8000866:	480a      	ldr	r0, [pc, #40]	; (8000890 <Perform_Flash_Erase+0xe0>)
 8000868:	f7ff fd64 	bl	8000334 <BL_Print_Message>
#endif
			}
			HAL_Status = HAL_FLASH_Lock();											/*Lock Flash control register*/
 800086c:	f000 feb2 	bl	80015d4 <HAL_FLASH_Lock>
 8000870:	4603      	mov	r3, r0
 8000872:	777b      	strb	r3, [r7, #29]
 8000874:	e001      	b.n	800087a <Perform_Flash_Erase+0xca>
		}
		else{
			Page_Validity_Status = UNSUCCESSFUL_ERASE;
 8000876:	2302      	movs	r3, #2
 8000878:	77fb      	strb	r3, [r7, #31]
		}


	}
	return Page_Validity_Status;
 800087a:	7ffb      	ldrb	r3, [r7, #31]
}
 800087c:	4618      	mov	r0, r3
 800087e:	3720      	adds	r7, #32
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	08003c5c 	.word	0x08003c5c
 8000888:	08003c7c 	.word	0x08003c7c
 800088c:	08003ca4 	.word	0x08003ca4
 8000890:	08003cb8 	.word	0x08003cb8

08000894 <Bootloader_Erase_Flash>:

static void Bootloader_Erase_Flash(uint8_t *Host_Buffer){
 8000894:	b580      	push	{r7, lr}
 8000896:	b086      	sub	sp, #24
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
 800089c:	2300      	movs	r3, #0
 800089e:	82fb      	strh	r3, [r7, #22]
	uint32_t Host_CRC32 = 0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	613b      	str	r3, [r7, #16]
	uint8_t Erase_Status = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	73fb      	strb	r3, [r7, #15]

#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_Print_Message("Mass erase or Page erase to the user flash !! \r\n");
 80008a8:	4822      	ldr	r0, [pc, #136]	; (8000934 <Bootloader_Erase_Flash+0xa0>)
 80008aa:	f7ff fd43 	bl	8000334 <BL_Print_Message>
#endif
	/* Extract the CRC32 and packet length sent by the HOST */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	b29b      	uxth	r3, r3
 80008b4:	3301      	adds	r3, #1
 80008b6:	82fb      	strh	r3, [r7, #22]
	Host_CRC32 = *((uint32_t *)((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 80008b8:	8afb      	ldrh	r3, [r7, #22]
 80008ba:	3b04      	subs	r3, #4
 80008bc:	687a      	ldr	r2, [r7, #4]
 80008be:	4413      	add	r3, r2
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	613b      	str	r3, [r7, #16]

	/* CRC Verification */
	if(CRC_VERIFICATION_PASSED == Bootloader_CRC_Verify((uint8_t *)&Host_Buffer[0] , Host_CMD_Packet_Len - 4, Host_CRC32)){
 80008c4:	8afb      	ldrh	r3, [r7, #22]
 80008c6:	3b04      	subs	r3, #4
 80008c8:	693a      	ldr	r2, [r7, #16]
 80008ca:	4619      	mov	r1, r3
 80008cc:	6878      	ldr	r0, [r7, #4]
 80008ce:	f7ff fd57 	bl	8000380 <Bootloader_CRC_Verify>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b01      	cmp	r3, #1
 80008d6:	d123      	bne.n	8000920 <Bootloader_Erase_Flash+0x8c>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Passed \r\n");
 80008d8:	4817      	ldr	r0, [pc, #92]	; (8000938 <Bootloader_Erase_Flash+0xa4>)
 80008da:	f7ff fd2b 	bl	8000334 <BL_Print_Message>
#endif
		Bootloader_Send_ACK(1);
 80008de:	2001      	movs	r0, #1
 80008e0:	f7ff fd8c 	bl	80003fc <Bootloader_Send_ACK>
		Erase_Status = Perform_Flash_Erase(Host_Buffer[2],Host_Buffer[3]);
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	3302      	adds	r3, #2
 80008e8:	781a      	ldrb	r2, [r3, #0]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	3303      	adds	r3, #3
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	b29b      	uxth	r3, r3
 80008f2:	4619      	mov	r1, r3
 80008f4:	4610      	mov	r0, r2
 80008f6:	f7ff ff5b 	bl	80007b0 <Perform_Flash_Erase>
 80008fa:	4603      	mov	r3, r0
 80008fc:	73fb      	strb	r3, [r7, #15]
		if(SUCCESSFUL_ERASE == Erase_Status){
 80008fe:	7bfb      	ldrb	r3, [r7, #15]
 8000900:	2b03      	cmp	r3, #3
 8000902:	d106      	bne.n	8000912 <Bootloader_Erase_Flash+0x7e>
			/*report Erase Passed*/
			Bootloader_Send_Data_To_Host((uint8_t *)&Erase_Status, 1);
 8000904:	f107 030f 	add.w	r3, r7, #15
 8000908:	2101      	movs	r1, #1
 800090a:	4618      	mov	r0, r3
 800090c:	f7ff fda2 	bl	8000454 <Bootloader_Send_Data_To_Host>
		BL_Print_Message("CRC Verification Failed \r\n");
#endif
		Bootloader_Send_NACK();
	}

}
 8000910:	e00b      	b.n	800092a <Bootloader_Erase_Flash+0x96>
			Bootloader_Send_Data_To_Host((uint8_t *)&Erase_Status, 1);
 8000912:	f107 030f 	add.w	r3, r7, #15
 8000916:	2101      	movs	r1, #1
 8000918:	4618      	mov	r0, r3
 800091a:	f7ff fd9b 	bl	8000454 <Bootloader_Send_Data_To_Host>
}
 800091e:	e004      	b.n	800092a <Bootloader_Erase_Flash+0x96>
		BL_Print_Message("CRC Verification Failed \r\n");
 8000920:	4806      	ldr	r0, [pc, #24]	; (800093c <Bootloader_Erase_Flash+0xa8>)
 8000922:	f7ff fd07 	bl	8000334 <BL_Print_Message>
		Bootloader_Send_NACK();
 8000926:	f7ff fd83 	bl	8000430 <Bootloader_Send_NACK>
}
 800092a:	bf00      	nop
 800092c:	3718      	adds	r7, #24
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	08003cd0 	.word	0x08003cd0
 8000938:	08003b98 	.word	0x08003b98
 800093c:	08003bb4 	.word	0x08003bb4

08000940 <Flash_Memory_Write_Payload>:


static uint8_t Flash_Memory_Write_Payload(uint8_t *Host_Payload, uint32_t Payload_Start_Address, uint16_t Payload_Len){
 8000940:	b5b0      	push	{r4, r5, r7, lr}
 8000942:	b086      	sub	sp, #24
 8000944:	af00      	add	r7, sp, #0
 8000946:	60f8      	str	r0, [r7, #12]
 8000948:	60b9      	str	r1, [r7, #8]
 800094a:	4613      	mov	r3, r2
 800094c:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef HAL_Status = HAL_ERROR;
 800094e:	2301      	movs	r3, #1
 8000950:	75fb      	strb	r3, [r7, #23]
	uint8_t Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000952:	2300      	movs	r3, #0
 8000954:	75bb      	strb	r3, [r7, #22]
	uint16_t Payload_Counter = 0;
 8000956:	2300      	movs	r3, #0
 8000958:	82bb      	strh	r3, [r7, #20]

	/* Unlock the FLASH control register access */
  HAL_Status = HAL_FLASH_Unlock();
 800095a:	f000 fe15 	bl	8001588 <HAL_FLASH_Unlock>
 800095e:	4603      	mov	r3, r0
 8000960:	75fb      	strb	r3, [r7, #23]

	if(HAL_Status != HAL_OK){
 8000962:	7dfb      	ldrb	r3, [r7, #23]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d002      	beq.n	800096e <Flash_Memory_Write_Payload+0x2e>
		Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000968:	2300      	movs	r3, #0
 800096a:	75bb      	strb	r3, [r7, #22]
 800096c:	e023      	b.n	80009b6 <Flash_Memory_Write_Payload+0x76>
	}
	else{
		for(Payload_Counter = 0; Payload_Counter < Payload_Len; Payload_Counter++){
 800096e:	2300      	movs	r3, #0
 8000970:	82bb      	strh	r3, [r7, #20]
 8000972:	e01c      	b.n	80009ae <Flash_Memory_Write_Payload+0x6e>
			/* Program a byte at a specified address */
			HAL_Status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Payload_Start_Address + Payload_Counter, Host_Payload[Payload_Counter]);
 8000974:	8aba      	ldrh	r2, [r7, #20]
 8000976:	68bb      	ldr	r3, [r7, #8]
 8000978:	18d1      	adds	r1, r2, r3
 800097a:	8abb      	ldrh	r3, [r7, #20]
 800097c:	68fa      	ldr	r2, [r7, #12]
 800097e:	4413      	add	r3, r2
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	b2db      	uxtb	r3, r3
 8000984:	2200      	movs	r2, #0
 8000986:	461c      	mov	r4, r3
 8000988:	4615      	mov	r5, r2
 800098a:	4622      	mov	r2, r4
 800098c:	462b      	mov	r3, r5
 800098e:	2001      	movs	r0, #1
 8000990:	f000 fd8a 	bl	80014a8 <HAL_FLASH_Program>
 8000994:	4603      	mov	r3, r0
 8000996:	75fb      	strb	r3, [r7, #23]
			if(HAL_Status != HAL_OK){
 8000998:	7dfb      	ldrb	r3, [r7, #23]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d002      	beq.n	80009a4 <Flash_Memory_Write_Payload+0x64>
				Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 800099e:	2300      	movs	r3, #0
 80009a0:	75bb      	strb	r3, [r7, #22]
				break;
 80009a2:	e008      	b.n	80009b6 <Flash_Memory_Write_Payload+0x76>
			}
			else{
				Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_PASSED;
 80009a4:	2301      	movs	r3, #1
 80009a6:	75bb      	strb	r3, [r7, #22]
		for(Payload_Counter = 0; Payload_Counter < Payload_Len; Payload_Counter++){
 80009a8:	8abb      	ldrh	r3, [r7, #20]
 80009aa:	3301      	adds	r3, #1
 80009ac:	82bb      	strh	r3, [r7, #20]
 80009ae:	8aba      	ldrh	r2, [r7, #20]
 80009b0:	88fb      	ldrh	r3, [r7, #6]
 80009b2:	429a      	cmp	r2, r3
 80009b4:	d3de      	bcc.n	8000974 <Flash_Memory_Write_Payload+0x34>
			}
		}
	}

	if((FLASH_PAYLOAD_WRITE_PASSED == Flash_Payload_Write_Status) && (HAL_OK == HAL_Status)){
 80009b6:	7dbb      	ldrb	r3, [r7, #22]
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d10f      	bne.n	80009dc <Flash_Memory_Write_Payload+0x9c>
 80009bc:	7dfb      	ldrb	r3, [r7, #23]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d10c      	bne.n	80009dc <Flash_Memory_Write_Payload+0x9c>
		/* Locks the FLASH control register access */
		HAL_Status = HAL_FLASH_Lock();
 80009c2:	f000 fe07 	bl	80015d4 <HAL_FLASH_Lock>
 80009c6:	4603      	mov	r3, r0
 80009c8:	75fb      	strb	r3, [r7, #23]
		if(HAL_Status != HAL_OK){
 80009ca:	7dfb      	ldrb	r3, [r7, #23]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d002      	beq.n	80009d6 <Flash_Memory_Write_Payload+0x96>
			Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 80009d0:	2300      	movs	r3, #0
 80009d2:	75bb      	strb	r3, [r7, #22]
		if(HAL_Status != HAL_OK){
 80009d4:	e004      	b.n	80009e0 <Flash_Memory_Write_Payload+0xa0>
		}
		else{
			Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_PASSED;
 80009d6:	2301      	movs	r3, #1
 80009d8:	75bb      	strb	r3, [r7, #22]
		if(HAL_Status != HAL_OK){
 80009da:	e001      	b.n	80009e0 <Flash_Memory_Write_Payload+0xa0>
		}
	}
	else{
		Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 80009dc:	2300      	movs	r3, #0
 80009de:	75bb      	strb	r3, [r7, #22]
	}

	return Flash_Payload_Write_Status;
 80009e0:	7dbb      	ldrb	r3, [r7, #22]
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3718      	adds	r7, #24
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080009ec <Bootloader_Memory_Write>:

static void Bootloader_Memory_Write(uint8_t *Host_Buffer){
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b086      	sub	sp, #24
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
 80009f4:	2300      	movs	r3, #0
 80009f6:	82fb      	strh	r3, [r7, #22]
	uint32_t Host_CRC32 = 0;
 80009f8:	2300      	movs	r3, #0
 80009fa:	613b      	str	r3, [r7, #16]
	uint32_t HOST_Address = 0;
 80009fc:	2300      	movs	r3, #0
 80009fe:	60fb      	str	r3, [r7, #12]
	uint8_t Payload_Len = 0;
 8000a00:	2300      	movs	r3, #0
 8000a02:	72fb      	strb	r3, [r7, #11]
	uint8_t Address_Verification = ADDRESS_IS_INVALID;
 8000a04:	2300      	movs	r3, #0
 8000a06:	72bb      	strb	r3, [r7, #10]
	uint8_t Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	727b      	strb	r3, [r7, #9]

#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_Print_Message("Write data into different memories of the MCU \r\n");
 8000a0c:	4831      	ldr	r0, [pc, #196]	; (8000ad4 <Bootloader_Memory_Write+0xe8>)
 8000a0e:	f7ff fc91 	bl	8000334 <BL_Print_Message>
#endif
	/* Extract the CRC32 and packet length sent by the HOST */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	b29b      	uxth	r3, r3
 8000a18:	3301      	adds	r3, #1
 8000a1a:	82fb      	strh	r3, [r7, #22]
	Host_CRC32 = *((uint32_t *)((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 8000a1c:	8afb      	ldrh	r3, [r7, #22]
 8000a1e:	3b04      	subs	r3, #4
 8000a20:	687a      	ldr	r2, [r7, #4]
 8000a22:	4413      	add	r3, r2
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	613b      	str	r3, [r7, #16]
/* CRC Verification */
	if(CRC_VERIFICATION_PASSED == Bootloader_CRC_Verify((uint8_t *)&Host_Buffer[0] , Host_CMD_Packet_Len - 4, Host_CRC32)){
 8000a28:	8afb      	ldrh	r3, [r7, #22]
 8000a2a:	3b04      	subs	r3, #4
 8000a2c:	693a      	ldr	r2, [r7, #16]
 8000a2e:	4619      	mov	r1, r3
 8000a30:	6878      	ldr	r0, [r7, #4]
 8000a32:	f7ff fca5 	bl	8000380 <Bootloader_CRC_Verify>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d142      	bne.n	8000ac2 <Bootloader_Memory_Write+0xd6>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Passed \r\n");
 8000a3c:	4826      	ldr	r0, [pc, #152]	; (8000ad8 <Bootloader_Memory_Write+0xec>)
 8000a3e:	f7ff fc79 	bl	8000334 <BL_Print_Message>
#endif
		/* Send acknowledgement to the HOST */
		Bootloader_Send_ACK(1);
 8000a42:	2001      	movs	r0, #1
 8000a44:	f7ff fcda 	bl	80003fc <Bootloader_Send_ACK>
		/* Extract the start address from the Host packet */
		HOST_Address = *((uint32_t *)(&Host_Buffer[2]));
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000a4e:	60fb      	str	r3, [r7, #12]
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("HOST_Address = 0x%X \r\n", HOST_Address);
 8000a50:	68f9      	ldr	r1, [r7, #12]
 8000a52:	4822      	ldr	r0, [pc, #136]	; (8000adc <Bootloader_Memory_Write+0xf0>)
 8000a54:	f7ff fc6e 	bl	8000334 <BL_Print_Message>
#endif
		/* Extract the payload length from the Host packet */
		Payload_Len = Host_Buffer[6];
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	799b      	ldrb	r3, [r3, #6]
 8000a5c:	72fb      	strb	r3, [r7, #11]
		/* Verify the Extracted address to be valid address */
		Address_Verification = Host_Jump_Address_Verification(HOST_Address);
 8000a5e:	68f8      	ldr	r0, [r7, #12]
 8000a60:	f7ff fe1a 	bl	8000698 <Host_Jump_Address_Verification>
 8000a64:	4603      	mov	r3, r0
 8000a66:	72bb      	strb	r3, [r7, #10]
		if(ADDRESS_IS_VALID == Address_Verification){
 8000a68:	7abb      	ldrb	r3, [r7, #10]
 8000a6a:	2b01      	cmp	r3, #1
 8000a6c:	d120      	bne.n	8000ab0 <Bootloader_Memory_Write+0xc4>
			/* Write the payload to the Flash memory */
			Flash_Payload_Write_Status = Flash_Memory_Write_Payload((uint8_t *)&Host_Buffer[7], HOST_Address, Payload_Len);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	3307      	adds	r3, #7
 8000a72:	7afa      	ldrb	r2, [r7, #11]
 8000a74:	b292      	uxth	r2, r2
 8000a76:	68f9      	ldr	r1, [r7, #12]
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff ff61 	bl	8000940 <Flash_Memory_Write_Payload>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	727b      	strb	r3, [r7, #9]
			if(FLASH_PAYLOAD_WRITE_PASSED == Flash_Payload_Write_Status){
 8000a82:	7a7b      	ldrb	r3, [r7, #9]
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d109      	bne.n	8000a9c <Bootloader_Memory_Write+0xb0>
				/* Report payload write passed */
				Bootloader_Send_Data_To_Host((uint8_t *)&Flash_Payload_Write_Status, 1);
 8000a88:	f107 0309 	add.w	r3, r7, #9
 8000a8c:	2101      	movs	r1, #1
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f7ff fce0 	bl	8000454 <Bootloader_Send_Data_To_Host>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
				BL_Print_Message("Payload Valid \r\n");
 8000a94:	4812      	ldr	r0, [pc, #72]	; (8000ae0 <Bootloader_Memory_Write+0xf4>)
 8000a96:	f7ff fc4d 	bl	8000334 <BL_Print_Message>
		BL_Print_Message("CRC Verification Failed \r\n");
#endif
		/* Send Not acknowledge to the HOST */
		Bootloader_Send_NACK();
	}
}
 8000a9a:	e017      	b.n	8000acc <Bootloader_Memory_Write+0xe0>
				BL_Print_Message("Payload InValid \r\n");
 8000a9c:	4811      	ldr	r0, [pc, #68]	; (8000ae4 <Bootloader_Memory_Write+0xf8>)
 8000a9e:	f7ff fc49 	bl	8000334 <BL_Print_Message>
				Bootloader_Send_Data_To_Host((uint8_t *)&Flash_Payload_Write_Status, 1);
 8000aa2:	f107 0309 	add.w	r3, r7, #9
 8000aa6:	2101      	movs	r1, #1
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff fcd3 	bl	8000454 <Bootloader_Send_Data_To_Host>
}
 8000aae:	e00d      	b.n	8000acc <Bootloader_Memory_Write+0xe0>
			Address_Verification = ADDRESS_IS_INVALID;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	72bb      	strb	r3, [r7, #10]
			Bootloader_Send_Data_To_Host((uint8_t *)&Address_Verification, 1);
 8000ab4:	f107 030a 	add.w	r3, r7, #10
 8000ab8:	2101      	movs	r1, #1
 8000aba:	4618      	mov	r0, r3
 8000abc:	f7ff fcca 	bl	8000454 <Bootloader_Send_Data_To_Host>
}
 8000ac0:	e004      	b.n	8000acc <Bootloader_Memory_Write+0xe0>
		BL_Print_Message("CRC Verification Failed \r\n");
 8000ac2:	4809      	ldr	r0, [pc, #36]	; (8000ae8 <Bootloader_Memory_Write+0xfc>)
 8000ac4:	f7ff fc36 	bl	8000334 <BL_Print_Message>
		Bootloader_Send_NACK();
 8000ac8:	f7ff fcb2 	bl	8000430 <Bootloader_Send_NACK>
}
 8000acc:	bf00      	nop
 8000ace:	3718      	adds	r7, #24
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	08003d04 	.word	0x08003d04
 8000ad8:	08003b98 	.word	0x08003b98
 8000adc:	08003d38 	.word	0x08003d38
 8000ae0:	08003d50 	.word	0x08003d50
 8000ae4:	08003d64 	.word	0x08003d64
 8000ae8:	08003bb4 	.word	0x08003bb4

08000aec <Bootloader_Enable_RW_Protection>:
static void Bootloader_Enable_RW_Protection(uint8_t *Host_Buffer){
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]

}
 8000af4:	bf00      	nop
 8000af6:	370c      	adds	r7, #12
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bc80      	pop	{r7}
 8000afc:	4770      	bx	lr

08000afe <Bootloader_Memory_Read>:
static void Bootloader_Memory_Read(uint8_t *Host_Buffer){
 8000afe:	b480      	push	{r7}
 8000b00:	b083      	sub	sp, #12
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	6078      	str	r0, [r7, #4]

}
 8000b06:	bf00      	nop
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bc80      	pop	{r7}
 8000b0e:	4770      	bx	lr

08000b10 <Bootloader_Get_Page_Protection_Status>:
static void Bootloader_Get_Page_Protection_Status(uint8_t *Host_Buffer){
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]

}
 8000b18:	bf00      	nop
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bc80      	pop	{r7}
 8000b20:	4770      	bx	lr

08000b22 <Bootloader_Read_OTP>:
static void Bootloader_Read_OTP(uint8_t *Host_Buffer){
 8000b22:	b480      	push	{r7}
 8000b24:	b083      	sub	sp, #12
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	6078      	str	r0, [r7, #4]

}
 8000b2a:	bf00      	nop
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bc80      	pop	{r7}
 8000b32:	4770      	bx	lr

08000b34 <Change_ROP_Level>:


static uint8_t Change_ROP_Level(uint32_t ROP_Level){
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b08a      	sub	sp, #40	; 0x28
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef HAL_Status = HAL_ERROR;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	FLASH_OBProgramInitTypeDef FLASH_OBProgramInit;
	uint8_t ROP_Level_Status = ROP_LEVEL_CHANGE_INVALID;
 8000b42:	2300      	movs	r3, #0
 8000b44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	/* Unlock the FLASH Option Control Registers access */
	HAL_Status = HAL_FLASH_OB_Unlock();
 8000b48:	f000 fd54 	bl	80015f4 <HAL_FLASH_OB_Unlock>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if(HAL_Status != HAL_OK){
 8000b52:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d006      	beq.n	8000b68 <Change_ROP_Level+0x34>
		ROP_Level_Status = ROP_LEVEL_CHANGE_INVALID;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_Print_Message("Failed -> Unlock the FLASH Option Control Registers access \r\n");
 8000b60:	4822      	ldr	r0, [pc, #136]	; (8000bec <Change_ROP_Level+0xb8>)
 8000b62:	f7ff fbe7 	bl	8000334 <BL_Print_Message>
 8000b66:	e03a      	b.n	8000bde <Change_ROP_Level+0xaa>
#endif
	}
	else{
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("Passed -> Unlock the FLASH Option Control Registers access \r\n");
 8000b68:	4821      	ldr	r0, [pc, #132]	; (8000bf0 <Change_ROP_Level+0xbc>)
 8000b6a:	f7ff fbe3 	bl	8000334 <BL_Print_Message>
#endif
		FLASH_OBProgramInit.OptionType = OPTIONBYTE_RDP; /* RDP option byte configuration */
 8000b6e:	2302      	movs	r3, #2
 8000b70:	60bb      	str	r3, [r7, #8]
		FLASH_OBProgramInit.Banks = 3U; /* Both Banks */
 8000b72:	2303      	movs	r3, #3
 8000b74:	617b      	str	r3, [r7, #20]
		FLASH_OBProgramInit.RDPLevel = ROP_Level;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	763b      	strb	r3, [r7, #24]
		/* Program option bytes */
		HAL_Status = HAL_FLASHEx_OBProgram(&FLASH_OBProgramInit);
 8000b7c:	f107 0308 	add.w	r3, r7, #8
 8000b80:	4618      	mov	r0, r3
 8000b82:	f000 fec9 	bl	8001918 <HAL_FLASHEx_OBProgram>
 8000b86:	4603      	mov	r3, r0
 8000b88:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if(HAL_Status != HAL_OK){
 8000b8c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d00b      	beq.n	8000bac <Change_ROP_Level+0x78>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
			BL_Print_Message("Failed -> Program option bytes \r\n");
 8000b94:	4817      	ldr	r0, [pc, #92]	; (8000bf4 <Change_ROP_Level+0xc0>)
 8000b96:	f7ff fbcd 	bl	8000334 <BL_Print_Message>
#endif
			HAL_Status = HAL_FLASH_OB_Lock();
 8000b9a:	f000 fd47 	bl	800162c <HAL_FLASH_OB_Lock>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ROP_Level_Status = ROP_LEVEL_CHANGE_INVALID;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000baa:	e018      	b.n	8000bde <Change_ROP_Level+0xaa>
		}
		else{
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
			BL_Print_Message("Passed -> Program option bytes \r\n");
 8000bac:	4812      	ldr	r0, [pc, #72]	; (8000bf8 <Change_ROP_Level+0xc4>)
 8000bae:	f7ff fbc1 	bl	8000334 <BL_Print_Message>
#endif
			/* Launch the option byte loading */
			HAL_FLASH_OB_Launch();
 8000bb2:	f000 fd4b 	bl	800164c <HAL_FLASH_OB_Launch>
			/* Lock the FLASH Option Control Registers access */
			HAL_Status = HAL_FLASH_OB_Lock();
 8000bb6:	f000 fd39 	bl	800162c <HAL_FLASH_OB_Lock>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if(HAL_Status != HAL_OK){
 8000bc0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d003      	beq.n	8000bd0 <Change_ROP_Level+0x9c>
				ROP_Level_Status = ROP_LEVEL_CHANGE_INVALID;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000bce:	e006      	b.n	8000bde <Change_ROP_Level+0xaa>
			}
			else{
				ROP_Level_Status = ROP_LEVEL_CHANGE_VALID;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
				BL_Print_Message("Passed -> Program ROP to Level : 0x%X \r\n", ROP_Level);
 8000bd6:	6879      	ldr	r1, [r7, #4]
 8000bd8:	4808      	ldr	r0, [pc, #32]	; (8000bfc <Change_ROP_Level+0xc8>)
 8000bda:	f7ff fbab 	bl	8000334 <BL_Print_Message>
#endif
			}

		}
	}
	return ROP_Level_Status;
 8000bde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3728      	adds	r7, #40	; 0x28
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	08003d78 	.word	0x08003d78
 8000bf0:	08003db8 	.word	0x08003db8
 8000bf4:	08003df8 	.word	0x08003df8
 8000bf8:	08003e1c 	.word	0x08003e1c
 8000bfc:	08003e40 	.word	0x08003e40

08000c00 <Bootloader_Change_Read_Protection_Level>:

static void Bootloader_Change_Read_Protection_Level(uint8_t *Host_Buffer){
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b086      	sub	sp, #24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	82bb      	strh	r3, [r7, #20]
 	uint32_t Host_CRC32 = 0;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	613b      	str	r3, [r7, #16]
	uint8_t ROP_Level_Status = ROP_LEVEL_CHANGE_INVALID;
 8000c10:	2300      	movs	r3, #0
 8000c12:	73fb      	strb	r3, [r7, #15]
	uint8_t Host_ROP_Level = 0;
 8000c14:	2300      	movs	r3, #0
 8000c16:	75fb      	strb	r3, [r7, #23]

#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_Print_Message("Change read protection level of the user flash \r\n");
 8000c18:	4823      	ldr	r0, [pc, #140]	; (8000ca8 <Bootloader_Change_Read_Protection_Level+0xa8>)
 8000c1a:	f7ff fb8b 	bl	8000334 <BL_Print_Message>
#endif
	/* Extract the CRC32 and packet length sent by the HOST */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	b29b      	uxth	r3, r3
 8000c24:	3301      	adds	r3, #1
 8000c26:	82bb      	strh	r3, [r7, #20]
	Host_CRC32 = *((uint32_t *)((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 8000c28:	8abb      	ldrh	r3, [r7, #20]
 8000c2a:	3b04      	subs	r3, #4
 8000c2c:	687a      	ldr	r2, [r7, #4]
 8000c2e:	4413      	add	r3, r2
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	613b      	str	r3, [r7, #16]
/* CRC Verification */
	if(CRC_VERIFICATION_PASSED == Bootloader_CRC_Verify((uint8_t *)&Host_Buffer[0] , Host_CMD_Packet_Len - 4, Host_CRC32)){
 8000c34:	8abb      	ldrh	r3, [r7, #20]
 8000c36:	3b04      	subs	r3, #4
 8000c38:	693a      	ldr	r2, [r7, #16]
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	f7ff fb9f 	bl	8000380 <Bootloader_CRC_Verify>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d126      	bne.n	8000c96 <Bootloader_Change_Read_Protection_Level+0x96>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Passed \r\n");
 8000c48:	4818      	ldr	r0, [pc, #96]	; (8000cac <Bootloader_Change_Read_Protection_Level+0xac>)
 8000c4a:	f7ff fb73 	bl	8000334 <BL_Print_Message>
#endif
		Bootloader_Send_ACK(1);
 8000c4e:	2001      	movs	r0, #1
 8000c50:	f7ff fbd4 	bl	80003fc <Bootloader_Send_ACK>
		/* Request change the Read Out Protection Level */
		Host_ROP_Level = Host_Buffer[2];
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	789b      	ldrb	r3, [r3, #2]
 8000c58:	75fb      	strb	r3, [r7, #23]
		/* Warning: When enabling read protection level 2, it s no more possible to go back to level 1 or 0 */
		if((CBL_ROP_LEVEL_2 == Host_ROP_Level)){
 8000c5a:	7dfb      	ldrb	r3, [r7, #23]
 8000c5c:	2b02      	cmp	r3, #2
 8000c5e:	d102      	bne.n	8000c66 <Bootloader_Change_Read_Protection_Level+0x66>
			ROP_Level_Status = ROP_LEVEL_CHANGE_INVALID;
 8000c60:	2300      	movs	r3, #0
 8000c62:	73fb      	strb	r3, [r7, #15]
 8000c64:	e010      	b.n	8000c88 <Bootloader_Change_Read_Protection_Level+0x88>
		}
		else{
			if(CBL_ROP_LEVEL_0 == Host_ROP_Level){
 8000c66:	7dfb      	ldrb	r3, [r7, #23]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d102      	bne.n	8000c72 <Bootloader_Change_Read_Protection_Level+0x72>
				Host_ROP_Level = 0xAA;
 8000c6c:	23aa      	movs	r3, #170	; 0xaa
 8000c6e:	75fb      	strb	r3, [r7, #23]
 8000c70:	e004      	b.n	8000c7c <Bootloader_Change_Read_Protection_Level+0x7c>
			}
			else if(CBL_ROP_LEVEL_1 == Host_ROP_Level){
 8000c72:	7dfb      	ldrb	r3, [r7, #23]
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d101      	bne.n	8000c7c <Bootloader_Change_Read_Protection_Level+0x7c>
				Host_ROP_Level = 0x55;
 8000c78:	2355      	movs	r3, #85	; 0x55
 8000c7a:	75fb      	strb	r3, [r7, #23]
			}
			ROP_Level_Status = Change_ROP_Level(Host_ROP_Level);
 8000c7c:	7dfb      	ldrb	r3, [r7, #23]
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff ff58 	bl	8000b34 <Change_ROP_Level>
 8000c84:	4603      	mov	r3, r0
 8000c86:	73fb      	strb	r3, [r7, #15]
		}
		Bootloader_Send_Data_To_Host((uint8_t *)&ROP_Level_Status, 1);
 8000c88:	f107 030f 	add.w	r3, r7, #15
 8000c8c:	2101      	movs	r1, #1
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff fbe0 	bl	8000454 <Bootloader_Send_Data_To_Host>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Failed \r\n");
#endif
		Bootloader_Send_NACK();
}
}
 8000c94:	e004      	b.n	8000ca0 <Bootloader_Change_Read_Protection_Level+0xa0>
		BL_Print_Message("CRC Verification Failed \r\n");
 8000c96:	4806      	ldr	r0, [pc, #24]	; (8000cb0 <Bootloader_Change_Read_Protection_Level+0xb0>)
 8000c98:	f7ff fb4c 	bl	8000334 <BL_Print_Message>
		Bootloader_Send_NACK();
 8000c9c:	f7ff fbc8 	bl	8000430 <Bootloader_Send_NACK>
}
 8000ca0:	bf00      	nop
 8000ca2:	3718      	adds	r7, #24
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	08003e6c 	.word	0x08003e6c
 8000cac:	08003b98 	.word	0x08003b98
 8000cb0:	08003bb4 	.word	0x08003bb4

08000cb4 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000cb8:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <MX_CRC_Init+0x20>)
 8000cba:	4a07      	ldr	r2, [pc, #28]	; (8000cd8 <MX_CRC_Init+0x24>)
 8000cbc:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000cbe:	4805      	ldr	r0, [pc, #20]	; (8000cd4 <MX_CRC_Init+0x20>)
 8000cc0:	f000 fbab 	bl	800141a <HAL_CRC_Init>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000cca:	f000 f8bc 	bl	8000e46 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	2000014c 	.word	0x2000014c
 8000cd8:	40023000 	.word	0x40023000

08000cdc <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b085      	sub	sp, #20
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a09      	ldr	r2, [pc, #36]	; (8000d10 <HAL_CRC_MspInit+0x34>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d10b      	bne.n	8000d06 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000cee:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <HAL_CRC_MspInit+0x38>)
 8000cf0:	695b      	ldr	r3, [r3, #20]
 8000cf2:	4a08      	ldr	r2, [pc, #32]	; (8000d14 <HAL_CRC_MspInit+0x38>)
 8000cf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cf8:	6153      	str	r3, [r2, #20]
 8000cfa:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <HAL_CRC_MspInit+0x38>)
 8000cfc:	695b      	ldr	r3, [r3, #20]
 8000cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000d06:	bf00      	nop
 8000d08:	3714      	adds	r7, #20
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bc80      	pop	{r7}
 8000d0e:	4770      	bx	lr
 8000d10:	40023000 	.word	0x40023000
 8000d14:	40021000 	.word	0x40021000

08000d18 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d1e:	4b14      	ldr	r3, [pc, #80]	; (8000d70 <MX_GPIO_Init+0x58>)
 8000d20:	699b      	ldr	r3, [r3, #24]
 8000d22:	4a13      	ldr	r2, [pc, #76]	; (8000d70 <MX_GPIO_Init+0x58>)
 8000d24:	f043 0320 	orr.w	r3, r3, #32
 8000d28:	6193      	str	r3, [r2, #24]
 8000d2a:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <MX_GPIO_Init+0x58>)
 8000d2c:	699b      	ldr	r3, [r3, #24]
 8000d2e:	f003 0320 	and.w	r3, r3, #32
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d36:	4b0e      	ldr	r3, [pc, #56]	; (8000d70 <MX_GPIO_Init+0x58>)
 8000d38:	699b      	ldr	r3, [r3, #24]
 8000d3a:	4a0d      	ldr	r2, [pc, #52]	; (8000d70 <MX_GPIO_Init+0x58>)
 8000d3c:	f043 0304 	orr.w	r3, r3, #4
 8000d40:	6193      	str	r3, [r2, #24]
 8000d42:	4b0b      	ldr	r3, [pc, #44]	; (8000d70 <MX_GPIO_Init+0x58>)
 8000d44:	699b      	ldr	r3, [r3, #24]
 8000d46:	f003 0304 	and.w	r3, r3, #4
 8000d4a:	60bb      	str	r3, [r7, #8]
 8000d4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d4e:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <MX_GPIO_Init+0x58>)
 8000d50:	699b      	ldr	r3, [r3, #24]
 8000d52:	4a07      	ldr	r2, [pc, #28]	; (8000d70 <MX_GPIO_Init+0x58>)
 8000d54:	f043 0308 	orr.w	r3, r3, #8
 8000d58:	6193      	str	r3, [r2, #24]
 8000d5a:	4b05      	ldr	r3, [pc, #20]	; (8000d70 <MX_GPIO_Init+0x58>)
 8000d5c:	699b      	ldr	r3, [r3, #24]
 8000d5e:	f003 0308 	and.w	r3, r3, #8
 8000d62:	607b      	str	r3, [r7, #4]
 8000d64:	687b      	ldr	r3, [r7, #4]

}
 8000d66:	bf00      	nop
 8000d68:	3714      	adds	r7, #20
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bc80      	pop	{r7}
 8000d6e:	4770      	bx	lr
 8000d70:	40021000 	.word	0x40021000

08000d74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d74:	b5b0      	push	{r4, r5, r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char Message_1[]="Iam Ahmed Naeim \r \n";
 8000d7a:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <main+0x40>)
 8000d7c:	463c      	mov	r4, r7
 8000d7e:	461d      	mov	r5, r3
 8000d80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d84:	682b      	ldr	r3, [r5, #0]
 8000d86:	6023      	str	r3, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d88:	f000 f9e8 	bl	800115c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d8c:	f000 f816 	bl	8000dbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d90:	f7ff ffc2 	bl	8000d18 <MX_GPIO_Init>
  MX_CRC_Init();
 8000d94:	f7ff ff8e 	bl	8000cb4 <MX_CRC_Init>
  MX_USART2_UART_Init();
 8000d98:	f000 f8e0 	bl	8000f5c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000d9c:	f000 f908 	bl	8000fb0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  BL_Status Status =BL_NACK;
 8000da0:	2300      	movs	r3, #0
 8000da2:	75fb      	strb	r3, [r7, #23]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  Status = BL_UART_Featch_Host_Command();
 8000da4:	f7ff f9d2 	bl	800014c <BL_UART_Featch_Host_Command>
 8000da8:	4603      	mov	r3, r0
 8000daa:	75fb      	strb	r3, [r7, #23]
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	  BL_Print_Message("Bootloader Started!! \r\n");
 8000dac:	4802      	ldr	r0, [pc, #8]	; (8000db8 <main+0x44>)
 8000dae:	f7ff fac1 	bl	8000334 <BL_Print_Message>
	  Status = BL_UART_Featch_Host_Command();
 8000db2:	e7f7      	b.n	8000da4 <main+0x30>
 8000db4:	08003eb8 	.word	0x08003eb8
 8000db8:	08003ea0 	.word	0x08003ea0

08000dbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b090      	sub	sp, #64	; 0x40
 8000dc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dc2:	f107 0318 	add.w	r3, r7, #24
 8000dc6:	2228      	movs	r2, #40	; 0x28
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f002 f8c2 	bl	8002f54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dd0:	1d3b      	adds	r3, r7, #4
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
 8000dd6:	605a      	str	r2, [r3, #4]
 8000dd8:	609a      	str	r2, [r3, #8]
 8000dda:	60da      	str	r2, [r3, #12]
 8000ddc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dde:	2301      	movs	r3, #1
 8000de0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000de2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000de6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000de8:	2300      	movs	r3, #0
 8000dea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dec:	2301      	movs	r3, #1
 8000dee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000df0:	2302      	movs	r3, #2
 8000df2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000df4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000df8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000dfa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e00:	f107 0318 	add.w	r3, r7, #24
 8000e04:	4618      	mov	r0, r3
 8000e06:	f001 fa13 	bl	8002230 <HAL_RCC_OscConfig>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000e10:	f000 f819 	bl	8000e46 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e14:	230f      	movs	r3, #15
 8000e16:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e24:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e26:	2300      	movs	r3, #0
 8000e28:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e2a:	1d3b      	adds	r3, r7, #4
 8000e2c:	2102      	movs	r1, #2
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f001 fc80 	bl	8002734 <HAL_RCC_ClockConfig>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000e3a:	f000 f804 	bl	8000e46 <Error_Handler>
  }
}
 8000e3e:	bf00      	nop
 8000e40:	3740      	adds	r7, #64	; 0x40
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e4a:	b672      	cpsid	i
}
 8000e4c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e4e:	e7fe      	b.n	8000e4e <Error_Handler+0x8>

08000e50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e56:	4b0e      	ldr	r3, [pc, #56]	; (8000e90 <HAL_MspInit+0x40>)
 8000e58:	699b      	ldr	r3, [r3, #24]
 8000e5a:	4a0d      	ldr	r2, [pc, #52]	; (8000e90 <HAL_MspInit+0x40>)
 8000e5c:	f043 0301 	orr.w	r3, r3, #1
 8000e60:	6193      	str	r3, [r2, #24]
 8000e62:	4b0b      	ldr	r3, [pc, #44]	; (8000e90 <HAL_MspInit+0x40>)
 8000e64:	699b      	ldr	r3, [r3, #24]
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	607b      	str	r3, [r7, #4]
 8000e6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e6e:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <HAL_MspInit+0x40>)
 8000e70:	69db      	ldr	r3, [r3, #28]
 8000e72:	4a07      	ldr	r2, [pc, #28]	; (8000e90 <HAL_MspInit+0x40>)
 8000e74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e78:	61d3      	str	r3, [r2, #28]
 8000e7a:	4b05      	ldr	r3, [pc, #20]	; (8000e90 <HAL_MspInit+0x40>)
 8000e7c:	69db      	ldr	r3, [r3, #28]
 8000e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e82:	603b      	str	r3, [r7, #0]
 8000e84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e86:	bf00      	nop
 8000e88:	370c      	adds	r7, #12
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bc80      	pop	{r7}
 8000e8e:	4770      	bx	lr
 8000e90:	40021000 	.word	0x40021000

08000e94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e98:	e7fe      	b.n	8000e98 <NMI_Handler+0x4>

08000e9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e9e:	e7fe      	b.n	8000e9e <HardFault_Handler+0x4>

08000ea0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea4:	e7fe      	b.n	8000ea4 <MemManage_Handler+0x4>

08000ea6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eaa:	e7fe      	b.n	8000eaa <BusFault_Handler+0x4>

08000eac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eb0:	e7fe      	b.n	8000eb0 <UsageFault_Handler+0x4>

08000eb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bc80      	pop	{r7}
 8000ebc:	4770      	bx	lr

08000ebe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bc80      	pop	{r7}
 8000ec8:	4770      	bx	lr

08000eca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bc80      	pop	{r7}
 8000ed4:	4770      	bx	lr

08000ed6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eda:	f000 f985 	bl	80011e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
	...

08000ee4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000eec:	4a14      	ldr	r2, [pc, #80]	; (8000f40 <_sbrk+0x5c>)
 8000eee:	4b15      	ldr	r3, [pc, #84]	; (8000f44 <_sbrk+0x60>)
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ef8:	4b13      	ldr	r3, [pc, #76]	; (8000f48 <_sbrk+0x64>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d102      	bne.n	8000f06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f00:	4b11      	ldr	r3, [pc, #68]	; (8000f48 <_sbrk+0x64>)
 8000f02:	4a12      	ldr	r2, [pc, #72]	; (8000f4c <_sbrk+0x68>)
 8000f04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f06:	4b10      	ldr	r3, [pc, #64]	; (8000f48 <_sbrk+0x64>)
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d207      	bcs.n	8000f24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f14:	f002 f826 	bl	8002f64 <__errno>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	220c      	movs	r2, #12
 8000f1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f22:	e009      	b.n	8000f38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f24:	4b08      	ldr	r3, [pc, #32]	; (8000f48 <_sbrk+0x64>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f2a:	4b07      	ldr	r3, [pc, #28]	; (8000f48 <_sbrk+0x64>)
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4413      	add	r3, r2
 8000f32:	4a05      	ldr	r2, [pc, #20]	; (8000f48 <_sbrk+0x64>)
 8000f34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f36:	68fb      	ldr	r3, [r7, #12]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3718      	adds	r7, #24
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20005000 	.word	0x20005000
 8000f44:	00000400 	.word	0x00000400
 8000f48:	20000154 	.word	0x20000154
 8000f4c:	20000358 	.word	0x20000358

08000f50 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bc80      	pop	{r7}
 8000f5a:	4770      	bx	lr

08000f5c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f60:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <MX_USART2_UART_Init+0x4c>)
 8000f62:	4a12      	ldr	r2, [pc, #72]	; (8000fac <MX_USART2_UART_Init+0x50>)
 8000f64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f66:	4b10      	ldr	r3, [pc, #64]	; (8000fa8 <MX_USART2_UART_Init+0x4c>)
 8000f68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f6e:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <MX_USART2_UART_Init+0x4c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f74:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <MX_USART2_UART_Init+0x4c>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f7a:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <MX_USART2_UART_Init+0x4c>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f80:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <MX_USART2_UART_Init+0x4c>)
 8000f82:	220c      	movs	r2, #12
 8000f84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f86:	4b08      	ldr	r3, [pc, #32]	; (8000fa8 <MX_USART2_UART_Init+0x4c>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f8c:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <MX_USART2_UART_Init+0x4c>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f92:	4805      	ldr	r0, [pc, #20]	; (8000fa8 <MX_USART2_UART_Init+0x4c>)
 8000f94:	f001 fd5c 	bl	8002a50 <HAL_UART_Init>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f9e:	f7ff ff52 	bl	8000e46 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000158 	.word	0x20000158
 8000fac:	40004400 	.word	0x40004400

08000fb0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000fb4:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <MX_USART3_UART_Init+0x4c>)
 8000fb6:	4a12      	ldr	r2, [pc, #72]	; (8001000 <MX_USART3_UART_Init+0x50>)
 8000fb8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000fba:	4b10      	ldr	r3, [pc, #64]	; (8000ffc <MX_USART3_UART_Init+0x4c>)
 8000fbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fc0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000fc2:	4b0e      	ldr	r3, [pc, #56]	; (8000ffc <MX_USART3_UART_Init+0x4c>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000fc8:	4b0c      	ldr	r3, [pc, #48]	; (8000ffc <MX_USART3_UART_Init+0x4c>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000fce:	4b0b      	ldr	r3, [pc, #44]	; (8000ffc <MX_USART3_UART_Init+0x4c>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000fd4:	4b09      	ldr	r3, [pc, #36]	; (8000ffc <MX_USART3_UART_Init+0x4c>)
 8000fd6:	220c      	movs	r2, #12
 8000fd8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fda:	4b08      	ldr	r3, [pc, #32]	; (8000ffc <MX_USART3_UART_Init+0x4c>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <MX_USART3_UART_Init+0x4c>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000fe6:	4805      	ldr	r0, [pc, #20]	; (8000ffc <MX_USART3_UART_Init+0x4c>)
 8000fe8:	f001 fd32 	bl	8002a50 <HAL_UART_Init>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000ff2:	f7ff ff28 	bl	8000e46 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	200001a0 	.word	0x200001a0
 8001000:	40004800 	.word	0x40004800

08001004 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b08a      	sub	sp, #40	; 0x28
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100c:	f107 0318 	add.w	r3, r7, #24
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a37      	ldr	r2, [pc, #220]	; (80010fc <HAL_UART_MspInit+0xf8>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d130      	bne.n	8001086 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001024:	4b36      	ldr	r3, [pc, #216]	; (8001100 <HAL_UART_MspInit+0xfc>)
 8001026:	69db      	ldr	r3, [r3, #28]
 8001028:	4a35      	ldr	r2, [pc, #212]	; (8001100 <HAL_UART_MspInit+0xfc>)
 800102a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800102e:	61d3      	str	r3, [r2, #28]
 8001030:	4b33      	ldr	r3, [pc, #204]	; (8001100 <HAL_UART_MspInit+0xfc>)
 8001032:	69db      	ldr	r3, [r3, #28]
 8001034:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001038:	617b      	str	r3, [r7, #20]
 800103a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103c:	4b30      	ldr	r3, [pc, #192]	; (8001100 <HAL_UART_MspInit+0xfc>)
 800103e:	699b      	ldr	r3, [r3, #24]
 8001040:	4a2f      	ldr	r2, [pc, #188]	; (8001100 <HAL_UART_MspInit+0xfc>)
 8001042:	f043 0304 	orr.w	r3, r3, #4
 8001046:	6193      	str	r3, [r2, #24]
 8001048:	4b2d      	ldr	r3, [pc, #180]	; (8001100 <HAL_UART_MspInit+0xfc>)
 800104a:	699b      	ldr	r3, [r3, #24]
 800104c:	f003 0304 	and.w	r3, r3, #4
 8001050:	613b      	str	r3, [r7, #16]
 8001052:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001054:	2304      	movs	r3, #4
 8001056:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001058:	2302      	movs	r3, #2
 800105a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800105c:	2303      	movs	r3, #3
 800105e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001060:	f107 0318 	add.w	r3, r7, #24
 8001064:	4619      	mov	r1, r3
 8001066:	4827      	ldr	r0, [pc, #156]	; (8001104 <HAL_UART_MspInit+0x100>)
 8001068:	f000 ff5e 	bl	8001f28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800106c:	2308      	movs	r3, #8
 800106e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001070:	2300      	movs	r3, #0
 8001072:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	2300      	movs	r3, #0
 8001076:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001078:	f107 0318 	add.w	r3, r7, #24
 800107c:	4619      	mov	r1, r3
 800107e:	4821      	ldr	r0, [pc, #132]	; (8001104 <HAL_UART_MspInit+0x100>)
 8001080:	f000 ff52 	bl	8001f28 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001084:	e036      	b.n	80010f4 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART3)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a1f      	ldr	r2, [pc, #124]	; (8001108 <HAL_UART_MspInit+0x104>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d131      	bne.n	80010f4 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001090:	4b1b      	ldr	r3, [pc, #108]	; (8001100 <HAL_UART_MspInit+0xfc>)
 8001092:	69db      	ldr	r3, [r3, #28]
 8001094:	4a1a      	ldr	r2, [pc, #104]	; (8001100 <HAL_UART_MspInit+0xfc>)
 8001096:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800109a:	61d3      	str	r3, [r2, #28]
 800109c:	4b18      	ldr	r3, [pc, #96]	; (8001100 <HAL_UART_MspInit+0xfc>)
 800109e:	69db      	ldr	r3, [r3, #28]
 80010a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a8:	4b15      	ldr	r3, [pc, #84]	; (8001100 <HAL_UART_MspInit+0xfc>)
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	4a14      	ldr	r2, [pc, #80]	; (8001100 <HAL_UART_MspInit+0xfc>)
 80010ae:	f043 0308 	orr.w	r3, r3, #8
 80010b2:	6193      	str	r3, [r2, #24]
 80010b4:	4b12      	ldr	r3, [pc, #72]	; (8001100 <HAL_UART_MspInit+0xfc>)
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	f003 0308 	and.w	r3, r3, #8
 80010bc:	60bb      	str	r3, [r7, #8]
 80010be:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80010c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c6:	2302      	movs	r3, #2
 80010c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010ca:	2303      	movs	r3, #3
 80010cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ce:	f107 0318 	add.w	r3, r7, #24
 80010d2:	4619      	mov	r1, r3
 80010d4:	480d      	ldr	r0, [pc, #52]	; (800110c <HAL_UART_MspInit+0x108>)
 80010d6:	f000 ff27 	bl	8001f28 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80010da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80010de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010e0:	2300      	movs	r3, #0
 80010e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	2300      	movs	r3, #0
 80010e6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e8:	f107 0318 	add.w	r3, r7, #24
 80010ec:	4619      	mov	r1, r3
 80010ee:	4807      	ldr	r0, [pc, #28]	; (800110c <HAL_UART_MspInit+0x108>)
 80010f0:	f000 ff1a 	bl	8001f28 <HAL_GPIO_Init>
}
 80010f4:	bf00      	nop
 80010f6:	3728      	adds	r7, #40	; 0x28
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40004400 	.word	0x40004400
 8001100:	40021000 	.word	0x40021000
 8001104:	40010800 	.word	0x40010800
 8001108:	40004800 	.word	0x40004800
 800110c:	40010c00 	.word	0x40010c00

08001110 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001110:	f7ff ff1e 	bl	8000f50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001114:	480b      	ldr	r0, [pc, #44]	; (8001144 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001116:	490c      	ldr	r1, [pc, #48]	; (8001148 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001118:	4a0c      	ldr	r2, [pc, #48]	; (800114c <LoopFillZerobss+0x16>)
  movs r3, #0
 800111a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800111c:	e002      	b.n	8001124 <LoopCopyDataInit>

0800111e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800111e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001120:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001122:	3304      	adds	r3, #4

08001124 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001124:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001126:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001128:	d3f9      	bcc.n	800111e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800112a:	4a09      	ldr	r2, [pc, #36]	; (8001150 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800112c:	4c09      	ldr	r4, [pc, #36]	; (8001154 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800112e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001130:	e001      	b.n	8001136 <LoopFillZerobss>

08001132 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001132:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001134:	3204      	adds	r2, #4

08001136 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001136:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001138:	d3fb      	bcc.n	8001132 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800113a:	f001 ff19 	bl	8002f70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800113e:	f7ff fe19 	bl	8000d74 <main>
  bx lr
 8001142:	4770      	bx	lr
  ldr r0, =_sdata
 8001144:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001148:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800114c:	08003f34 	.word	0x08003f34
  ldr r2, =_sbss
 8001150:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001154:	20000358 	.word	0x20000358

08001158 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001158:	e7fe      	b.n	8001158 <ADC1_2_IRQHandler>
	...

0800115c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001160:	4b08      	ldr	r3, [pc, #32]	; (8001184 <HAL_Init+0x28>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a07      	ldr	r2, [pc, #28]	; (8001184 <HAL_Init+0x28>)
 8001166:	f043 0310 	orr.w	r3, r3, #16
 800116a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800116c:	2003      	movs	r0, #3
 800116e:	f000 f91d 	bl	80013ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001172:	200f      	movs	r0, #15
 8001174:	f000 f808 	bl	8001188 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001178:	f7ff fe6a 	bl	8000e50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40022000 	.word	0x40022000

08001188 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001190:	4b12      	ldr	r3, [pc, #72]	; (80011dc <HAL_InitTick+0x54>)
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <HAL_InitTick+0x58>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	4619      	mov	r1, r3
 800119a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800119e:	fbb3 f3f1 	udiv	r3, r3, r1
 80011a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011a6:	4618      	mov	r0, r3
 80011a8:	f000 f92b 	bl	8001402 <HAL_SYSTICK_Config>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e00e      	b.n	80011d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2b0f      	cmp	r3, #15
 80011ba:	d80a      	bhi.n	80011d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011bc:	2200      	movs	r2, #0
 80011be:	6879      	ldr	r1, [r7, #4]
 80011c0:	f04f 30ff 	mov.w	r0, #4294967295
 80011c4:	f000 f8fd 	bl	80013c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011c8:	4a06      	ldr	r2, [pc, #24]	; (80011e4 <HAL_InitTick+0x5c>)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ce:	2300      	movs	r3, #0
 80011d0:	e000      	b.n	80011d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	2000000c 	.word	0x2000000c
 80011e0:	20000014 	.word	0x20000014
 80011e4:	20000010 	.word	0x20000010

080011e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011ec:	4b05      	ldr	r3, [pc, #20]	; (8001204 <HAL_IncTick+0x1c>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	461a      	mov	r2, r3
 80011f2:	4b05      	ldr	r3, [pc, #20]	; (8001208 <HAL_IncTick+0x20>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4413      	add	r3, r2
 80011f8:	4a03      	ldr	r2, [pc, #12]	; (8001208 <HAL_IncTick+0x20>)
 80011fa:	6013      	str	r3, [r2, #0]
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	bc80      	pop	{r7}
 8001202:	4770      	bx	lr
 8001204:	20000014 	.word	0x20000014
 8001208:	200001e8 	.word	0x200001e8

0800120c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  return uwTick;
 8001210:	4b02      	ldr	r3, [pc, #8]	; (800121c <HAL_GetTick+0x10>)
 8001212:	681b      	ldr	r3, [r3, #0]
}
 8001214:	4618      	mov	r0, r3
 8001216:	46bd      	mov	sp, r7
 8001218:	bc80      	pop	{r7}
 800121a:	4770      	bx	lr
 800121c:	200001e8 	.word	0x200001e8

08001220 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001230:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <__NVIC_SetPriorityGrouping+0x44>)
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001236:	68ba      	ldr	r2, [r7, #8]
 8001238:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800123c:	4013      	ands	r3, r2
 800123e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001248:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800124c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001250:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001252:	4a04      	ldr	r2, [pc, #16]	; (8001264 <__NVIC_SetPriorityGrouping+0x44>)
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	60d3      	str	r3, [r2, #12]
}
 8001258:	bf00      	nop
 800125a:	3714      	adds	r7, #20
 800125c:	46bd      	mov	sp, r7
 800125e:	bc80      	pop	{r7}
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	e000ed00 	.word	0xe000ed00

08001268 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800126c:	4b04      	ldr	r3, [pc, #16]	; (8001280 <__NVIC_GetPriorityGrouping+0x18>)
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	0a1b      	lsrs	r3, r3, #8
 8001272:	f003 0307 	and.w	r3, r3, #7
}
 8001276:	4618      	mov	r0, r3
 8001278:	46bd      	mov	sp, r7
 800127a:	bc80      	pop	{r7}
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	6039      	str	r1, [r7, #0]
 800128e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001294:	2b00      	cmp	r3, #0
 8001296:	db0a      	blt.n	80012ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	b2da      	uxtb	r2, r3
 800129c:	490c      	ldr	r1, [pc, #48]	; (80012d0 <__NVIC_SetPriority+0x4c>)
 800129e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a2:	0112      	lsls	r2, r2, #4
 80012a4:	b2d2      	uxtb	r2, r2
 80012a6:	440b      	add	r3, r1
 80012a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012ac:	e00a      	b.n	80012c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	b2da      	uxtb	r2, r3
 80012b2:	4908      	ldr	r1, [pc, #32]	; (80012d4 <__NVIC_SetPriority+0x50>)
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	f003 030f 	and.w	r3, r3, #15
 80012ba:	3b04      	subs	r3, #4
 80012bc:	0112      	lsls	r2, r2, #4
 80012be:	b2d2      	uxtb	r2, r2
 80012c0:	440b      	add	r3, r1
 80012c2:	761a      	strb	r2, [r3, #24]
}
 80012c4:	bf00      	nop
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bc80      	pop	{r7}
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	e000e100 	.word	0xe000e100
 80012d4:	e000ed00 	.word	0xe000ed00

080012d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d8:	b480      	push	{r7}
 80012da:	b089      	sub	sp, #36	; 0x24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	f1c3 0307 	rsb	r3, r3, #7
 80012f2:	2b04      	cmp	r3, #4
 80012f4:	bf28      	it	cs
 80012f6:	2304      	movcs	r3, #4
 80012f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	3304      	adds	r3, #4
 80012fe:	2b06      	cmp	r3, #6
 8001300:	d902      	bls.n	8001308 <NVIC_EncodePriority+0x30>
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	3b03      	subs	r3, #3
 8001306:	e000      	b.n	800130a <NVIC_EncodePriority+0x32>
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800130c:	f04f 32ff 	mov.w	r2, #4294967295
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	43da      	mvns	r2, r3
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	401a      	ands	r2, r3
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001320:	f04f 31ff 	mov.w	r1, #4294967295
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	fa01 f303 	lsl.w	r3, r1, r3
 800132a:	43d9      	mvns	r1, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001330:	4313      	orrs	r3, r2
         );
}
 8001332:	4618      	mov	r0, r3
 8001334:	3724      	adds	r7, #36	; 0x24
 8001336:	46bd      	mov	sp, r7
 8001338:	bc80      	pop	{r7}
 800133a:	4770      	bx	lr

0800133c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001340:	f3bf 8f4f 	dsb	sy
}
 8001344:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001346:	4b06      	ldr	r3, [pc, #24]	; (8001360 <__NVIC_SystemReset+0x24>)
 8001348:	68db      	ldr	r3, [r3, #12]
 800134a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800134e:	4904      	ldr	r1, [pc, #16]	; (8001360 <__NVIC_SystemReset+0x24>)
 8001350:	4b04      	ldr	r3, [pc, #16]	; (8001364 <__NVIC_SystemReset+0x28>)
 8001352:	4313      	orrs	r3, r2
 8001354:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001356:	f3bf 8f4f 	dsb	sy
}
 800135a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800135c:	bf00      	nop
 800135e:	e7fd      	b.n	800135c <__NVIC_SystemReset+0x20>
 8001360:	e000ed00 	.word	0xe000ed00
 8001364:	05fa0004 	.word	0x05fa0004

08001368 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	3b01      	subs	r3, #1
 8001374:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001378:	d301      	bcc.n	800137e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800137a:	2301      	movs	r3, #1
 800137c:	e00f      	b.n	800139e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800137e:	4a0a      	ldr	r2, [pc, #40]	; (80013a8 <SysTick_Config+0x40>)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3b01      	subs	r3, #1
 8001384:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001386:	210f      	movs	r1, #15
 8001388:	f04f 30ff 	mov.w	r0, #4294967295
 800138c:	f7ff ff7a 	bl	8001284 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001390:	4b05      	ldr	r3, [pc, #20]	; (80013a8 <SysTick_Config+0x40>)
 8001392:	2200      	movs	r2, #0
 8001394:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001396:	4b04      	ldr	r3, [pc, #16]	; (80013a8 <SysTick_Config+0x40>)
 8001398:	2207      	movs	r2, #7
 800139a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	e000e010 	.word	0xe000e010

080013ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f7ff ff33 	bl	8001220 <__NVIC_SetPriorityGrouping>
}
 80013ba:	bf00      	nop
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b086      	sub	sp, #24
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	4603      	mov	r3, r0
 80013ca:	60b9      	str	r1, [r7, #8]
 80013cc:	607a      	str	r2, [r7, #4]
 80013ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013d0:	2300      	movs	r3, #0
 80013d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013d4:	f7ff ff48 	bl	8001268 <__NVIC_GetPriorityGrouping>
 80013d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	68b9      	ldr	r1, [r7, #8]
 80013de:	6978      	ldr	r0, [r7, #20]
 80013e0:	f7ff ff7a 	bl	80012d8 <NVIC_EncodePriority>
 80013e4:	4602      	mov	r2, r0
 80013e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ea:	4611      	mov	r1, r2
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff ff49 	bl	8001284 <__NVIC_SetPriority>
}
 80013f2:	bf00      	nop
 80013f4:	3718      	adds	r7, #24
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80013fe:	f7ff ff9d 	bl	800133c <__NVIC_SystemReset>

08001402 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b082      	sub	sp, #8
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f7ff ffac 	bl	8001368 <SysTick_Config>
 8001410:	4603      	mov	r3, r0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b082      	sub	sp, #8
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d101      	bne.n	800142c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e00e      	b.n	800144a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	795b      	ldrb	r3, [r3, #5]
 8001430:	b2db      	uxtb	r3, r3
 8001432:	2b00      	cmp	r3, #0
 8001434:	d105      	bne.n	8001442 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2200      	movs	r2, #0
 800143a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f7ff fc4d 	bl	8000cdc <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2201      	movs	r2, #1
 8001446:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001448:	2300      	movs	r3, #0
}
 800144a:	4618      	mov	r0, r3
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001452:	b480      	push	{r7}
 8001454:	b087      	sub	sp, #28
 8001456:	af00      	add	r7, sp, #0
 8001458:	60f8      	str	r0, [r7, #12]
 800145a:	60b9      	str	r1, [r7, #8]
 800145c:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800145e:	2300      	movs	r3, #0
 8001460:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	2202      	movs	r2, #2
 8001466:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8001468:	2300      	movs	r3, #0
 800146a:	617b      	str	r3, [r7, #20]
 800146c:	e00a      	b.n	8001484 <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	68ba      	ldr	r2, [r7, #8]
 8001474:	441a      	add	r2, r3
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	6812      	ldr	r2, [r2, #0]
 800147c:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	3301      	adds	r3, #1
 8001482:	617b      	str	r3, [r7, #20]
 8001484:	697a      	ldr	r2, [r7, #20]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	429a      	cmp	r2, r3
 800148a:	d3f0      	bcc.n	800146e <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	2201      	movs	r2, #1
 8001498:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 800149a:	693b      	ldr	r3, [r7, #16]
}
 800149c:	4618      	mov	r0, r3
 800149e:	371c      	adds	r7, #28
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bc80      	pop	{r7}
 80014a4:	4770      	bx	lr
	...

080014a8 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80014a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014aa:	b087      	sub	sp, #28
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 80014ba:	2300      	movs	r3, #0
 80014bc:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80014be:	2300      	movs	r3, #0
 80014c0:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80014c2:	4b2f      	ldr	r3, [pc, #188]	; (8001580 <HAL_FLASH_Program+0xd8>)
 80014c4:	7e1b      	ldrb	r3, [r3, #24]
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d101      	bne.n	80014ce <HAL_FLASH_Program+0x26>
 80014ca:	2302      	movs	r3, #2
 80014cc:	e054      	b.n	8001578 <HAL_FLASH_Program+0xd0>
 80014ce:	4b2c      	ldr	r3, [pc, #176]	; (8001580 <HAL_FLASH_Program+0xd8>)
 80014d0:	2201      	movs	r2, #1
 80014d2:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80014d4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80014d8:	f000 f8da 	bl	8001690 <FLASH_WaitForLastOperation>
 80014dc:	4603      	mov	r3, r0
 80014de:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80014e0:	7dfb      	ldrb	r3, [r7, #23]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d144      	bne.n	8001570 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d102      	bne.n	80014f2 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80014ec:	2301      	movs	r3, #1
 80014ee:	757b      	strb	r3, [r7, #21]
 80014f0:	e007      	b.n	8001502 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d102      	bne.n	80014fe <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80014f8:	2302      	movs	r3, #2
 80014fa:	757b      	strb	r3, [r7, #21]
 80014fc:	e001      	b.n	8001502 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80014fe:	2304      	movs	r3, #4
 8001500:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8001502:	2300      	movs	r3, #0
 8001504:	75bb      	strb	r3, [r7, #22]
 8001506:	e02d      	b.n	8001564 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001508:	7dbb      	ldrb	r3, [r7, #22]
 800150a:	005a      	lsls	r2, r3, #1
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	eb02 0c03 	add.w	ip, r2, r3
 8001512:	7dbb      	ldrb	r3, [r7, #22]
 8001514:	0119      	lsls	r1, r3, #4
 8001516:	e9d7 2300 	ldrd	r2, r3, [r7]
 800151a:	f1c1 0620 	rsb	r6, r1, #32
 800151e:	f1a1 0020 	sub.w	r0, r1, #32
 8001522:	fa22 f401 	lsr.w	r4, r2, r1
 8001526:	fa03 f606 	lsl.w	r6, r3, r6
 800152a:	4334      	orrs	r4, r6
 800152c:	fa23 f000 	lsr.w	r0, r3, r0
 8001530:	4304      	orrs	r4, r0
 8001532:	fa23 f501 	lsr.w	r5, r3, r1
 8001536:	b2a3      	uxth	r3, r4
 8001538:	4619      	mov	r1, r3
 800153a:	4660      	mov	r0, ip
 800153c:	f000 f88c 	bl	8001658 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001540:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001544:	f000 f8a4 	bl	8001690 <FLASH_WaitForLastOperation>
 8001548:	4603      	mov	r3, r0
 800154a:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800154c:	4b0d      	ldr	r3, [pc, #52]	; (8001584 <HAL_FLASH_Program+0xdc>)
 800154e:	691b      	ldr	r3, [r3, #16]
 8001550:	4a0c      	ldr	r2, [pc, #48]	; (8001584 <HAL_FLASH_Program+0xdc>)
 8001552:	f023 0301 	bic.w	r3, r3, #1
 8001556:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8001558:	7dfb      	ldrb	r3, [r7, #23]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d107      	bne.n	800156e <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800155e:	7dbb      	ldrb	r3, [r7, #22]
 8001560:	3301      	adds	r3, #1
 8001562:	75bb      	strb	r3, [r7, #22]
 8001564:	7dba      	ldrb	r2, [r7, #22]
 8001566:	7d7b      	ldrb	r3, [r7, #21]
 8001568:	429a      	cmp	r2, r3
 800156a:	d3cd      	bcc.n	8001508 <HAL_FLASH_Program+0x60>
 800156c:	e000      	b.n	8001570 <HAL_FLASH_Program+0xc8>
      {
        break;
 800156e:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001570:	4b03      	ldr	r3, [pc, #12]	; (8001580 <HAL_FLASH_Program+0xd8>)
 8001572:	2200      	movs	r2, #0
 8001574:	761a      	strb	r2, [r3, #24]

  return status;
 8001576:	7dfb      	ldrb	r3, [r7, #23]
}
 8001578:	4618      	mov	r0, r3
 800157a:	371c      	adds	r7, #28
 800157c:	46bd      	mov	sp, r7
 800157e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001580:	200001f0 	.word	0x200001f0
 8001584:	40022000 	.word	0x40022000

08001588 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800158e:	2300      	movs	r3, #0
 8001590:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001592:	4b0d      	ldr	r3, [pc, #52]	; (80015c8 <HAL_FLASH_Unlock+0x40>)
 8001594:	691b      	ldr	r3, [r3, #16]
 8001596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800159a:	2b00      	cmp	r3, #0
 800159c:	d00d      	beq.n	80015ba <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800159e:	4b0a      	ldr	r3, [pc, #40]	; (80015c8 <HAL_FLASH_Unlock+0x40>)
 80015a0:	4a0a      	ldr	r2, [pc, #40]	; (80015cc <HAL_FLASH_Unlock+0x44>)
 80015a2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80015a4:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <HAL_FLASH_Unlock+0x40>)
 80015a6:	4a0a      	ldr	r2, [pc, #40]	; (80015d0 <HAL_FLASH_Unlock+0x48>)
 80015a8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80015aa:	4b07      	ldr	r3, [pc, #28]	; (80015c8 <HAL_FLASH_Unlock+0x40>)
 80015ac:	691b      	ldr	r3, [r3, #16]
 80015ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80015ba:	79fb      	ldrb	r3, [r7, #7]
}
 80015bc:	4618      	mov	r0, r3
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bc80      	pop	{r7}
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	40022000 	.word	0x40022000
 80015cc:	45670123 	.word	0x45670123
 80015d0:	cdef89ab 	.word	0xcdef89ab

080015d4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80015d8:	4b05      	ldr	r3, [pc, #20]	; (80015f0 <HAL_FLASH_Lock+0x1c>)
 80015da:	691b      	ldr	r3, [r3, #16]
 80015dc:	4a04      	ldr	r2, [pc, #16]	; (80015f0 <HAL_FLASH_Lock+0x1c>)
 80015de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015e2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bc80      	pop	{r7}
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	40022000 	.word	0x40022000

080015f4 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_OPTWRE))
 80015f8:	4b09      	ldr	r3, [pc, #36]	; (8001620 <HAL_FLASH_OB_Unlock+0x2c>)
 80015fa:	691b      	ldr	r3, [r3, #16]
 80015fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001600:	2b00      	cmp	r3, #0
 8001602:	d107      	bne.n	8001614 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8001604:	4b06      	ldr	r3, [pc, #24]	; (8001620 <HAL_FLASH_OB_Unlock+0x2c>)
 8001606:	4a07      	ldr	r2, [pc, #28]	; (8001624 <HAL_FLASH_OB_Unlock+0x30>)
 8001608:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 800160a:	4b05      	ldr	r3, [pc, #20]	; (8001620 <HAL_FLASH_OB_Unlock+0x2c>)
 800160c:	4a06      	ldr	r2, [pc, #24]	; (8001628 <HAL_FLASH_OB_Unlock+0x34>)
 800160e:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 8001610:	2300      	movs	r3, #0
 8001612:	e000      	b.n	8001616 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
}
 8001616:	4618      	mov	r0, r3
 8001618:	46bd      	mov	sp, r7
 800161a:	bc80      	pop	{r7}
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	40022000 	.word	0x40022000
 8001624:	45670123 	.word	0x45670123
 8001628:	cdef89ab 	.word	0xcdef89ab

0800162c <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* Clear the OPTWRE Bit to lock the FLASH Option Byte Registers access */
  CLEAR_BIT(FLASH->CR, FLASH_CR_OPTWRE);
 8001630:	4b05      	ldr	r3, [pc, #20]	; (8001648 <HAL_FLASH_OB_Lock+0x1c>)
 8001632:	691b      	ldr	r3, [r3, #16]
 8001634:	4a04      	ldr	r2, [pc, #16]	; (8001648 <HAL_FLASH_OB_Lock+0x1c>)
 8001636:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800163a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	46bd      	mov	sp, r7
 8001642:	bc80      	pop	{r7}
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	40022000 	.word	0x40022000

0800164c <HAL_FLASH_OB_Launch>:
  * @brief  Launch the option byte loading.
  * @note   This function will reset automatically the MCU.
  * @retval None
  */
void HAL_FLASH_OB_Launch(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* Initiates a system reset request to launch the option byte loading */
  HAL_NVIC_SystemReset();
 8001650:	f7ff fed3 	bl	80013fa <HAL_NVIC_SystemReset>
}
 8001654:	bf00      	nop
 8001656:	bd80      	pop	{r7, pc}

08001658 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	460b      	mov	r3, r1
 8001662:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001664:	4b08      	ldr	r3, [pc, #32]	; (8001688 <FLASH_Program_HalfWord+0x30>)
 8001666:	2200      	movs	r2, #0
 8001668:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800166a:	4b08      	ldr	r3, [pc, #32]	; (800168c <FLASH_Program_HalfWord+0x34>)
 800166c:	691b      	ldr	r3, [r3, #16]
 800166e:	4a07      	ldr	r2, [pc, #28]	; (800168c <FLASH_Program_HalfWord+0x34>)
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	887a      	ldrh	r2, [r7, #2]
 800167a:	801a      	strh	r2, [r3, #0]
}
 800167c:	bf00      	nop
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	bc80      	pop	{r7}
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	200001f0 	.word	0x200001f0
 800168c:	40022000 	.word	0x40022000

08001690 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8001698:	f7ff fdb8 	bl	800120c <HAL_GetTick>
 800169c:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800169e:	e010      	b.n	80016c2 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016a6:	d00c      	beq.n	80016c2 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d007      	beq.n	80016be <FLASH_WaitForLastOperation+0x2e>
 80016ae:	f7ff fdad 	bl	800120c <HAL_GetTick>
 80016b2:	4602      	mov	r2, r0
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d201      	bcs.n	80016c2 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e025      	b.n	800170e <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80016c2:	4b15      	ldr	r3, [pc, #84]	; (8001718 <FLASH_WaitForLastOperation+0x88>)
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d1e8      	bne.n	80016a0 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80016ce:	4b12      	ldr	r3, [pc, #72]	; (8001718 <FLASH_WaitForLastOperation+0x88>)
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	f003 0320 	and.w	r3, r3, #32
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d002      	beq.n	80016e0 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80016da:	4b0f      	ldr	r3, [pc, #60]	; (8001718 <FLASH_WaitForLastOperation+0x88>)
 80016dc:	2220      	movs	r2, #32
 80016de:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80016e0:	4b0d      	ldr	r3, [pc, #52]	; (8001718 <FLASH_WaitForLastOperation+0x88>)
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	f003 0310 	and.w	r3, r3, #16
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d10b      	bne.n	8001704 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80016ec:	4b0a      	ldr	r3, [pc, #40]	; (8001718 <FLASH_WaitForLastOperation+0x88>)
 80016ee:	69db      	ldr	r3, [r3, #28]
 80016f0:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d105      	bne.n	8001704 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80016f8:	4b07      	ldr	r3, [pc, #28]	; (8001718 <FLASH_WaitForLastOperation+0x88>)
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001700:	2b00      	cmp	r3, #0
 8001702:	d003      	beq.n	800170c <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001704:	f000 f80a 	bl	800171c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e000      	b.n	800170e <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40022000 	.word	0x40022000

0800171c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8001722:	2300      	movs	r3, #0
 8001724:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001726:	4b23      	ldr	r3, [pc, #140]	; (80017b4 <FLASH_SetErrorCode+0x98>)
 8001728:	68db      	ldr	r3, [r3, #12]
 800172a:	f003 0310 	and.w	r3, r3, #16
 800172e:	2b00      	cmp	r3, #0
 8001730:	d009      	beq.n	8001746 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001732:	4b21      	ldr	r3, [pc, #132]	; (80017b8 <FLASH_SetErrorCode+0x9c>)
 8001734:	69db      	ldr	r3, [r3, #28]
 8001736:	f043 0302 	orr.w	r3, r3, #2
 800173a:	4a1f      	ldr	r2, [pc, #124]	; (80017b8 <FLASH_SetErrorCode+0x9c>)
 800173c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f043 0310 	orr.w	r3, r3, #16
 8001744:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001746:	4b1b      	ldr	r3, [pc, #108]	; (80017b4 <FLASH_SetErrorCode+0x98>)
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	f003 0304 	and.w	r3, r3, #4
 800174e:	2b00      	cmp	r3, #0
 8001750:	d009      	beq.n	8001766 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001752:	4b19      	ldr	r3, [pc, #100]	; (80017b8 <FLASH_SetErrorCode+0x9c>)
 8001754:	69db      	ldr	r3, [r3, #28]
 8001756:	f043 0301 	orr.w	r3, r3, #1
 800175a:	4a17      	ldr	r2, [pc, #92]	; (80017b8 <FLASH_SetErrorCode+0x9c>)
 800175c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f043 0304 	orr.w	r3, r3, #4
 8001764:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8001766:	4b13      	ldr	r3, [pc, #76]	; (80017b4 <FLASH_SetErrorCode+0x98>)
 8001768:	69db      	ldr	r3, [r3, #28]
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	2b00      	cmp	r3, #0
 8001770:	d00b      	beq.n	800178a <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001772:	4b11      	ldr	r3, [pc, #68]	; (80017b8 <FLASH_SetErrorCode+0x9c>)
 8001774:	69db      	ldr	r3, [r3, #28]
 8001776:	f043 0304 	orr.w	r3, r3, #4
 800177a:	4a0f      	ldr	r2, [pc, #60]	; (80017b8 <FLASH_SetErrorCode+0x9c>)
 800177c:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800177e:	4b0d      	ldr	r3, [pc, #52]	; (80017b4 <FLASH_SetErrorCode+0x98>)
 8001780:	69db      	ldr	r3, [r3, #28]
 8001782:	4a0c      	ldr	r2, [pc, #48]	; (80017b4 <FLASH_SetErrorCode+0x98>)
 8001784:	f023 0301 	bic.w	r3, r3, #1
 8001788:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f240 1201 	movw	r2, #257	; 0x101
 8001790:	4293      	cmp	r3, r2
 8001792:	d106      	bne.n	80017a2 <FLASH_SetErrorCode+0x86>
 8001794:	4b07      	ldr	r3, [pc, #28]	; (80017b4 <FLASH_SetErrorCode+0x98>)
 8001796:	69db      	ldr	r3, [r3, #28]
 8001798:	4a06      	ldr	r2, [pc, #24]	; (80017b4 <FLASH_SetErrorCode+0x98>)
 800179a:	f023 0301 	bic.w	r3, r3, #1
 800179e:	61d3      	str	r3, [r2, #28]
}  
 80017a0:	e002      	b.n	80017a8 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80017a2:	4a04      	ldr	r2, [pc, #16]	; (80017b4 <FLASH_SetErrorCode+0x98>)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	60d3      	str	r3, [r2, #12]
}  
 80017a8:	bf00      	nop
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bc80      	pop	{r7}
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	40022000 	.word	0x40022000
 80017b8:	200001f0 	.word	0x200001f0

080017bc <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80017ca:	2300      	movs	r3, #0
 80017cc:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80017ce:	4b2f      	ldr	r3, [pc, #188]	; (800188c <HAL_FLASHEx_Erase+0xd0>)
 80017d0:	7e1b      	ldrb	r3, [r3, #24]
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d101      	bne.n	80017da <HAL_FLASHEx_Erase+0x1e>
 80017d6:	2302      	movs	r3, #2
 80017d8:	e053      	b.n	8001882 <HAL_FLASHEx_Erase+0xc6>
 80017da:	4b2c      	ldr	r3, [pc, #176]	; (800188c <HAL_FLASHEx_Erase+0xd0>)
 80017dc:	2201      	movs	r2, #1
 80017de:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d116      	bne.n	8001816 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80017e8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80017ec:	f7ff ff50 	bl	8001690 <FLASH_WaitForLastOperation>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d141      	bne.n	800187a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80017f6:	2001      	movs	r0, #1
 80017f8:	f000 f926 	bl	8001a48 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80017fc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001800:	f7ff ff46 	bl	8001690 <FLASH_WaitForLastOperation>
 8001804:	4603      	mov	r3, r0
 8001806:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001808:	4b21      	ldr	r3, [pc, #132]	; (8001890 <HAL_FLASHEx_Erase+0xd4>)
 800180a:	691b      	ldr	r3, [r3, #16]
 800180c:	4a20      	ldr	r2, [pc, #128]	; (8001890 <HAL_FLASHEx_Erase+0xd4>)
 800180e:	f023 0304 	bic.w	r3, r3, #4
 8001812:	6113      	str	r3, [r2, #16]
 8001814:	e031      	b.n	800187a <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001816:	f24c 3050 	movw	r0, #50000	; 0xc350
 800181a:	f7ff ff39 	bl	8001690 <FLASH_WaitForLastOperation>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d12a      	bne.n	800187a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	f04f 32ff 	mov.w	r2, #4294967295
 800182a:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	60bb      	str	r3, [r7, #8]
 8001832:	e019      	b.n	8001868 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8001834:	68b8      	ldr	r0, [r7, #8]
 8001836:	f000 fb57 	bl	8001ee8 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800183a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800183e:	f7ff ff27 	bl	8001690 <FLASH_WaitForLastOperation>
 8001842:	4603      	mov	r3, r0
 8001844:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001846:	4b12      	ldr	r3, [pc, #72]	; (8001890 <HAL_FLASHEx_Erase+0xd4>)
 8001848:	691b      	ldr	r3, [r3, #16]
 800184a:	4a11      	ldr	r2, [pc, #68]	; (8001890 <HAL_FLASHEx_Erase+0xd4>)
 800184c:	f023 0302 	bic.w	r3, r3, #2
 8001850:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8001852:	7bfb      	ldrb	r3, [r7, #15]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d003      	beq.n	8001860 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	68ba      	ldr	r2, [r7, #8]
 800185c:	601a      	str	r2, [r3, #0]
            break;
 800185e:	e00c      	b.n	800187a <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001866:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	029a      	lsls	r2, r3, #10
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	4413      	add	r3, r2
 8001874:	68ba      	ldr	r2, [r7, #8]
 8001876:	429a      	cmp	r2, r3
 8001878:	d3dc      	bcc.n	8001834 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800187a:	4b04      	ldr	r3, [pc, #16]	; (800188c <HAL_FLASHEx_Erase+0xd0>)
 800187c:	2200      	movs	r2, #0
 800187e:	761a      	strb	r2, [r3, #24]

  return status;
 8001880:	7bfb      	ldrb	r3, [r7, #15]
}
 8001882:	4618      	mov	r0, r3
 8001884:	3710      	adds	r7, #16
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	200001f0 	.word	0x200001f0
 8001890:	40022000 	.word	0x40022000

08001894 <HAL_FLASHEx_OBErase>:
  *         (system reset will occur)
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_FLASHEx_OBErase(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
  uint8_t rdptmp = OB_RDP_LEVEL_0;
 800189a:	23a5      	movs	r3, #165	; 0xa5
 800189c:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	71fb      	strb	r3, [r7, #7]

  /* Get the actual read protection Option Byte value */
  rdptmp = FLASH_OB_GetRDP();
 80018a2:	f000 faf5 	bl	8001e90 <FLASH_OB_GetRDP>
 80018a6:	4603      	mov	r3, r0
 80018a8:	71bb      	strb	r3, [r7, #6]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80018aa:	f24c 3050 	movw	r0, #50000	; 0xc350
 80018ae:	f7ff feef 	bl	8001690 <FLASH_WaitForLastOperation>
 80018b2:	4603      	mov	r3, r0
 80018b4:	71fb      	strb	r3, [r7, #7]

  if(status == HAL_OK)
 80018b6:	79fb      	ldrb	r3, [r7, #7]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d123      	bne.n	8001904 <HAL_FLASHEx_OBErase+0x70>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80018bc:	4b14      	ldr	r3, [pc, #80]	; (8001910 <HAL_FLASHEx_OBErase+0x7c>)
 80018be:	2200      	movs	r2, #0
 80018c0:	61da      	str	r2, [r3, #28]

    /* If the previous operation is completed, proceed to erase the option bytes */
    SET_BIT(FLASH->CR, FLASH_CR_OPTER);
 80018c2:	4b14      	ldr	r3, [pc, #80]	; (8001914 <HAL_FLASHEx_OBErase+0x80>)
 80018c4:	691b      	ldr	r3, [r3, #16]
 80018c6:	4a13      	ldr	r2, [pc, #76]	; (8001914 <HAL_FLASHEx_OBErase+0x80>)
 80018c8:	f043 0320 	orr.w	r3, r3, #32
 80018cc:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80018ce:	4b11      	ldr	r3, [pc, #68]	; (8001914 <HAL_FLASHEx_OBErase+0x80>)
 80018d0:	691b      	ldr	r3, [r3, #16]
 80018d2:	4a10      	ldr	r2, [pc, #64]	; (8001914 <HAL_FLASHEx_OBErase+0x80>)
 80018d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018d8:	6113      	str	r3, [r2, #16]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80018da:	f24c 3050 	movw	r0, #50000	; 0xc350
 80018de:	f7ff fed7 	bl	8001690 <FLASH_WaitForLastOperation>
 80018e2:	4603      	mov	r3, r0
 80018e4:	71fb      	strb	r3, [r7, #7]

    /* If the erase operation is completed, disable the OPTER Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTER);
 80018e6:	4b0b      	ldr	r3, [pc, #44]	; (8001914 <HAL_FLASHEx_OBErase+0x80>)
 80018e8:	691b      	ldr	r3, [r3, #16]
 80018ea:	4a0a      	ldr	r2, [pc, #40]	; (8001914 <HAL_FLASHEx_OBErase+0x80>)
 80018ec:	f023 0320 	bic.w	r3, r3, #32
 80018f0:	6113      	str	r3, [r2, #16]

    if(status == HAL_OK)
 80018f2:	79fb      	ldrb	r3, [r7, #7]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d105      	bne.n	8001904 <HAL_FLASHEx_OBErase+0x70>
    {
      /* Restore the last read protection Option Byte value */
      status = FLASH_OB_RDP_LevelConfig(rdptmp);
 80018f8:	79bb      	ldrb	r3, [r7, #6]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f000 fa02 	bl	8001d04 <FLASH_OB_RDP_LevelConfig>
 8001900:	4603      	mov	r3, r0
 8001902:	71fb      	strb	r3, [r7, #7]
    }
  }

  /* Return the erase status */
  return status;
 8001904:	79fb      	ldrb	r3, [r7, #7]
}
 8001906:	4618      	mov	r0, r3
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	200001f0 	.word	0x200001f0
 8001914:	40022000 	.word	0x40022000

08001918 <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001924:	4b39      	ldr	r3, [pc, #228]	; (8001a0c <HAL_FLASHEx_OBProgram+0xf4>)
 8001926:	7e1b      	ldrb	r3, [r3, #24]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d101      	bne.n	8001930 <HAL_FLASHEx_OBProgram+0x18>
 800192c:	2302      	movs	r3, #2
 800192e:	e069      	b.n	8001a04 <HAL_FLASHEx_OBProgram+0xec>
 8001930:	4b36      	ldr	r3, [pc, #216]	; (8001a0c <HAL_FLASHEx_OBProgram+0xf4>)
 8001932:	2201      	movs	r2, #1
 8001934:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /* Write protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	2b00      	cmp	r3, #0
 8001940:	d01a      	beq.n	8001978 <HAL_FLASHEx_OBProgram+0x60>
  {
    assert_param(IS_WRPSTATE(pOBInit->WRPState));
    if (pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	2b01      	cmp	r3, #1
 8001948:	d107      	bne.n	800195a <HAL_FLASHEx_OBProgram+0x42>
    {
      /* Enable of Write protection on the selected page */
      status = FLASH_OB_EnableWRP(pOBInit->WRPPage);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	4618      	mov	r0, r3
 8001950:	f000 f896 	bl	8001a80 <FLASH_OB_EnableWRP>
 8001954:	4603      	mov	r3, r0
 8001956:	73fb      	strb	r3, [r7, #15]
 8001958:	e006      	b.n	8001968 <HAL_FLASHEx_OBProgram+0x50>
    }
    else
    {
      /* Disable of Write protection on the selected page */
      status = FLASH_OB_DisableWRP(pOBInit->WRPPage);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	4618      	mov	r0, r3
 8001960:	f000 f930 	bl	8001bc4 <FLASH_OB_DisableWRP>
 8001964:	4603      	mov	r3, r0
 8001966:	73fb      	strb	r3, [r7, #15]
    }
    if (status != HAL_OK)
 8001968:	7bfb      	ldrb	r3, [r7, #15]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d004      	beq.n	8001978 <HAL_FLASHEx_OBProgram+0x60>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 800196e:	4b27      	ldr	r3, [pc, #156]	; (8001a0c <HAL_FLASHEx_OBProgram+0xf4>)
 8001970:	2200      	movs	r2, #0
 8001972:	761a      	strb	r2, [r3, #24]
      return status;
 8001974:	7bfb      	ldrb	r3, [r7, #15]
 8001976:	e045      	b.n	8001a04 <HAL_FLASHEx_OBProgram+0xec>
    }
  }

  /* Read protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0302 	and.w	r3, r3, #2
 8001980:	2b00      	cmp	r3, #0
 8001982:	d00e      	beq.n	80019a2 <HAL_FLASHEx_OBProgram+0x8a>
  {
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	7c1b      	ldrb	r3, [r3, #16]
 8001988:	4618      	mov	r0, r3
 800198a:	f000 f9bb 	bl	8001d04 <FLASH_OB_RDP_LevelConfig>
 800198e:	4603      	mov	r3, r0
 8001990:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
 8001992:	7bfb      	ldrb	r3, [r7, #15]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d004      	beq.n	80019a2 <HAL_FLASHEx_OBProgram+0x8a>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 8001998:	4b1c      	ldr	r3, [pc, #112]	; (8001a0c <HAL_FLASHEx_OBProgram+0xf4>)
 800199a:	2200      	movs	r2, #0
 800199c:	761a      	strb	r2, [r3, #24]
      return status;
 800199e:	7bfb      	ldrb	r3, [r7, #15]
 80019a0:	e030      	b.n	8001a04 <HAL_FLASHEx_OBProgram+0xec>
    }
  }

  /* USER configuration */
  if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0304 	and.w	r3, r3, #4
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d00e      	beq.n	80019cc <HAL_FLASHEx_OBProgram+0xb4>
  {
    status = FLASH_OB_UserConfig(pOBInit->USERConfig);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	7c5b      	ldrb	r3, [r3, #17]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f000 f9f6 	bl	8001da4 <FLASH_OB_UserConfig>
 80019b8:	4603      	mov	r3, r0
 80019ba:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
 80019bc:	7bfb      	ldrb	r3, [r7, #15]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d004      	beq.n	80019cc <HAL_FLASHEx_OBProgram+0xb4>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 80019c2:	4b12      	ldr	r3, [pc, #72]	; (8001a0c <HAL_FLASHEx_OBProgram+0xf4>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	761a      	strb	r2, [r3, #24]
      return status;
 80019c8:	7bfb      	ldrb	r3, [r7, #15]
 80019ca:	e01b      	b.n	8001a04 <HAL_FLASHEx_OBProgram+0xec>
    }
  }

  /* DATA configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_DATA) == OPTIONBYTE_DATA)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0308 	and.w	r3, r3, #8
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d011      	beq.n	80019fc <HAL_FLASHEx_OBProgram+0xe4>
  {
    status = FLASH_OB_ProgramData(pOBInit->DATAAddress, pOBInit->DATAData);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	695a      	ldr	r2, [r3, #20]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	7e1b      	ldrb	r3, [r3, #24]
 80019e0:	4619      	mov	r1, r3
 80019e2:	4610      	mov	r0, r2
 80019e4:	f000 fa16 	bl	8001e14 <FLASH_OB_ProgramData>
 80019e8:	4603      	mov	r3, r0
 80019ea:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
 80019ec:	7bfb      	ldrb	r3, [r7, #15]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d004      	beq.n	80019fc <HAL_FLASHEx_OBProgram+0xe4>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 80019f2:	4b06      	ldr	r3, [pc, #24]	; (8001a0c <HAL_FLASHEx_OBProgram+0xf4>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	761a      	strb	r2, [r3, #24]
      return status;
 80019f8:	7bfb      	ldrb	r3, [r7, #15]
 80019fa:	e003      	b.n	8001a04 <HAL_FLASHEx_OBProgram+0xec>
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80019fc:	4b03      	ldr	r3, [pc, #12]	; (8001a0c <HAL_FLASHEx_OBProgram+0xf4>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	761a      	strb	r2, [r3, #24]

  return status;
 8001a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3710      	adds	r7, #16
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	200001f0 	.word	0x200001f0

08001a10 <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2207      	movs	r2, #7
 8001a1c:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPPage = FLASH_OB_GetWRP();
 8001a1e:	f000 fa2d 	bl	8001e7c <FLASH_OB_GetWRP>
 8001a22:	4602      	mov	r2, r0
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 8001a28:	f000 fa32 	bl	8001e90 <FLASH_OB_GetRDP>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	b2da      	uxtb	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	741a      	strb	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = FLASH_OB_GetUser();
 8001a34:	f000 fa48 	bl	8001ec8 <FLASH_OB_GetUser>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	745a      	strb	r2, [r3, #17]
}
 8001a40:	bf00      	nop
 8001a42:	3708      	adds	r7, #8
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001a50:	4b09      	ldr	r3, [pc, #36]	; (8001a78 <FLASH_MassErase+0x30>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001a56:	4b09      	ldr	r3, [pc, #36]	; (8001a7c <FLASH_MassErase+0x34>)
 8001a58:	691b      	ldr	r3, [r3, #16]
 8001a5a:	4a08      	ldr	r2, [pc, #32]	; (8001a7c <FLASH_MassErase+0x34>)
 8001a5c:	f043 0304 	orr.w	r3, r3, #4
 8001a60:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001a62:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <FLASH_MassErase+0x34>)
 8001a64:	691b      	ldr	r3, [r3, #16]
 8001a66:	4a05      	ldr	r2, [pc, #20]	; (8001a7c <FLASH_MassErase+0x34>)
 8001a68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a6c:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bc80      	pop	{r7}
 8001a76:	4770      	bx	lr
 8001a78:	200001f0 	.word	0x200001f0
 8001a7c:	40022000 	.word	0x40022000

08001a80 <FLASH_OB_EnableWRP>:
  * @param  WriteProtectPage specifies the page(s) to be write protected.
  *         The value of this parameter depend on device used within the same series 
  * @retval HAL status 
  */
static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WriteProtectPage)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b086      	sub	sp, #24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	75fb      	strb	r3, [r7, #23]
  uint16_t WRP0_Data = 0xFFFF;
 8001a8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a90:	82bb      	strh	r3, [r7, #20]
#if defined(FLASH_WRP1_WRP1)
  uint16_t WRP1_Data = 0xFFFF;
 8001a92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a96:	827b      	strh	r3, [r7, #18]
#endif /* FLASH_WRP1_WRP1 */
#if defined(FLASH_WRP2_WRP2)
  uint16_t WRP2_Data = 0xFFFF;
 8001a98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a9c:	823b      	strh	r3, [r7, #16]
#endif /* FLASH_WRP2_WRP2 */
#if defined(FLASH_WRP3_WRP3)
  uint16_t WRP3_Data = 0xFFFF;
 8001a9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001aa2:	81fb      	strh	r3, [r7, #14]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP(WriteProtectPage));
    
  /* Get current write protected pages and the new pages to be protected ******/
  WriteProtectPage = (uint32_t)(~((~FLASH_OB_GetWRP()) | WriteProtectPage));
 8001aa4:	f000 f9ea 	bl	8001e7c <FLASH_OB_GetWRP>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	43db      	mvns	r3, r3
 8001aae:	4013      	ands	r3, r2
 8001ab0:	607b      	str	r3, [r7, #4]
  
#if defined(OB_WRP_PAGES0TO15MASK)
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO15MASK);
#elif defined(OB_WRP_PAGES0TO31MASK)
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO31MASK);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	82bb      	strh	r3, [r7, #20]
#endif /* OB_WRP_PAGES0TO31MASK */
  
#if defined(OB_WRP_PAGES16TO31MASK)
  WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES16TO31MASK) >> 8U);
#elif defined(OB_WRP_PAGES32TO63MASK)
  WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO63MASK) >> 8U);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	0a1b      	lsrs	r3, r3, #8
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	827b      	strh	r3, [r7, #18]
#endif /* OB_WRP_PAGES32TO63MASK */
 
#if defined(OB_WRP_PAGES64TO95MASK)
  WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES64TO95MASK) >> 16U);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	0c1b      	lsrs	r3, r3, #16
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	823b      	strh	r3, [r7, #16]
#if defined(OB_WRP_PAGES32TO47MASK)
  WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO47MASK) >> 16U);
#endif /* OB_WRP_PAGES32TO47MASK */

#if defined(OB_WRP_PAGES96TO127MASK)
  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES96TO127MASK) >> 24U); 
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	0e1b      	lsrs	r3, r3, #24
 8001ad2:	81fb      	strh	r3, [r7, #14]
#elif defined(OB_WRP_PAGES48TO127MASK)
  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO127MASK) >> 24U); 
#endif /* OB_WRP_PAGES96TO127MASK */
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001ad4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001ad8:	f7ff fdda 	bl	8001690 <FLASH_WaitForLastOperation>
 8001adc:	4603      	mov	r3, r0
 8001ade:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8001ae0:	7dfb      	ldrb	r3, [r7, #23]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d162      	bne.n	8001bac <FLASH_OB_EnableWRP+0x12c>
  { 
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001ae6:	4b34      	ldr	r3, [pc, #208]	; (8001bb8 <FLASH_OB_EnableWRP+0x138>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	61da      	str	r2, [r3, #28]

    /* To be able to write again option byte, need to perform a option byte erase */
    status = HAL_FLASHEx_OBErase();
 8001aec:	f7ff fed2 	bl	8001894 <HAL_FLASHEx_OBErase>
 8001af0:	4603      	mov	r3, r0
 8001af2:	75fb      	strb	r3, [r7, #23]
    if (status == HAL_OK)  
 8001af4:	7dfb      	ldrb	r3, [r7, #23]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d158      	bne.n	8001bac <FLASH_OB_EnableWRP+0x12c>
    {
      /* Enable write protection */
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8001afa:	4b30      	ldr	r3, [pc, #192]	; (8001bbc <FLASH_OB_EnableWRP+0x13c>)
 8001afc:	691b      	ldr	r3, [r3, #16]
 8001afe:	4a2f      	ldr	r2, [pc, #188]	; (8001bbc <FLASH_OB_EnableWRP+0x13c>)
 8001b00:	f043 0310 	orr.w	r3, r3, #16
 8001b04:	6113      	str	r3, [r2, #16]

#if defined(FLASH_WRP0_WRP0)
      if(WRP0_Data != 0xFFU)
 8001b06:	8abb      	ldrh	r3, [r7, #20]
 8001b08:	2bff      	cmp	r3, #255	; 0xff
 8001b0a:	d00d      	beq.n	8001b28 <FLASH_OB_EnableWRP+0xa8>
      {
        OB->WRP0 &= WRP0_Data;
 8001b0c:	4b2c      	ldr	r3, [pc, #176]	; (8001bc0 <FLASH_OB_EnableWRP+0x140>)
 8001b0e:	891b      	ldrh	r3, [r3, #8]
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	492b      	ldr	r1, [pc, #172]	; (8001bc0 <FLASH_OB_EnableWRP+0x140>)
 8001b14:	8abb      	ldrh	r3, [r7, #20]
 8001b16:	4013      	ands	r3, r2
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	810b      	strh	r3, [r1, #8]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001b1c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001b20:	f7ff fdb6 	bl	8001690 <FLASH_WaitForLastOperation>
 8001b24:	4603      	mov	r3, r0
 8001b26:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP0_WRP0 */

#if defined(FLASH_WRP1_WRP1)
      if((status == HAL_OK) && (WRP1_Data != 0xFFU))
 8001b28:	7dfb      	ldrb	r3, [r7, #23]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d110      	bne.n	8001b50 <FLASH_OB_EnableWRP+0xd0>
 8001b2e:	8a7b      	ldrh	r3, [r7, #18]
 8001b30:	2bff      	cmp	r3, #255	; 0xff
 8001b32:	d00d      	beq.n	8001b50 <FLASH_OB_EnableWRP+0xd0>
      {
        OB->WRP1 &= WRP1_Data;
 8001b34:	4b22      	ldr	r3, [pc, #136]	; (8001bc0 <FLASH_OB_EnableWRP+0x140>)
 8001b36:	895b      	ldrh	r3, [r3, #10]
 8001b38:	b29a      	uxth	r2, r3
 8001b3a:	4921      	ldr	r1, [pc, #132]	; (8001bc0 <FLASH_OB_EnableWRP+0x140>)
 8001b3c:	8a7b      	ldrh	r3, [r7, #18]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	814b      	strh	r3, [r1, #10]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001b44:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001b48:	f7ff fda2 	bl	8001690 <FLASH_WaitForLastOperation>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP1_WRP1 */

#if defined(FLASH_WRP2_WRP2)
      if((status == HAL_OK) && (WRP2_Data != 0xFFU))
 8001b50:	7dfb      	ldrb	r3, [r7, #23]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d110      	bne.n	8001b78 <FLASH_OB_EnableWRP+0xf8>
 8001b56:	8a3b      	ldrh	r3, [r7, #16]
 8001b58:	2bff      	cmp	r3, #255	; 0xff
 8001b5a:	d00d      	beq.n	8001b78 <FLASH_OB_EnableWRP+0xf8>
      {
        OB->WRP2 &= WRP2_Data;
 8001b5c:	4b18      	ldr	r3, [pc, #96]	; (8001bc0 <FLASH_OB_EnableWRP+0x140>)
 8001b5e:	899b      	ldrh	r3, [r3, #12]
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	4917      	ldr	r1, [pc, #92]	; (8001bc0 <FLASH_OB_EnableWRP+0x140>)
 8001b64:	8a3b      	ldrh	r3, [r7, #16]
 8001b66:	4013      	ands	r3, r2
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	818b      	strh	r3, [r1, #12]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001b6c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001b70:	f7ff fd8e 	bl	8001690 <FLASH_WaitForLastOperation>
 8001b74:	4603      	mov	r3, r0
 8001b76:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP2_WRP2 */

#if defined(FLASH_WRP3_WRP3)
      if((status == HAL_OK) && (WRP3_Data != 0xFFU))
 8001b78:	7dfb      	ldrb	r3, [r7, #23]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d110      	bne.n	8001ba0 <FLASH_OB_EnableWRP+0x120>
 8001b7e:	89fb      	ldrh	r3, [r7, #14]
 8001b80:	2bff      	cmp	r3, #255	; 0xff
 8001b82:	d00d      	beq.n	8001ba0 <FLASH_OB_EnableWRP+0x120>
      {
        OB->WRP3 &= WRP3_Data;
 8001b84:	4b0e      	ldr	r3, [pc, #56]	; (8001bc0 <FLASH_OB_EnableWRP+0x140>)
 8001b86:	89db      	ldrh	r3, [r3, #14]
 8001b88:	b29a      	uxth	r2, r3
 8001b8a:	490d      	ldr	r1, [pc, #52]	; (8001bc0 <FLASH_OB_EnableWRP+0x140>)
 8001b8c:	89fb      	ldrh	r3, [r7, #14]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	81cb      	strh	r3, [r1, #14]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001b94:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001b98:	f7ff fd7a 	bl	8001690 <FLASH_WaitForLastOperation>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP3_WRP3 */

      /* if the program operation is completed, disable the OPTPG Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8001ba0:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <FLASH_OB_EnableWRP+0x13c>)
 8001ba2:	691b      	ldr	r3, [r3, #16]
 8001ba4:	4a05      	ldr	r2, [pc, #20]	; (8001bbc <FLASH_OB_EnableWRP+0x13c>)
 8001ba6:	f023 0310 	bic.w	r3, r3, #16
 8001baa:	6113      	str	r3, [r2, #16]
    }
  }
  
  return status;
 8001bac:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3718      	adds	r7, #24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	200001f0 	.word	0x200001f0
 8001bbc:	40022000 	.word	0x40022000
 8001bc0:	1ffff800 	.word	0x1ffff800

08001bc4 <FLASH_OB_DisableWRP>:
  * @param  WriteProtectPage specifies the page(s) to be write unprotected.
  *         The value of this parameter depend on device used within the same series 
  * @retval HAL status 
  */
static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WriteProtectPage)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	75fb      	strb	r3, [r7, #23]
  uint16_t WRP0_Data = 0xFFFF;
 8001bd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bd4:	82bb      	strh	r3, [r7, #20]
#if defined(FLASH_WRP1_WRP1)
  uint16_t WRP1_Data = 0xFFFF;
 8001bd6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bda:	827b      	strh	r3, [r7, #18]
#endif /* FLASH_WRP1_WRP1 */
#if defined(FLASH_WRP2_WRP2)
  uint16_t WRP2_Data = 0xFFFF;
 8001bdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001be0:	823b      	strh	r3, [r7, #16]
#endif /* FLASH_WRP2_WRP2 */
#if defined(FLASH_WRP3_WRP3)
  uint16_t WRP3_Data = 0xFFFF;
 8001be2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001be6:	81fb      	strh	r3, [r7, #14]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP(WriteProtectPage));

  /* Get current write protected pages and the new pages to be unprotected ******/
  WriteProtectPage = (FLASH_OB_GetWRP() | WriteProtectPage);
 8001be8:	f000 f948 	bl	8001e7c <FLASH_OB_GetWRP>
 8001bec:	4602      	mov	r2, r0
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	607b      	str	r3, [r7, #4]

#if defined(OB_WRP_PAGES0TO15MASK)
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO15MASK);
#elif defined(OB_WRP_PAGES0TO31MASK)
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO31MASK);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	82bb      	strh	r3, [r7, #20]
#endif /* OB_WRP_PAGES0TO31MASK */
  
#if defined(OB_WRP_PAGES16TO31MASK)
  WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES16TO31MASK) >> 8U);
#elif defined(OB_WRP_PAGES32TO63MASK)
  WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO63MASK) >> 8U);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	0a1b      	lsrs	r3, r3, #8
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	827b      	strh	r3, [r7, #18]
#endif /* OB_WRP_PAGES32TO63MASK */
 
#if defined(OB_WRP_PAGES64TO95MASK)
  WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES64TO95MASK) >> 16U);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	0c1b      	lsrs	r3, r3, #16
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	823b      	strh	r3, [r7, #16]
#if defined(OB_WRP_PAGES32TO47MASK)
  WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO47MASK) >> 16U);
#endif /* OB_WRP_PAGES32TO47MASK */

#if defined(OB_WRP_PAGES96TO127MASK)
  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES96TO127MASK) >> 24U); 
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	0e1b      	lsrs	r3, r3, #24
 8001c14:	81fb      	strh	r3, [r7, #14]
  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO127MASK) >> 24U); 
#endif /* OB_WRP_PAGES96TO127MASK */

    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001c16:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001c1a:	f7ff fd39 	bl	8001690 <FLASH_WaitForLastOperation>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8001c22:	7dfb      	ldrb	r3, [r7, #23]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d162      	bne.n	8001cee <FLASH_OB_DisableWRP+0x12a>
  { 
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001c28:	4b33      	ldr	r3, [pc, #204]	; (8001cf8 <FLASH_OB_DisableWRP+0x134>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	61da      	str	r2, [r3, #28]

    /* To be able to write again option byte, need to perform a option byte erase */
    status = HAL_FLASHEx_OBErase();
 8001c2e:	f7ff fe31 	bl	8001894 <HAL_FLASHEx_OBErase>
 8001c32:	4603      	mov	r3, r0
 8001c34:	75fb      	strb	r3, [r7, #23]
    if (status == HAL_OK)  
 8001c36:	7dfb      	ldrb	r3, [r7, #23]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d158      	bne.n	8001cee <FLASH_OB_DisableWRP+0x12a>
    {
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8001c3c:	4b2f      	ldr	r3, [pc, #188]	; (8001cfc <FLASH_OB_DisableWRP+0x138>)
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	4a2e      	ldr	r2, [pc, #184]	; (8001cfc <FLASH_OB_DisableWRP+0x138>)
 8001c42:	f043 0310 	orr.w	r3, r3, #16
 8001c46:	6113      	str	r3, [r2, #16]

#if defined(FLASH_WRP0_WRP0)
      if(WRP0_Data != 0xFFU)
 8001c48:	8abb      	ldrh	r3, [r7, #20]
 8001c4a:	2bff      	cmp	r3, #255	; 0xff
 8001c4c:	d00d      	beq.n	8001c6a <FLASH_OB_DisableWRP+0xa6>
      {
        OB->WRP0 |= WRP0_Data;
 8001c4e:	4b2c      	ldr	r3, [pc, #176]	; (8001d00 <FLASH_OB_DisableWRP+0x13c>)
 8001c50:	891b      	ldrh	r3, [r3, #8]
 8001c52:	b29a      	uxth	r2, r3
 8001c54:	492a      	ldr	r1, [pc, #168]	; (8001d00 <FLASH_OB_DisableWRP+0x13c>)
 8001c56:	8abb      	ldrh	r3, [r7, #20]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	810b      	strh	r3, [r1, #8]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001c5e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001c62:	f7ff fd15 	bl	8001690 <FLASH_WaitForLastOperation>
 8001c66:	4603      	mov	r3, r0
 8001c68:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP0_WRP0 */

#if defined(FLASH_WRP1_WRP1)
      if((status == HAL_OK) && (WRP1_Data != 0xFFU))
 8001c6a:	7dfb      	ldrb	r3, [r7, #23]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d110      	bne.n	8001c92 <FLASH_OB_DisableWRP+0xce>
 8001c70:	8a7b      	ldrh	r3, [r7, #18]
 8001c72:	2bff      	cmp	r3, #255	; 0xff
 8001c74:	d00d      	beq.n	8001c92 <FLASH_OB_DisableWRP+0xce>
      {
        OB->WRP1 |= WRP1_Data;
 8001c76:	4b22      	ldr	r3, [pc, #136]	; (8001d00 <FLASH_OB_DisableWRP+0x13c>)
 8001c78:	895b      	ldrh	r3, [r3, #10]
 8001c7a:	b29a      	uxth	r2, r3
 8001c7c:	4920      	ldr	r1, [pc, #128]	; (8001d00 <FLASH_OB_DisableWRP+0x13c>)
 8001c7e:	8a7b      	ldrh	r3, [r7, #18]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	814b      	strh	r3, [r1, #10]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001c86:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001c8a:	f7ff fd01 	bl	8001690 <FLASH_WaitForLastOperation>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP1_WRP1 */

#if defined(FLASH_WRP2_WRP2)
      if((status == HAL_OK) && (WRP2_Data != 0xFFU))
 8001c92:	7dfb      	ldrb	r3, [r7, #23]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d110      	bne.n	8001cba <FLASH_OB_DisableWRP+0xf6>
 8001c98:	8a3b      	ldrh	r3, [r7, #16]
 8001c9a:	2bff      	cmp	r3, #255	; 0xff
 8001c9c:	d00d      	beq.n	8001cba <FLASH_OB_DisableWRP+0xf6>
      {
        OB->WRP2 |= WRP2_Data;
 8001c9e:	4b18      	ldr	r3, [pc, #96]	; (8001d00 <FLASH_OB_DisableWRP+0x13c>)
 8001ca0:	899b      	ldrh	r3, [r3, #12]
 8001ca2:	b29a      	uxth	r2, r3
 8001ca4:	4916      	ldr	r1, [pc, #88]	; (8001d00 <FLASH_OB_DisableWRP+0x13c>)
 8001ca6:	8a3b      	ldrh	r3, [r7, #16]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	818b      	strh	r3, [r1, #12]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001cae:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001cb2:	f7ff fced 	bl	8001690 <FLASH_WaitForLastOperation>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP2_WRP2 */

#if defined(FLASH_WRP3_WRP3)
      if((status == HAL_OK) && (WRP3_Data != 0xFFU))
 8001cba:	7dfb      	ldrb	r3, [r7, #23]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d110      	bne.n	8001ce2 <FLASH_OB_DisableWRP+0x11e>
 8001cc0:	89fb      	ldrh	r3, [r7, #14]
 8001cc2:	2bff      	cmp	r3, #255	; 0xff
 8001cc4:	d00d      	beq.n	8001ce2 <FLASH_OB_DisableWRP+0x11e>
      {
        OB->WRP3 |= WRP3_Data;
 8001cc6:	4b0e      	ldr	r3, [pc, #56]	; (8001d00 <FLASH_OB_DisableWRP+0x13c>)
 8001cc8:	89db      	ldrh	r3, [r3, #14]
 8001cca:	b29a      	uxth	r2, r3
 8001ccc:	490c      	ldr	r1, [pc, #48]	; (8001d00 <FLASH_OB_DisableWRP+0x13c>)
 8001cce:	89fb      	ldrh	r3, [r7, #14]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	81cb      	strh	r3, [r1, #14]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001cd6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001cda:	f7ff fcd9 	bl	8001690 <FLASH_WaitForLastOperation>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP3_WRP3 */

      /* if the program operation is completed, disable the OPTPG Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8001ce2:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <FLASH_OB_DisableWRP+0x138>)
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	4a05      	ldr	r2, [pc, #20]	; (8001cfc <FLASH_OB_DisableWRP+0x138>)
 8001ce8:	f023 0310 	bic.w	r3, r3, #16
 8001cec:	6113      	str	r3, [r2, #16]
    }
  }
  return status;
 8001cee:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3718      	adds	r7, #24
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	200001f0 	.word	0x200001f0
 8001cfc:	40022000 	.word	0x40022000
 8001d00:	1ffff800 	.word	0x1ffff800

08001d04 <FLASH_OB_RDP_LevelConfig>:
  *            @arg @ref OB_RDP_LEVEL_0 No protection
  *            @arg @ref OB_RDP_LEVEL_1 Read protection of the memory
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t ReadProtectLevel)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(ReadProtectLevel));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d12:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d16:	f7ff fcbb 	bl	8001690 <FLASH_WaitForLastOperation>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	73fb      	strb	r3, [r7, #15]
  
  if(status == HAL_OK)
 8001d1e:	7bfb      	ldrb	r3, [r7, #15]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d133      	bne.n	8001d8c <FLASH_OB_RDP_LevelConfig+0x88>
  { 
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001d24:	4b1c      	ldr	r3, [pc, #112]	; (8001d98 <FLASH_OB_RDP_LevelConfig+0x94>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	61da      	str	r2, [r3, #28]
    
    /* If the previous operation is completed, proceed to erase the option bytes */
    SET_BIT(FLASH->CR, FLASH_CR_OPTER);
 8001d2a:	4b1c      	ldr	r3, [pc, #112]	; (8001d9c <FLASH_OB_RDP_LevelConfig+0x98>)
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	4a1b      	ldr	r2, [pc, #108]	; (8001d9c <FLASH_OB_RDP_LevelConfig+0x98>)
 8001d30:	f043 0320 	orr.w	r3, r3, #32
 8001d34:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001d36:	4b19      	ldr	r3, [pc, #100]	; (8001d9c <FLASH_OB_RDP_LevelConfig+0x98>)
 8001d38:	691b      	ldr	r3, [r3, #16]
 8001d3a:	4a18      	ldr	r2, [pc, #96]	; (8001d9c <FLASH_OB_RDP_LevelConfig+0x98>)
 8001d3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d40:	6113      	str	r3, [r2, #16]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d42:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d46:	f7ff fca3 	bl	8001690 <FLASH_WaitForLastOperation>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	73fb      	strb	r3, [r7, #15]

    /* If the erase operation is completed, disable the OPTER Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTER);
 8001d4e:	4b13      	ldr	r3, [pc, #76]	; (8001d9c <FLASH_OB_RDP_LevelConfig+0x98>)
 8001d50:	691b      	ldr	r3, [r3, #16]
 8001d52:	4a12      	ldr	r2, [pc, #72]	; (8001d9c <FLASH_OB_RDP_LevelConfig+0x98>)
 8001d54:	f023 0320 	bic.w	r3, r3, #32
 8001d58:	6113      	str	r3, [r2, #16]

    if(status == HAL_OK)
 8001d5a:	7bfb      	ldrb	r3, [r7, #15]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d115      	bne.n	8001d8c <FLASH_OB_RDP_LevelConfig+0x88>
    {
      /* Enable the Option Bytes Programming operation */
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8001d60:	4b0e      	ldr	r3, [pc, #56]	; (8001d9c <FLASH_OB_RDP_LevelConfig+0x98>)
 8001d62:	691b      	ldr	r3, [r3, #16]
 8001d64:	4a0d      	ldr	r2, [pc, #52]	; (8001d9c <FLASH_OB_RDP_LevelConfig+0x98>)
 8001d66:	f043 0310 	orr.w	r3, r3, #16
 8001d6a:	6113      	str	r3, [r2, #16]
      
      WRITE_REG(OB->RDP, ReadProtectLevel);
 8001d6c:	4b0c      	ldr	r3, [pc, #48]	; (8001da0 <FLASH_OB_RDP_LevelConfig+0x9c>)
 8001d6e:	79fa      	ldrb	r2, [r7, #7]
 8001d70:	b292      	uxth	r2, r2
 8001d72:	801a      	strh	r2, [r3, #0]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE); 
 8001d74:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d78:	f7ff fc8a 	bl	8001690 <FLASH_WaitForLastOperation>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	73fb      	strb	r3, [r7, #15]
      
      /* if the program operation is completed, disable the OPTPG Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8001d80:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <FLASH_OB_RDP_LevelConfig+0x98>)
 8001d82:	691b      	ldr	r3, [r3, #16]
 8001d84:	4a05      	ldr	r2, [pc, #20]	; (8001d9c <FLASH_OB_RDP_LevelConfig+0x98>)
 8001d86:	f023 0310 	bic.w	r3, r3, #16
 8001d8a:	6113      	str	r3, [r2, #16]
    }
  }
  
  return status;
 8001d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3710      	adds	r7, #16
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	200001f0 	.word	0x200001f0
 8001d9c:	40022000 	.word	0x40022000
 8001da0:	1ffff800 	.word	0x1ffff800

08001da4 <FLASH_OB_UserConfig>:
  *         FLASH_OBR_nRST_STOP(Bit3),FLASH_OBR_nRST_STDBY(Bit4).
  *         And BFBF2(Bit5) for STM32F101xG and STM32F103xG . 
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t UserConfig)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8001dae:	2300      	movs	r3, #0
 8001db0:	73fb      	strb	r3, [r7, #15]
#if defined(FLASH_BANK2_END)
  assert_param(IS_OB_BOOT1((UserConfig&OB_BOOT1_SET)));
#endif /* FLASH_BANK2_END */

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001db2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001db6:	f7ff fc6b 	bl	8001690 <FLASH_WaitForLastOperation>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	73fb      	strb	r3, [r7, #15]
  
  if(status == HAL_OK)
 8001dbe:	7bfb      	ldrb	r3, [r7, #15]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d11b      	bne.n	8001dfc <FLASH_OB_UserConfig+0x58>
  {     
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001dc4:	4b10      	ldr	r3, [pc, #64]	; (8001e08 <FLASH_OB_UserConfig+0x64>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	61da      	str	r2, [r3, #28]

    /* Enable the Option Bytes Programming operation */
    SET_BIT(FLASH->CR, FLASH_CR_OPTPG); 
 8001dca:	4b10      	ldr	r3, [pc, #64]	; (8001e0c <FLASH_OB_UserConfig+0x68>)
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	4a0f      	ldr	r2, [pc, #60]	; (8001e0c <FLASH_OB_UserConfig+0x68>)
 8001dd0:	f043 0310 	orr.w	r3, r3, #16
 8001dd4:	6113      	str	r3, [r2, #16]
 
#if defined(FLASH_BANK2_END)
    OB->USER = (UserConfig | 0xF0U);
#else
    OB->USER = (UserConfig | 0x88U);
 8001dd6:	79fb      	ldrb	r3, [r7, #7]
 8001dd8:	f063 0377 	orn	r3, r3, #119	; 0x77
 8001ddc:	b2da      	uxtb	r2, r3
 8001dde:	4b0c      	ldr	r3, [pc, #48]	; (8001e10 <FLASH_OB_UserConfig+0x6c>)
 8001de0:	b292      	uxth	r2, r2
 8001de2:	805a      	strh	r2, [r3, #2]
#endif /* FLASH_BANK2_END */

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001de4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001de8:	f7ff fc52 	bl	8001690 <FLASH_WaitForLastOperation>
 8001dec:	4603      	mov	r3, r0
 8001dee:	73fb      	strb	r3, [r7, #15]

    /* if the program operation is completed, disable the OPTPG Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8001df0:	4b06      	ldr	r3, [pc, #24]	; (8001e0c <FLASH_OB_UserConfig+0x68>)
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	4a05      	ldr	r2, [pc, #20]	; (8001e0c <FLASH_OB_UserConfig+0x68>)
 8001df6:	f023 0310 	bic.w	r3, r3, #16
 8001dfa:	6113      	str	r3, [r2, #16]
  }
  
  return status; 
 8001dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3710      	adds	r7, #16
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	200001f0 	.word	0x200001f0
 8001e0c:	40022000 	.word	0x40022000
 8001e10:	1ffff800 	.word	0x1ffff800

08001e14 <FLASH_OB_ProgramData>:
  *         This parameter can be 0x1FFFF804 or 0x1FFFF806. 
  * @param  Data specifies the data to be programmed.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_ProgramData(uint32_t Address, uint8_t Data)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001e24:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001e28:	f7ff fc32 	bl	8001690 <FLASH_WaitForLastOperation>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	73fb      	strb	r3, [r7, #15]
  
  if(status == HAL_OK)
 8001e30:	7bfb      	ldrb	r3, [r7, #15]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d118      	bne.n	8001e68 <FLASH_OB_ProgramData+0x54>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001e36:	4b0f      	ldr	r3, [pc, #60]	; (8001e74 <FLASH_OB_ProgramData+0x60>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	61da      	str	r2, [r3, #28]

    /* Enables the Option Bytes Programming operation */
    SET_BIT(FLASH->CR, FLASH_CR_OPTPG); 
 8001e3c:	4b0e      	ldr	r3, [pc, #56]	; (8001e78 <FLASH_OB_ProgramData+0x64>)
 8001e3e:	691b      	ldr	r3, [r3, #16]
 8001e40:	4a0d      	ldr	r2, [pc, #52]	; (8001e78 <FLASH_OB_ProgramData+0x64>)
 8001e42:	f043 0310 	orr.w	r3, r3, #16
 8001e46:	6113      	str	r3, [r2, #16]
    *(__IO uint16_t*)Address = Data;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	78fa      	ldrb	r2, [r7, #3]
 8001e4c:	b292      	uxth	r2, r2
 8001e4e:	801a      	strh	r2, [r3, #0]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001e50:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001e54:	f7ff fc1c 	bl	8001690 <FLASH_WaitForLastOperation>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	73fb      	strb	r3, [r7, #15]
    
    /* If the program operation is completed, disable the OPTPG Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8001e5c:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <FLASH_OB_ProgramData+0x64>)
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	4a05      	ldr	r2, [pc, #20]	; (8001e78 <FLASH_OB_ProgramData+0x64>)
 8001e62:	f023 0310 	bic.w	r3, r3, #16
 8001e66:	6113      	str	r3, [r2, #16]
  }
  /* Return the Option Byte Data Program Status */
  return status;
 8001e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	200001f0 	.word	0x200001f0
 8001e78:	40022000 	.word	0x40022000

08001e7c <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval The FLASH Write Protection Option Bytes value
  */
static uint32_t FLASH_OB_GetWRP(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (uint32_t)(READ_REG(FLASH->WRPR));
 8001e80:	4b02      	ldr	r3, [pc, #8]	; (8001e8c <FLASH_OB_GetWRP+0x10>)
 8001e82:	6a1b      	ldr	r3, [r3, #32]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bc80      	pop	{r7}
 8001e8a:	4770      	bx	lr
 8001e8c:	40022000 	.word	0x40022000

08001e90 <FLASH_OB_GetRDP>:
  *         This parameter can be one of the following values:
  *            @arg @ref OB_RDP_LEVEL_0 No protection
  *            @arg @ref OB_RDP_LEVEL_1 Read protection of the memory
  */
static uint32_t FLASH_OB_GetRDP(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
  uint32_t readstatus = OB_RDP_LEVEL_0;
 8001e96:	23a5      	movs	r3, #165	; 0xa5
 8001e98:	607b      	str	r3, [r7, #4]
  uint32_t tmp_reg = 0U;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	603b      	str	r3, [r7, #0]
  
  /* Read RDP level bits */
  tmp_reg = READ_BIT(FLASH->OBR, FLASH_OBR_RDPRT);
 8001e9e:	4b09      	ldr	r3, [pc, #36]	; (8001ec4 <FLASH_OB_GetRDP+0x34>)
 8001ea0:	69db      	ldr	r3, [r3, #28]
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	603b      	str	r3, [r7, #0]

  if (tmp_reg == FLASH_OBR_RDPRT)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d102      	bne.n	8001eb4 <FLASH_OB_GetRDP+0x24>
  {
    readstatus = OB_RDP_LEVEL_1;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	607b      	str	r3, [r7, #4]
 8001eb2:	e001      	b.n	8001eb8 <FLASH_OB_GetRDP+0x28>
  }
  else 
  {
    readstatus = OB_RDP_LEVEL_0;
 8001eb4:	23a5      	movs	r3, #165	; 0xa5
 8001eb6:	607b      	str	r3, [r7, #4]
  }

  return readstatus;
 8001eb8:	687b      	ldr	r3, [r7, #4]
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bc80      	pop	{r7}
 8001ec2:	4770      	bx	lr
 8001ec4:	40022000 	.word	0x40022000

08001ec8 <FLASH_OB_GetUser>:
  * @retval The FLASH User Option Bytes values: FLASH_OBR_IWDG_SW(Bit2), 
  *         FLASH_OBR_nRST_STOP(Bit3),FLASH_OBR_nRST_STDBY(Bit4).
  *         And FLASH_OBR_BFB2(Bit5) for STM32F101xG and STM32F103xG . 
  */
static uint8_t FLASH_OB_GetUser(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return (uint8_t)((READ_REG(FLASH->OBR) & FLASH_OBR_USER) >> FLASH_POSITION_IWDGSW_BIT);
 8001ecc:	4b05      	ldr	r3, [pc, #20]	; (8001ee4 <FLASH_OB_GetUser+0x1c>)
 8001ece:	69db      	ldr	r3, [r3, #28]
 8001ed0:	089b      	lsrs	r3, r3, #2
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	f003 0307 	and.w	r3, r3, #7
 8001ed8:	b2db      	uxtb	r3, r3
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bc80      	pop	{r7}
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	40022000 	.word	0x40022000

08001ee8 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001ef0:	4b0b      	ldr	r3, [pc, #44]	; (8001f20 <FLASH_PageErase+0x38>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001ef6:	4b0b      	ldr	r3, [pc, #44]	; (8001f24 <FLASH_PageErase+0x3c>)
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	4a0a      	ldr	r2, [pc, #40]	; (8001f24 <FLASH_PageErase+0x3c>)
 8001efc:	f043 0302 	orr.w	r3, r3, #2
 8001f00:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001f02:	4a08      	ldr	r2, [pc, #32]	; (8001f24 <FLASH_PageErase+0x3c>)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001f08:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <FLASH_PageErase+0x3c>)
 8001f0a:	691b      	ldr	r3, [r3, #16]
 8001f0c:	4a05      	ldr	r2, [pc, #20]	; (8001f24 <FLASH_PageErase+0x3c>)
 8001f0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f12:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bc80      	pop	{r7}
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	200001f0 	.word	0x200001f0
 8001f24:	40022000 	.word	0x40022000

08001f28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b08b      	sub	sp, #44	; 0x2c
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f32:	2300      	movs	r3, #0
 8001f34:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f36:	2300      	movs	r3, #0
 8001f38:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f3a:	e169      	b.n	8002210 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	69fa      	ldr	r2, [r7, #28]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	f040 8158 	bne.w	800220a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	4a9a      	ldr	r2, [pc, #616]	; (80021c8 <HAL_GPIO_Init+0x2a0>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d05e      	beq.n	8002022 <HAL_GPIO_Init+0xfa>
 8001f64:	4a98      	ldr	r2, [pc, #608]	; (80021c8 <HAL_GPIO_Init+0x2a0>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d875      	bhi.n	8002056 <HAL_GPIO_Init+0x12e>
 8001f6a:	4a98      	ldr	r2, [pc, #608]	; (80021cc <HAL_GPIO_Init+0x2a4>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d058      	beq.n	8002022 <HAL_GPIO_Init+0xfa>
 8001f70:	4a96      	ldr	r2, [pc, #600]	; (80021cc <HAL_GPIO_Init+0x2a4>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d86f      	bhi.n	8002056 <HAL_GPIO_Init+0x12e>
 8001f76:	4a96      	ldr	r2, [pc, #600]	; (80021d0 <HAL_GPIO_Init+0x2a8>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d052      	beq.n	8002022 <HAL_GPIO_Init+0xfa>
 8001f7c:	4a94      	ldr	r2, [pc, #592]	; (80021d0 <HAL_GPIO_Init+0x2a8>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d869      	bhi.n	8002056 <HAL_GPIO_Init+0x12e>
 8001f82:	4a94      	ldr	r2, [pc, #592]	; (80021d4 <HAL_GPIO_Init+0x2ac>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d04c      	beq.n	8002022 <HAL_GPIO_Init+0xfa>
 8001f88:	4a92      	ldr	r2, [pc, #584]	; (80021d4 <HAL_GPIO_Init+0x2ac>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d863      	bhi.n	8002056 <HAL_GPIO_Init+0x12e>
 8001f8e:	4a92      	ldr	r2, [pc, #584]	; (80021d8 <HAL_GPIO_Init+0x2b0>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d046      	beq.n	8002022 <HAL_GPIO_Init+0xfa>
 8001f94:	4a90      	ldr	r2, [pc, #576]	; (80021d8 <HAL_GPIO_Init+0x2b0>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d85d      	bhi.n	8002056 <HAL_GPIO_Init+0x12e>
 8001f9a:	2b12      	cmp	r3, #18
 8001f9c:	d82a      	bhi.n	8001ff4 <HAL_GPIO_Init+0xcc>
 8001f9e:	2b12      	cmp	r3, #18
 8001fa0:	d859      	bhi.n	8002056 <HAL_GPIO_Init+0x12e>
 8001fa2:	a201      	add	r2, pc, #4	; (adr r2, 8001fa8 <HAL_GPIO_Init+0x80>)
 8001fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fa8:	08002023 	.word	0x08002023
 8001fac:	08001ffd 	.word	0x08001ffd
 8001fb0:	0800200f 	.word	0x0800200f
 8001fb4:	08002051 	.word	0x08002051
 8001fb8:	08002057 	.word	0x08002057
 8001fbc:	08002057 	.word	0x08002057
 8001fc0:	08002057 	.word	0x08002057
 8001fc4:	08002057 	.word	0x08002057
 8001fc8:	08002057 	.word	0x08002057
 8001fcc:	08002057 	.word	0x08002057
 8001fd0:	08002057 	.word	0x08002057
 8001fd4:	08002057 	.word	0x08002057
 8001fd8:	08002057 	.word	0x08002057
 8001fdc:	08002057 	.word	0x08002057
 8001fe0:	08002057 	.word	0x08002057
 8001fe4:	08002057 	.word	0x08002057
 8001fe8:	08002057 	.word	0x08002057
 8001fec:	08002005 	.word	0x08002005
 8001ff0:	08002019 	.word	0x08002019
 8001ff4:	4a79      	ldr	r2, [pc, #484]	; (80021dc <HAL_GPIO_Init+0x2b4>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d013      	beq.n	8002022 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ffa:	e02c      	b.n	8002056 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	623b      	str	r3, [r7, #32]
          break;
 8002002:	e029      	b.n	8002058 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	3304      	adds	r3, #4
 800200a:	623b      	str	r3, [r7, #32]
          break;
 800200c:	e024      	b.n	8002058 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	3308      	adds	r3, #8
 8002014:	623b      	str	r3, [r7, #32]
          break;
 8002016:	e01f      	b.n	8002058 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	330c      	adds	r3, #12
 800201e:	623b      	str	r3, [r7, #32]
          break;
 8002020:	e01a      	b.n	8002058 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d102      	bne.n	8002030 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800202a:	2304      	movs	r3, #4
 800202c:	623b      	str	r3, [r7, #32]
          break;
 800202e:	e013      	b.n	8002058 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	2b01      	cmp	r3, #1
 8002036:	d105      	bne.n	8002044 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002038:	2308      	movs	r3, #8
 800203a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	69fa      	ldr	r2, [r7, #28]
 8002040:	611a      	str	r2, [r3, #16]
          break;
 8002042:	e009      	b.n	8002058 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002044:	2308      	movs	r3, #8
 8002046:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	69fa      	ldr	r2, [r7, #28]
 800204c:	615a      	str	r2, [r3, #20]
          break;
 800204e:	e003      	b.n	8002058 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002050:	2300      	movs	r3, #0
 8002052:	623b      	str	r3, [r7, #32]
          break;
 8002054:	e000      	b.n	8002058 <HAL_GPIO_Init+0x130>
          break;
 8002056:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	2bff      	cmp	r3, #255	; 0xff
 800205c:	d801      	bhi.n	8002062 <HAL_GPIO_Init+0x13a>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	e001      	b.n	8002066 <HAL_GPIO_Init+0x13e>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	3304      	adds	r3, #4
 8002066:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	2bff      	cmp	r3, #255	; 0xff
 800206c:	d802      	bhi.n	8002074 <HAL_GPIO_Init+0x14c>
 800206e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	e002      	b.n	800207a <HAL_GPIO_Init+0x152>
 8002074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002076:	3b08      	subs	r3, #8
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	210f      	movs	r1, #15
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	fa01 f303 	lsl.w	r3, r1, r3
 8002088:	43db      	mvns	r3, r3
 800208a:	401a      	ands	r2, r3
 800208c:	6a39      	ldr	r1, [r7, #32]
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	fa01 f303 	lsl.w	r3, r1, r3
 8002094:	431a      	orrs	r2, r3
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f000 80b1 	beq.w	800220a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80020a8:	4b4d      	ldr	r3, [pc, #308]	; (80021e0 <HAL_GPIO_Init+0x2b8>)
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	4a4c      	ldr	r2, [pc, #304]	; (80021e0 <HAL_GPIO_Init+0x2b8>)
 80020ae:	f043 0301 	orr.w	r3, r3, #1
 80020b2:	6193      	str	r3, [r2, #24]
 80020b4:	4b4a      	ldr	r3, [pc, #296]	; (80021e0 <HAL_GPIO_Init+0x2b8>)
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	f003 0301 	and.w	r3, r3, #1
 80020bc:	60bb      	str	r3, [r7, #8]
 80020be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80020c0:	4a48      	ldr	r2, [pc, #288]	; (80021e4 <HAL_GPIO_Init+0x2bc>)
 80020c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c4:	089b      	lsrs	r3, r3, #2
 80020c6:	3302      	adds	r3, #2
 80020c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d0:	f003 0303 	and.w	r3, r3, #3
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	220f      	movs	r2, #15
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	43db      	mvns	r3, r3
 80020de:	68fa      	ldr	r2, [r7, #12]
 80020e0:	4013      	ands	r3, r2
 80020e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4a40      	ldr	r2, [pc, #256]	; (80021e8 <HAL_GPIO_Init+0x2c0>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d013      	beq.n	8002114 <HAL_GPIO_Init+0x1ec>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4a3f      	ldr	r2, [pc, #252]	; (80021ec <HAL_GPIO_Init+0x2c4>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d00d      	beq.n	8002110 <HAL_GPIO_Init+0x1e8>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	4a3e      	ldr	r2, [pc, #248]	; (80021f0 <HAL_GPIO_Init+0x2c8>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d007      	beq.n	800210c <HAL_GPIO_Init+0x1e4>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4a3d      	ldr	r2, [pc, #244]	; (80021f4 <HAL_GPIO_Init+0x2cc>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d101      	bne.n	8002108 <HAL_GPIO_Init+0x1e0>
 8002104:	2303      	movs	r3, #3
 8002106:	e006      	b.n	8002116 <HAL_GPIO_Init+0x1ee>
 8002108:	2304      	movs	r3, #4
 800210a:	e004      	b.n	8002116 <HAL_GPIO_Init+0x1ee>
 800210c:	2302      	movs	r3, #2
 800210e:	e002      	b.n	8002116 <HAL_GPIO_Init+0x1ee>
 8002110:	2301      	movs	r3, #1
 8002112:	e000      	b.n	8002116 <HAL_GPIO_Init+0x1ee>
 8002114:	2300      	movs	r3, #0
 8002116:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002118:	f002 0203 	and.w	r2, r2, #3
 800211c:	0092      	lsls	r2, r2, #2
 800211e:	4093      	lsls	r3, r2
 8002120:	68fa      	ldr	r2, [r7, #12]
 8002122:	4313      	orrs	r3, r2
 8002124:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002126:	492f      	ldr	r1, [pc, #188]	; (80021e4 <HAL_GPIO_Init+0x2bc>)
 8002128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212a:	089b      	lsrs	r3, r3, #2
 800212c:	3302      	adds	r3, #2
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d006      	beq.n	800214e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002140:	4b2d      	ldr	r3, [pc, #180]	; (80021f8 <HAL_GPIO_Init+0x2d0>)
 8002142:	689a      	ldr	r2, [r3, #8]
 8002144:	492c      	ldr	r1, [pc, #176]	; (80021f8 <HAL_GPIO_Init+0x2d0>)
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	4313      	orrs	r3, r2
 800214a:	608b      	str	r3, [r1, #8]
 800214c:	e006      	b.n	800215c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800214e:	4b2a      	ldr	r3, [pc, #168]	; (80021f8 <HAL_GPIO_Init+0x2d0>)
 8002150:	689a      	ldr	r2, [r3, #8]
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	43db      	mvns	r3, r3
 8002156:	4928      	ldr	r1, [pc, #160]	; (80021f8 <HAL_GPIO_Init+0x2d0>)
 8002158:	4013      	ands	r3, r2
 800215a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d006      	beq.n	8002176 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002168:	4b23      	ldr	r3, [pc, #140]	; (80021f8 <HAL_GPIO_Init+0x2d0>)
 800216a:	68da      	ldr	r2, [r3, #12]
 800216c:	4922      	ldr	r1, [pc, #136]	; (80021f8 <HAL_GPIO_Init+0x2d0>)
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	4313      	orrs	r3, r2
 8002172:	60cb      	str	r3, [r1, #12]
 8002174:	e006      	b.n	8002184 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002176:	4b20      	ldr	r3, [pc, #128]	; (80021f8 <HAL_GPIO_Init+0x2d0>)
 8002178:	68da      	ldr	r2, [r3, #12]
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	43db      	mvns	r3, r3
 800217e:	491e      	ldr	r1, [pc, #120]	; (80021f8 <HAL_GPIO_Init+0x2d0>)
 8002180:	4013      	ands	r3, r2
 8002182:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d006      	beq.n	800219e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002190:	4b19      	ldr	r3, [pc, #100]	; (80021f8 <HAL_GPIO_Init+0x2d0>)
 8002192:	685a      	ldr	r2, [r3, #4]
 8002194:	4918      	ldr	r1, [pc, #96]	; (80021f8 <HAL_GPIO_Init+0x2d0>)
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	4313      	orrs	r3, r2
 800219a:	604b      	str	r3, [r1, #4]
 800219c:	e006      	b.n	80021ac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800219e:	4b16      	ldr	r3, [pc, #88]	; (80021f8 <HAL_GPIO_Init+0x2d0>)
 80021a0:	685a      	ldr	r2, [r3, #4]
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	43db      	mvns	r3, r3
 80021a6:	4914      	ldr	r1, [pc, #80]	; (80021f8 <HAL_GPIO_Init+0x2d0>)
 80021a8:	4013      	ands	r3, r2
 80021aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d021      	beq.n	80021fc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80021b8:	4b0f      	ldr	r3, [pc, #60]	; (80021f8 <HAL_GPIO_Init+0x2d0>)
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	490e      	ldr	r1, [pc, #56]	; (80021f8 <HAL_GPIO_Init+0x2d0>)
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	600b      	str	r3, [r1, #0]
 80021c4:	e021      	b.n	800220a <HAL_GPIO_Init+0x2e2>
 80021c6:	bf00      	nop
 80021c8:	10320000 	.word	0x10320000
 80021cc:	10310000 	.word	0x10310000
 80021d0:	10220000 	.word	0x10220000
 80021d4:	10210000 	.word	0x10210000
 80021d8:	10120000 	.word	0x10120000
 80021dc:	10110000 	.word	0x10110000
 80021e0:	40021000 	.word	0x40021000
 80021e4:	40010000 	.word	0x40010000
 80021e8:	40010800 	.word	0x40010800
 80021ec:	40010c00 	.word	0x40010c00
 80021f0:	40011000 	.word	0x40011000
 80021f4:	40011400 	.word	0x40011400
 80021f8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80021fc:	4b0b      	ldr	r3, [pc, #44]	; (800222c <HAL_GPIO_Init+0x304>)
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	43db      	mvns	r3, r3
 8002204:	4909      	ldr	r1, [pc, #36]	; (800222c <HAL_GPIO_Init+0x304>)
 8002206:	4013      	ands	r3, r2
 8002208:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800220a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220c:	3301      	adds	r3, #1
 800220e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002216:	fa22 f303 	lsr.w	r3, r2, r3
 800221a:	2b00      	cmp	r3, #0
 800221c:	f47f ae8e 	bne.w	8001f3c <HAL_GPIO_Init+0x14>
  }
}
 8002220:	bf00      	nop
 8002222:	bf00      	nop
 8002224:	372c      	adds	r7, #44	; 0x2c
 8002226:	46bd      	mov	sp, r7
 8002228:	bc80      	pop	{r7}
 800222a:	4770      	bx	lr
 800222c:	40010400 	.word	0x40010400

08002230 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b086      	sub	sp, #24
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d101      	bne.n	8002242 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e272      	b.n	8002728 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	2b00      	cmp	r3, #0
 800224c:	f000 8087 	beq.w	800235e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002250:	4b92      	ldr	r3, [pc, #584]	; (800249c <HAL_RCC_OscConfig+0x26c>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f003 030c 	and.w	r3, r3, #12
 8002258:	2b04      	cmp	r3, #4
 800225a:	d00c      	beq.n	8002276 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800225c:	4b8f      	ldr	r3, [pc, #572]	; (800249c <HAL_RCC_OscConfig+0x26c>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f003 030c 	and.w	r3, r3, #12
 8002264:	2b08      	cmp	r3, #8
 8002266:	d112      	bne.n	800228e <HAL_RCC_OscConfig+0x5e>
 8002268:	4b8c      	ldr	r3, [pc, #560]	; (800249c <HAL_RCC_OscConfig+0x26c>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002270:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002274:	d10b      	bne.n	800228e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002276:	4b89      	ldr	r3, [pc, #548]	; (800249c <HAL_RCC_OscConfig+0x26c>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d06c      	beq.n	800235c <HAL_RCC_OscConfig+0x12c>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d168      	bne.n	800235c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e24c      	b.n	8002728 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002296:	d106      	bne.n	80022a6 <HAL_RCC_OscConfig+0x76>
 8002298:	4b80      	ldr	r3, [pc, #512]	; (800249c <HAL_RCC_OscConfig+0x26c>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a7f      	ldr	r2, [pc, #508]	; (800249c <HAL_RCC_OscConfig+0x26c>)
 800229e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022a2:	6013      	str	r3, [r2, #0]
 80022a4:	e02e      	b.n	8002304 <HAL_RCC_OscConfig+0xd4>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d10c      	bne.n	80022c8 <HAL_RCC_OscConfig+0x98>
 80022ae:	4b7b      	ldr	r3, [pc, #492]	; (800249c <HAL_RCC_OscConfig+0x26c>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a7a      	ldr	r2, [pc, #488]	; (800249c <HAL_RCC_OscConfig+0x26c>)
 80022b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022b8:	6013      	str	r3, [r2, #0]
 80022ba:	4b78      	ldr	r3, [pc, #480]	; (800249c <HAL_RCC_OscConfig+0x26c>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a77      	ldr	r2, [pc, #476]	; (800249c <HAL_RCC_OscConfig+0x26c>)
 80022c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022c4:	6013      	str	r3, [r2, #0]
 80022c6:	e01d      	b.n	8002304 <HAL_RCC_OscConfig+0xd4>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022d0:	d10c      	bne.n	80022ec <HAL_RCC_OscConfig+0xbc>
 80022d2:	4b72      	ldr	r3, [pc, #456]	; (800249c <HAL_RCC_OscConfig+0x26c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a71      	ldr	r2, [pc, #452]	; (800249c <HAL_RCC_OscConfig+0x26c>)
 80022d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022dc:	6013      	str	r3, [r2, #0]
 80022de:	4b6f      	ldr	r3, [pc, #444]	; (800249c <HAL_RCC_OscConfig+0x26c>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a6e      	ldr	r2, [pc, #440]	; (800249c <HAL_RCC_OscConfig+0x26c>)
 80022e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022e8:	6013      	str	r3, [r2, #0]
 80022ea:	e00b      	b.n	8002304 <HAL_RCC_OscConfig+0xd4>
 80022ec:	4b6b      	ldr	r3, [pc, #428]	; (800249c <HAL_RCC_OscConfig+0x26c>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a6a      	ldr	r2, [pc, #424]	; (800249c <HAL_RCC_OscConfig+0x26c>)
 80022f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022f6:	6013      	str	r3, [r2, #0]
 80022f8:	4b68      	ldr	r3, [pc, #416]	; (800249c <HAL_RCC_OscConfig+0x26c>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a67      	ldr	r2, [pc, #412]	; (800249c <HAL_RCC_OscConfig+0x26c>)
 80022fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002302:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d013      	beq.n	8002334 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230c:	f7fe ff7e 	bl	800120c <HAL_GetTick>
 8002310:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002314:	f7fe ff7a 	bl	800120c <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b64      	cmp	r3, #100	; 0x64
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e200      	b.n	8002728 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002326:	4b5d      	ldr	r3, [pc, #372]	; (800249c <HAL_RCC_OscConfig+0x26c>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d0f0      	beq.n	8002314 <HAL_RCC_OscConfig+0xe4>
 8002332:	e014      	b.n	800235e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002334:	f7fe ff6a 	bl	800120c <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800233a:	e008      	b.n	800234e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800233c:	f7fe ff66 	bl	800120c <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b64      	cmp	r3, #100	; 0x64
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e1ec      	b.n	8002728 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800234e:	4b53      	ldr	r3, [pc, #332]	; (800249c <HAL_RCC_OscConfig+0x26c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1f0      	bne.n	800233c <HAL_RCC_OscConfig+0x10c>
 800235a:	e000      	b.n	800235e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800235c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d063      	beq.n	8002432 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800236a:	4b4c      	ldr	r3, [pc, #304]	; (800249c <HAL_RCC_OscConfig+0x26c>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f003 030c 	and.w	r3, r3, #12
 8002372:	2b00      	cmp	r3, #0
 8002374:	d00b      	beq.n	800238e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002376:	4b49      	ldr	r3, [pc, #292]	; (800249c <HAL_RCC_OscConfig+0x26c>)
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f003 030c 	and.w	r3, r3, #12
 800237e:	2b08      	cmp	r3, #8
 8002380:	d11c      	bne.n	80023bc <HAL_RCC_OscConfig+0x18c>
 8002382:	4b46      	ldr	r3, [pc, #280]	; (800249c <HAL_RCC_OscConfig+0x26c>)
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d116      	bne.n	80023bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800238e:	4b43      	ldr	r3, [pc, #268]	; (800249c <HAL_RCC_OscConfig+0x26c>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d005      	beq.n	80023a6 <HAL_RCC_OscConfig+0x176>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d001      	beq.n	80023a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e1c0      	b.n	8002728 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023a6:	4b3d      	ldr	r3, [pc, #244]	; (800249c <HAL_RCC_OscConfig+0x26c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	695b      	ldr	r3, [r3, #20]
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	4939      	ldr	r1, [pc, #228]	; (800249c <HAL_RCC_OscConfig+0x26c>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ba:	e03a      	b.n	8002432 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	691b      	ldr	r3, [r3, #16]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d020      	beq.n	8002406 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023c4:	4b36      	ldr	r3, [pc, #216]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 80023c6:	2201      	movs	r2, #1
 80023c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ca:	f7fe ff1f 	bl	800120c <HAL_GetTick>
 80023ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023d0:	e008      	b.n	80023e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023d2:	f7fe ff1b 	bl	800120c <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d901      	bls.n	80023e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e1a1      	b.n	8002728 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023e4:	4b2d      	ldr	r3, [pc, #180]	; (800249c <HAL_RCC_OscConfig+0x26c>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0302 	and.w	r3, r3, #2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d0f0      	beq.n	80023d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023f0:	4b2a      	ldr	r3, [pc, #168]	; (800249c <HAL_RCC_OscConfig+0x26c>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	695b      	ldr	r3, [r3, #20]
 80023fc:	00db      	lsls	r3, r3, #3
 80023fe:	4927      	ldr	r1, [pc, #156]	; (800249c <HAL_RCC_OscConfig+0x26c>)
 8002400:	4313      	orrs	r3, r2
 8002402:	600b      	str	r3, [r1, #0]
 8002404:	e015      	b.n	8002432 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002406:	4b26      	ldr	r3, [pc, #152]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800240c:	f7fe fefe 	bl	800120c <HAL_GetTick>
 8002410:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002412:	e008      	b.n	8002426 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002414:	f7fe fefa 	bl	800120c <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b02      	cmp	r3, #2
 8002420:	d901      	bls.n	8002426 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e180      	b.n	8002728 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002426:	4b1d      	ldr	r3, [pc, #116]	; (800249c <HAL_RCC_OscConfig+0x26c>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d1f0      	bne.n	8002414 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0308 	and.w	r3, r3, #8
 800243a:	2b00      	cmp	r3, #0
 800243c:	d03a      	beq.n	80024b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d019      	beq.n	800247a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002446:	4b17      	ldr	r3, [pc, #92]	; (80024a4 <HAL_RCC_OscConfig+0x274>)
 8002448:	2201      	movs	r2, #1
 800244a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800244c:	f7fe fede 	bl	800120c <HAL_GetTick>
 8002450:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002452:	e008      	b.n	8002466 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002454:	f7fe feda 	bl	800120c <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b02      	cmp	r3, #2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e160      	b.n	8002728 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002466:	4b0d      	ldr	r3, [pc, #52]	; (800249c <HAL_RCC_OscConfig+0x26c>)
 8002468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d0f0      	beq.n	8002454 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002472:	2001      	movs	r0, #1
 8002474:	f000 face 	bl	8002a14 <RCC_Delay>
 8002478:	e01c      	b.n	80024b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800247a:	4b0a      	ldr	r3, [pc, #40]	; (80024a4 <HAL_RCC_OscConfig+0x274>)
 800247c:	2200      	movs	r2, #0
 800247e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002480:	f7fe fec4 	bl	800120c <HAL_GetTick>
 8002484:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002486:	e00f      	b.n	80024a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002488:	f7fe fec0 	bl	800120c <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b02      	cmp	r3, #2
 8002494:	d908      	bls.n	80024a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e146      	b.n	8002728 <HAL_RCC_OscConfig+0x4f8>
 800249a:	bf00      	nop
 800249c:	40021000 	.word	0x40021000
 80024a0:	42420000 	.word	0x42420000
 80024a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024a8:	4b92      	ldr	r3, [pc, #584]	; (80026f4 <HAL_RCC_OscConfig+0x4c4>)
 80024aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d1e9      	bne.n	8002488 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0304 	and.w	r3, r3, #4
 80024bc:	2b00      	cmp	r3, #0
 80024be:	f000 80a6 	beq.w	800260e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024c2:	2300      	movs	r3, #0
 80024c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024c6:	4b8b      	ldr	r3, [pc, #556]	; (80026f4 <HAL_RCC_OscConfig+0x4c4>)
 80024c8:	69db      	ldr	r3, [r3, #28]
 80024ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d10d      	bne.n	80024ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024d2:	4b88      	ldr	r3, [pc, #544]	; (80026f4 <HAL_RCC_OscConfig+0x4c4>)
 80024d4:	69db      	ldr	r3, [r3, #28]
 80024d6:	4a87      	ldr	r2, [pc, #540]	; (80026f4 <HAL_RCC_OscConfig+0x4c4>)
 80024d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024dc:	61d3      	str	r3, [r2, #28]
 80024de:	4b85      	ldr	r3, [pc, #532]	; (80026f4 <HAL_RCC_OscConfig+0x4c4>)
 80024e0:	69db      	ldr	r3, [r3, #28]
 80024e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e6:	60bb      	str	r3, [r7, #8]
 80024e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024ea:	2301      	movs	r3, #1
 80024ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ee:	4b82      	ldr	r3, [pc, #520]	; (80026f8 <HAL_RCC_OscConfig+0x4c8>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d118      	bne.n	800252c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024fa:	4b7f      	ldr	r3, [pc, #508]	; (80026f8 <HAL_RCC_OscConfig+0x4c8>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a7e      	ldr	r2, [pc, #504]	; (80026f8 <HAL_RCC_OscConfig+0x4c8>)
 8002500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002504:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002506:	f7fe fe81 	bl	800120c <HAL_GetTick>
 800250a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800250c:	e008      	b.n	8002520 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800250e:	f7fe fe7d 	bl	800120c <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	2b64      	cmp	r3, #100	; 0x64
 800251a:	d901      	bls.n	8002520 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e103      	b.n	8002728 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002520:	4b75      	ldr	r3, [pc, #468]	; (80026f8 <HAL_RCC_OscConfig+0x4c8>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002528:	2b00      	cmp	r3, #0
 800252a:	d0f0      	beq.n	800250e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	2b01      	cmp	r3, #1
 8002532:	d106      	bne.n	8002542 <HAL_RCC_OscConfig+0x312>
 8002534:	4b6f      	ldr	r3, [pc, #444]	; (80026f4 <HAL_RCC_OscConfig+0x4c4>)
 8002536:	6a1b      	ldr	r3, [r3, #32]
 8002538:	4a6e      	ldr	r2, [pc, #440]	; (80026f4 <HAL_RCC_OscConfig+0x4c4>)
 800253a:	f043 0301 	orr.w	r3, r3, #1
 800253e:	6213      	str	r3, [r2, #32]
 8002540:	e02d      	b.n	800259e <HAL_RCC_OscConfig+0x36e>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d10c      	bne.n	8002564 <HAL_RCC_OscConfig+0x334>
 800254a:	4b6a      	ldr	r3, [pc, #424]	; (80026f4 <HAL_RCC_OscConfig+0x4c4>)
 800254c:	6a1b      	ldr	r3, [r3, #32]
 800254e:	4a69      	ldr	r2, [pc, #420]	; (80026f4 <HAL_RCC_OscConfig+0x4c4>)
 8002550:	f023 0301 	bic.w	r3, r3, #1
 8002554:	6213      	str	r3, [r2, #32]
 8002556:	4b67      	ldr	r3, [pc, #412]	; (80026f4 <HAL_RCC_OscConfig+0x4c4>)
 8002558:	6a1b      	ldr	r3, [r3, #32]
 800255a:	4a66      	ldr	r2, [pc, #408]	; (80026f4 <HAL_RCC_OscConfig+0x4c4>)
 800255c:	f023 0304 	bic.w	r3, r3, #4
 8002560:	6213      	str	r3, [r2, #32]
 8002562:	e01c      	b.n	800259e <HAL_RCC_OscConfig+0x36e>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	2b05      	cmp	r3, #5
 800256a:	d10c      	bne.n	8002586 <HAL_RCC_OscConfig+0x356>
 800256c:	4b61      	ldr	r3, [pc, #388]	; (80026f4 <HAL_RCC_OscConfig+0x4c4>)
 800256e:	6a1b      	ldr	r3, [r3, #32]
 8002570:	4a60      	ldr	r2, [pc, #384]	; (80026f4 <HAL_RCC_OscConfig+0x4c4>)
 8002572:	f043 0304 	orr.w	r3, r3, #4
 8002576:	6213      	str	r3, [r2, #32]
 8002578:	4b5e      	ldr	r3, [pc, #376]	; (80026f4 <HAL_RCC_OscConfig+0x4c4>)
 800257a:	6a1b      	ldr	r3, [r3, #32]
 800257c:	4a5d      	ldr	r2, [pc, #372]	; (80026f4 <HAL_RCC_OscConfig+0x4c4>)
 800257e:	f043 0301 	orr.w	r3, r3, #1
 8002582:	6213      	str	r3, [r2, #32]
 8002584:	e00b      	b.n	800259e <HAL_RCC_OscConfig+0x36e>
 8002586:	4b5b      	ldr	r3, [pc, #364]	; (80026f4 <HAL_RCC_OscConfig+0x4c4>)
 8002588:	6a1b      	ldr	r3, [r3, #32]
 800258a:	4a5a      	ldr	r2, [pc, #360]	; (80026f4 <HAL_RCC_OscConfig+0x4c4>)
 800258c:	f023 0301 	bic.w	r3, r3, #1
 8002590:	6213      	str	r3, [r2, #32]
 8002592:	4b58      	ldr	r3, [pc, #352]	; (80026f4 <HAL_RCC_OscConfig+0x4c4>)
 8002594:	6a1b      	ldr	r3, [r3, #32]
 8002596:	4a57      	ldr	r2, [pc, #348]	; (80026f4 <HAL_RCC_OscConfig+0x4c4>)
 8002598:	f023 0304 	bic.w	r3, r3, #4
 800259c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d015      	beq.n	80025d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025a6:	f7fe fe31 	bl	800120c <HAL_GetTick>
 80025aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ac:	e00a      	b.n	80025c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ae:	f7fe fe2d 	bl	800120c <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025bc:	4293      	cmp	r3, r2
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e0b1      	b.n	8002728 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025c4:	4b4b      	ldr	r3, [pc, #300]	; (80026f4 <HAL_RCC_OscConfig+0x4c4>)
 80025c6:	6a1b      	ldr	r3, [r3, #32]
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d0ee      	beq.n	80025ae <HAL_RCC_OscConfig+0x37e>
 80025d0:	e014      	b.n	80025fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025d2:	f7fe fe1b 	bl	800120c <HAL_GetTick>
 80025d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025d8:	e00a      	b.n	80025f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025da:	f7fe fe17 	bl	800120c <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d901      	bls.n	80025f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e09b      	b.n	8002728 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025f0:	4b40      	ldr	r3, [pc, #256]	; (80026f4 <HAL_RCC_OscConfig+0x4c4>)
 80025f2:	6a1b      	ldr	r3, [r3, #32]
 80025f4:	f003 0302 	and.w	r3, r3, #2
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d1ee      	bne.n	80025da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025fc:	7dfb      	ldrb	r3, [r7, #23]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d105      	bne.n	800260e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002602:	4b3c      	ldr	r3, [pc, #240]	; (80026f4 <HAL_RCC_OscConfig+0x4c4>)
 8002604:	69db      	ldr	r3, [r3, #28]
 8002606:	4a3b      	ldr	r2, [pc, #236]	; (80026f4 <HAL_RCC_OscConfig+0x4c4>)
 8002608:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800260c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	69db      	ldr	r3, [r3, #28]
 8002612:	2b00      	cmp	r3, #0
 8002614:	f000 8087 	beq.w	8002726 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002618:	4b36      	ldr	r3, [pc, #216]	; (80026f4 <HAL_RCC_OscConfig+0x4c4>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f003 030c 	and.w	r3, r3, #12
 8002620:	2b08      	cmp	r3, #8
 8002622:	d061      	beq.n	80026e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	69db      	ldr	r3, [r3, #28]
 8002628:	2b02      	cmp	r3, #2
 800262a:	d146      	bne.n	80026ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800262c:	4b33      	ldr	r3, [pc, #204]	; (80026fc <HAL_RCC_OscConfig+0x4cc>)
 800262e:	2200      	movs	r2, #0
 8002630:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002632:	f7fe fdeb 	bl	800120c <HAL_GetTick>
 8002636:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002638:	e008      	b.n	800264c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800263a:	f7fe fde7 	bl	800120c <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d901      	bls.n	800264c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e06d      	b.n	8002728 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800264c:	4b29      	ldr	r3, [pc, #164]	; (80026f4 <HAL_RCC_OscConfig+0x4c4>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d1f0      	bne.n	800263a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a1b      	ldr	r3, [r3, #32]
 800265c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002660:	d108      	bne.n	8002674 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002662:	4b24      	ldr	r3, [pc, #144]	; (80026f4 <HAL_RCC_OscConfig+0x4c4>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	4921      	ldr	r1, [pc, #132]	; (80026f4 <HAL_RCC_OscConfig+0x4c4>)
 8002670:	4313      	orrs	r3, r2
 8002672:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002674:	4b1f      	ldr	r3, [pc, #124]	; (80026f4 <HAL_RCC_OscConfig+0x4c4>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a19      	ldr	r1, [r3, #32]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002684:	430b      	orrs	r3, r1
 8002686:	491b      	ldr	r1, [pc, #108]	; (80026f4 <HAL_RCC_OscConfig+0x4c4>)
 8002688:	4313      	orrs	r3, r2
 800268a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800268c:	4b1b      	ldr	r3, [pc, #108]	; (80026fc <HAL_RCC_OscConfig+0x4cc>)
 800268e:	2201      	movs	r2, #1
 8002690:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002692:	f7fe fdbb 	bl	800120c <HAL_GetTick>
 8002696:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002698:	e008      	b.n	80026ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800269a:	f7fe fdb7 	bl	800120c <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d901      	bls.n	80026ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e03d      	b.n	8002728 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026ac:	4b11      	ldr	r3, [pc, #68]	; (80026f4 <HAL_RCC_OscConfig+0x4c4>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d0f0      	beq.n	800269a <HAL_RCC_OscConfig+0x46a>
 80026b8:	e035      	b.n	8002726 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ba:	4b10      	ldr	r3, [pc, #64]	; (80026fc <HAL_RCC_OscConfig+0x4cc>)
 80026bc:	2200      	movs	r2, #0
 80026be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c0:	f7fe fda4 	bl	800120c <HAL_GetTick>
 80026c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026c6:	e008      	b.n	80026da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026c8:	f7fe fda0 	bl	800120c <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e026      	b.n	8002728 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026da:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <HAL_RCC_OscConfig+0x4c4>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d1f0      	bne.n	80026c8 <HAL_RCC_OscConfig+0x498>
 80026e6:	e01e      	b.n	8002726 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	69db      	ldr	r3, [r3, #28]
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d107      	bne.n	8002700 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e019      	b.n	8002728 <HAL_RCC_OscConfig+0x4f8>
 80026f4:	40021000 	.word	0x40021000
 80026f8:	40007000 	.word	0x40007000
 80026fc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002700:	4b0b      	ldr	r3, [pc, #44]	; (8002730 <HAL_RCC_OscConfig+0x500>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a1b      	ldr	r3, [r3, #32]
 8002710:	429a      	cmp	r2, r3
 8002712:	d106      	bne.n	8002722 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800271e:	429a      	cmp	r2, r3
 8002720:	d001      	beq.n	8002726 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e000      	b.n	8002728 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002726:	2300      	movs	r3, #0
}
 8002728:	4618      	mov	r0, r3
 800272a:	3718      	adds	r7, #24
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	40021000 	.word	0x40021000

08002734 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d101      	bne.n	8002748 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e0d0      	b.n	80028ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002748:	4b6a      	ldr	r3, [pc, #424]	; (80028f4 <HAL_RCC_ClockConfig+0x1c0>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0307 	and.w	r3, r3, #7
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	429a      	cmp	r2, r3
 8002754:	d910      	bls.n	8002778 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002756:	4b67      	ldr	r3, [pc, #412]	; (80028f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f023 0207 	bic.w	r2, r3, #7
 800275e:	4965      	ldr	r1, [pc, #404]	; (80028f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	4313      	orrs	r3, r2
 8002764:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002766:	4b63      	ldr	r3, [pc, #396]	; (80028f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0307 	and.w	r3, r3, #7
 800276e:	683a      	ldr	r2, [r7, #0]
 8002770:	429a      	cmp	r2, r3
 8002772:	d001      	beq.n	8002778 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e0b8      	b.n	80028ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0302 	and.w	r3, r3, #2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d020      	beq.n	80027c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0304 	and.w	r3, r3, #4
 800278c:	2b00      	cmp	r3, #0
 800278e:	d005      	beq.n	800279c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002790:	4b59      	ldr	r3, [pc, #356]	; (80028f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	4a58      	ldr	r2, [pc, #352]	; (80028f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002796:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800279a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0308 	and.w	r3, r3, #8
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d005      	beq.n	80027b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027a8:	4b53      	ldr	r3, [pc, #332]	; (80028f8 <HAL_RCC_ClockConfig+0x1c4>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	4a52      	ldr	r2, [pc, #328]	; (80028f8 <HAL_RCC_ClockConfig+0x1c4>)
 80027ae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80027b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027b4:	4b50      	ldr	r3, [pc, #320]	; (80028f8 <HAL_RCC_ClockConfig+0x1c4>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	494d      	ldr	r1, [pc, #308]	; (80028f8 <HAL_RCC_ClockConfig+0x1c4>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d040      	beq.n	8002854 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d107      	bne.n	80027ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027da:	4b47      	ldr	r3, [pc, #284]	; (80028f8 <HAL_RCC_ClockConfig+0x1c4>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d115      	bne.n	8002812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e07f      	b.n	80028ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d107      	bne.n	8002802 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027f2:	4b41      	ldr	r3, [pc, #260]	; (80028f8 <HAL_RCC_ClockConfig+0x1c4>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d109      	bne.n	8002812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e073      	b.n	80028ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002802:	4b3d      	ldr	r3, [pc, #244]	; (80028f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e06b      	b.n	80028ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002812:	4b39      	ldr	r3, [pc, #228]	; (80028f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f023 0203 	bic.w	r2, r3, #3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	4936      	ldr	r1, [pc, #216]	; (80028f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002820:	4313      	orrs	r3, r2
 8002822:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002824:	f7fe fcf2 	bl	800120c <HAL_GetTick>
 8002828:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800282a:	e00a      	b.n	8002842 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800282c:	f7fe fcee 	bl	800120c <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	f241 3288 	movw	r2, #5000	; 0x1388
 800283a:	4293      	cmp	r3, r2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e053      	b.n	80028ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002842:	4b2d      	ldr	r3, [pc, #180]	; (80028f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f003 020c 	and.w	r2, r3, #12
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	429a      	cmp	r2, r3
 8002852:	d1eb      	bne.n	800282c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002854:	4b27      	ldr	r3, [pc, #156]	; (80028f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0307 	and.w	r3, r3, #7
 800285c:	683a      	ldr	r2, [r7, #0]
 800285e:	429a      	cmp	r2, r3
 8002860:	d210      	bcs.n	8002884 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002862:	4b24      	ldr	r3, [pc, #144]	; (80028f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f023 0207 	bic.w	r2, r3, #7
 800286a:	4922      	ldr	r1, [pc, #136]	; (80028f4 <HAL_RCC_ClockConfig+0x1c0>)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	4313      	orrs	r3, r2
 8002870:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002872:	4b20      	ldr	r3, [pc, #128]	; (80028f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0307 	and.w	r3, r3, #7
 800287a:	683a      	ldr	r2, [r7, #0]
 800287c:	429a      	cmp	r2, r3
 800287e:	d001      	beq.n	8002884 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e032      	b.n	80028ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0304 	and.w	r3, r3, #4
 800288c:	2b00      	cmp	r3, #0
 800288e:	d008      	beq.n	80028a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002890:	4b19      	ldr	r3, [pc, #100]	; (80028f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	4916      	ldr	r1, [pc, #88]	; (80028f8 <HAL_RCC_ClockConfig+0x1c4>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0308 	and.w	r3, r3, #8
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d009      	beq.n	80028c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028ae:	4b12      	ldr	r3, [pc, #72]	; (80028f8 <HAL_RCC_ClockConfig+0x1c4>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	00db      	lsls	r3, r3, #3
 80028bc:	490e      	ldr	r1, [pc, #56]	; (80028f8 <HAL_RCC_ClockConfig+0x1c4>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028c2:	f000 f821 	bl	8002908 <HAL_RCC_GetSysClockFreq>
 80028c6:	4602      	mov	r2, r0
 80028c8:	4b0b      	ldr	r3, [pc, #44]	; (80028f8 <HAL_RCC_ClockConfig+0x1c4>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	091b      	lsrs	r3, r3, #4
 80028ce:	f003 030f 	and.w	r3, r3, #15
 80028d2:	490a      	ldr	r1, [pc, #40]	; (80028fc <HAL_RCC_ClockConfig+0x1c8>)
 80028d4:	5ccb      	ldrb	r3, [r1, r3]
 80028d6:	fa22 f303 	lsr.w	r3, r2, r3
 80028da:	4a09      	ldr	r2, [pc, #36]	; (8002900 <HAL_RCC_ClockConfig+0x1cc>)
 80028dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028de:	4b09      	ldr	r3, [pc, #36]	; (8002904 <HAL_RCC_ClockConfig+0x1d0>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7fe fc50 	bl	8001188 <HAL_InitTick>

  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3710      	adds	r7, #16
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	40022000 	.word	0x40022000
 80028f8:	40021000 	.word	0x40021000
 80028fc:	08003ecc 	.word	0x08003ecc
 8002900:	2000000c 	.word	0x2000000c
 8002904:	20000010 	.word	0x20000010

08002908 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002908:	b480      	push	{r7}
 800290a:	b087      	sub	sp, #28
 800290c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800290e:	2300      	movs	r3, #0
 8002910:	60fb      	str	r3, [r7, #12]
 8002912:	2300      	movs	r3, #0
 8002914:	60bb      	str	r3, [r7, #8]
 8002916:	2300      	movs	r3, #0
 8002918:	617b      	str	r3, [r7, #20]
 800291a:	2300      	movs	r3, #0
 800291c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800291e:	2300      	movs	r3, #0
 8002920:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002922:	4b1e      	ldr	r3, [pc, #120]	; (800299c <HAL_RCC_GetSysClockFreq+0x94>)
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f003 030c 	and.w	r3, r3, #12
 800292e:	2b04      	cmp	r3, #4
 8002930:	d002      	beq.n	8002938 <HAL_RCC_GetSysClockFreq+0x30>
 8002932:	2b08      	cmp	r3, #8
 8002934:	d003      	beq.n	800293e <HAL_RCC_GetSysClockFreq+0x36>
 8002936:	e027      	b.n	8002988 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002938:	4b19      	ldr	r3, [pc, #100]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800293a:	613b      	str	r3, [r7, #16]
      break;
 800293c:	e027      	b.n	800298e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	0c9b      	lsrs	r3, r3, #18
 8002942:	f003 030f 	and.w	r3, r3, #15
 8002946:	4a17      	ldr	r2, [pc, #92]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002948:	5cd3      	ldrb	r3, [r2, r3]
 800294a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d010      	beq.n	8002978 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002956:	4b11      	ldr	r3, [pc, #68]	; (800299c <HAL_RCC_GetSysClockFreq+0x94>)
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	0c5b      	lsrs	r3, r3, #17
 800295c:	f003 0301 	and.w	r3, r3, #1
 8002960:	4a11      	ldr	r2, [pc, #68]	; (80029a8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002962:	5cd3      	ldrb	r3, [r2, r3]
 8002964:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a0d      	ldr	r2, [pc, #52]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800296a:	fb03 f202 	mul.w	r2, r3, r2
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	fbb2 f3f3 	udiv	r3, r2, r3
 8002974:	617b      	str	r3, [r7, #20]
 8002976:	e004      	b.n	8002982 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4a0c      	ldr	r2, [pc, #48]	; (80029ac <HAL_RCC_GetSysClockFreq+0xa4>)
 800297c:	fb02 f303 	mul.w	r3, r2, r3
 8002980:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	613b      	str	r3, [r7, #16]
      break;
 8002986:	e002      	b.n	800298e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002988:	4b05      	ldr	r3, [pc, #20]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800298a:	613b      	str	r3, [r7, #16]
      break;
 800298c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800298e:	693b      	ldr	r3, [r7, #16]
}
 8002990:	4618      	mov	r0, r3
 8002992:	371c      	adds	r7, #28
 8002994:	46bd      	mov	sp, r7
 8002996:	bc80      	pop	{r7}
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	40021000 	.word	0x40021000
 80029a0:	007a1200 	.word	0x007a1200
 80029a4:	08003ee4 	.word	0x08003ee4
 80029a8:	08003ef4 	.word	0x08003ef4
 80029ac:	003d0900 	.word	0x003d0900

080029b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029b4:	4b02      	ldr	r3, [pc, #8]	; (80029c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80029b6:	681b      	ldr	r3, [r3, #0]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bc80      	pop	{r7}
 80029be:	4770      	bx	lr
 80029c0:	2000000c 	.word	0x2000000c

080029c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029c8:	f7ff fff2 	bl	80029b0 <HAL_RCC_GetHCLKFreq>
 80029cc:	4602      	mov	r2, r0
 80029ce:	4b05      	ldr	r3, [pc, #20]	; (80029e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	0a1b      	lsrs	r3, r3, #8
 80029d4:	f003 0307 	and.w	r3, r3, #7
 80029d8:	4903      	ldr	r1, [pc, #12]	; (80029e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029da:	5ccb      	ldrb	r3, [r1, r3]
 80029dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	40021000 	.word	0x40021000
 80029e8:	08003edc 	.word	0x08003edc

080029ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029f0:	f7ff ffde 	bl	80029b0 <HAL_RCC_GetHCLKFreq>
 80029f4:	4602      	mov	r2, r0
 80029f6:	4b05      	ldr	r3, [pc, #20]	; (8002a0c <HAL_RCC_GetPCLK2Freq+0x20>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	0adb      	lsrs	r3, r3, #11
 80029fc:	f003 0307 	and.w	r3, r3, #7
 8002a00:	4903      	ldr	r1, [pc, #12]	; (8002a10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a02:	5ccb      	ldrb	r3, [r1, r3]
 8002a04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	08003edc 	.word	0x08003edc

08002a14 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a1c:	4b0a      	ldr	r3, [pc, #40]	; (8002a48 <RCC_Delay+0x34>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a0a      	ldr	r2, [pc, #40]	; (8002a4c <RCC_Delay+0x38>)
 8002a22:	fba2 2303 	umull	r2, r3, r2, r3
 8002a26:	0a5b      	lsrs	r3, r3, #9
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	fb02 f303 	mul.w	r3, r2, r3
 8002a2e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a30:	bf00      	nop
  }
  while (Delay --);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	1e5a      	subs	r2, r3, #1
 8002a36:	60fa      	str	r2, [r7, #12]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d1f9      	bne.n	8002a30 <RCC_Delay+0x1c>
}
 8002a3c:	bf00      	nop
 8002a3e:	bf00      	nop
 8002a40:	3714      	adds	r7, #20
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bc80      	pop	{r7}
 8002a46:	4770      	bx	lr
 8002a48:	2000000c 	.word	0x2000000c
 8002a4c:	10624dd3 	.word	0x10624dd3

08002a50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e042      	b.n	8002ae8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d106      	bne.n	8002a7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f7fe fac4 	bl	8001004 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2224      	movs	r2, #36	; 0x24
 8002a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	68da      	ldr	r2, [r3, #12]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f000 f9af 	bl	8002df8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	691a      	ldr	r2, [r3, #16]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002aa8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	695a      	ldr	r2, [r3, #20]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ab8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68da      	ldr	r2, [r3, #12]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ac8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2220      	movs	r2, #32
 8002ad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2220      	movs	r2, #32
 8002adc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3708      	adds	r7, #8
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b08a      	sub	sp, #40	; 0x28
 8002af4:	af02      	add	r7, sp, #8
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	603b      	str	r3, [r7, #0]
 8002afc:	4613      	mov	r3, r2
 8002afe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b00:	2300      	movs	r3, #0
 8002b02:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	2b20      	cmp	r3, #32
 8002b0e:	d16d      	bne.n	8002bec <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d002      	beq.n	8002b1c <HAL_UART_Transmit+0x2c>
 8002b16:	88fb      	ldrh	r3, [r7, #6]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d101      	bne.n	8002b20 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e066      	b.n	8002bee <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2200      	movs	r2, #0
 8002b24:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2221      	movs	r2, #33	; 0x21
 8002b2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b2e:	f7fe fb6d 	bl	800120c <HAL_GetTick>
 8002b32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	88fa      	ldrh	r2, [r7, #6]
 8002b38:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	88fa      	ldrh	r2, [r7, #6]
 8002b3e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b48:	d108      	bne.n	8002b5c <HAL_UART_Transmit+0x6c>
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d104      	bne.n	8002b5c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002b52:	2300      	movs	r3, #0
 8002b54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	61bb      	str	r3, [r7, #24]
 8002b5a:	e003      	b.n	8002b64 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b60:	2300      	movs	r3, #0
 8002b62:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002b64:	e02a      	b.n	8002bbc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	9300      	str	r3, [sp, #0]
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	2180      	movs	r1, #128	; 0x80
 8002b70:	68f8      	ldr	r0, [r7, #12]
 8002b72:	f000 f8d2 	bl	8002d1a <UART_WaitOnFlagUntilTimeout>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d001      	beq.n	8002b80 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e036      	b.n	8002bee <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d10b      	bne.n	8002b9e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	881b      	ldrh	r3, [r3, #0]
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b94:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	3302      	adds	r3, #2
 8002b9a:	61bb      	str	r3, [r7, #24]
 8002b9c:	e007      	b.n	8002bae <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	781a      	ldrb	r2, [r3, #0]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	3301      	adds	r3, #1
 8002bac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1cf      	bne.n	8002b66 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	9300      	str	r3, [sp, #0]
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	2140      	movs	r1, #64	; 0x40
 8002bd0:	68f8      	ldr	r0, [r7, #12]
 8002bd2:	f000 f8a2 	bl	8002d1a <UART_WaitOnFlagUntilTimeout>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d001      	beq.n	8002be0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e006      	b.n	8002bee <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2220      	movs	r2, #32
 8002be4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002be8:	2300      	movs	r3, #0
 8002bea:	e000      	b.n	8002bee <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002bec:	2302      	movs	r3, #2
  }
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3720      	adds	r7, #32
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b08a      	sub	sp, #40	; 0x28
 8002bfa:	af02      	add	r7, sp, #8
 8002bfc:	60f8      	str	r0, [r7, #12]
 8002bfe:	60b9      	str	r1, [r7, #8]
 8002c00:	603b      	str	r3, [r7, #0]
 8002c02:	4613      	mov	r3, r2
 8002c04:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c06:	2300      	movs	r3, #0
 8002c08:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b20      	cmp	r3, #32
 8002c14:	d17c      	bne.n	8002d10 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d002      	beq.n	8002c22 <HAL_UART_Receive+0x2c>
 8002c1c:	88fb      	ldrh	r3, [r7, #6]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d101      	bne.n	8002c26 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e075      	b.n	8002d12 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2222      	movs	r2, #34	; 0x22
 8002c30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2200      	movs	r2, #0
 8002c38:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c3a:	f7fe fae7 	bl	800120c <HAL_GetTick>
 8002c3e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	88fa      	ldrh	r2, [r7, #6]
 8002c44:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	88fa      	ldrh	r2, [r7, #6]
 8002c4a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c54:	d108      	bne.n	8002c68 <HAL_UART_Receive+0x72>
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d104      	bne.n	8002c68 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	61bb      	str	r3, [r7, #24]
 8002c66:	e003      	b.n	8002c70 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002c70:	e043      	b.n	8002cfa <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	9300      	str	r3, [sp, #0]
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	2120      	movs	r1, #32
 8002c7c:	68f8      	ldr	r0, [r7, #12]
 8002c7e:	f000 f84c 	bl	8002d1a <UART_WaitOnFlagUntilTimeout>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d001      	beq.n	8002c8c <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e042      	b.n	8002d12 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d10c      	bne.n	8002cac <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c9e:	b29a      	uxth	r2, r3
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	3302      	adds	r3, #2
 8002ca8:	61bb      	str	r3, [r7, #24]
 8002caa:	e01f      	b.n	8002cec <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cb4:	d007      	beq.n	8002cc6 <HAL_UART_Receive+0xd0>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d10a      	bne.n	8002cd4 <HAL_UART_Receive+0xde>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d106      	bne.n	8002cd4 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	b2da      	uxtb	r2, r3
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	701a      	strb	r2, [r3, #0]
 8002cd2:	e008      	b.n	8002ce6 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ce0:	b2da      	uxtb	r2, r3
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d1b6      	bne.n	8002c72 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2220      	movs	r2, #32
 8002d08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	e000      	b.n	8002d12 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002d10:	2302      	movs	r3, #2
  }
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3720      	adds	r7, #32
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b090      	sub	sp, #64	; 0x40
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	60f8      	str	r0, [r7, #12]
 8002d22:	60b9      	str	r1, [r7, #8]
 8002d24:	603b      	str	r3, [r7, #0]
 8002d26:	4613      	mov	r3, r2
 8002d28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d2a:	e050      	b.n	8002dce <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d32:	d04c      	beq.n	8002dce <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002d34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d007      	beq.n	8002d4a <UART_WaitOnFlagUntilTimeout+0x30>
 8002d3a:	f7fe fa67 	bl	800120c <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d241      	bcs.n	8002dce <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	330c      	adds	r3, #12
 8002d50:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d54:	e853 3f00 	ldrex	r3, [r3]
 8002d58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002d60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	330c      	adds	r3, #12
 8002d68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d6a:	637a      	str	r2, [r7, #52]	; 0x34
 8002d6c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d6e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d72:	e841 2300 	strex	r3, r2, [r1]
 8002d76:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d1e5      	bne.n	8002d4a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	3314      	adds	r3, #20
 8002d84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	e853 3f00 	ldrex	r3, [r3]
 8002d8c:	613b      	str	r3, [r7, #16]
   return(result);
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	f023 0301 	bic.w	r3, r3, #1
 8002d94:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	3314      	adds	r3, #20
 8002d9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d9e:	623a      	str	r2, [r7, #32]
 8002da0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002da2:	69f9      	ldr	r1, [r7, #28]
 8002da4:	6a3a      	ldr	r2, [r7, #32]
 8002da6:	e841 2300 	strex	r3, r2, [r1]
 8002daa:	61bb      	str	r3, [r7, #24]
   return(result);
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1e5      	bne.n	8002d7e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2220      	movs	r2, #32
 8002db6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2220      	movs	r2, #32
 8002dbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e00f      	b.n	8002dee <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	68ba      	ldr	r2, [r7, #8]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	bf0c      	ite	eq
 8002dde:	2301      	moveq	r3, #1
 8002de0:	2300      	movne	r3, #0
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	461a      	mov	r2, r3
 8002de6:	79fb      	ldrb	r3, [r7, #7]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d09f      	beq.n	8002d2c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3740      	adds	r7, #64	; 0x40
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
	...

08002df8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	68da      	ldr	r2, [r3, #12]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	430a      	orrs	r2, r1
 8002e14:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	689a      	ldr	r2, [r3, #8]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	431a      	orrs	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	695b      	ldr	r3, [r3, #20]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002e32:	f023 030c 	bic.w	r3, r3, #12
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	6812      	ldr	r2, [r2, #0]
 8002e3a:	68b9      	ldr	r1, [r7, #8]
 8002e3c:	430b      	orrs	r3, r1
 8002e3e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	699a      	ldr	r2, [r3, #24]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	430a      	orrs	r2, r1
 8002e54:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a2c      	ldr	r2, [pc, #176]	; (8002f0c <UART_SetConfig+0x114>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d103      	bne.n	8002e68 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002e60:	f7ff fdc4 	bl	80029ec <HAL_RCC_GetPCLK2Freq>
 8002e64:	60f8      	str	r0, [r7, #12]
 8002e66:	e002      	b.n	8002e6e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002e68:	f7ff fdac 	bl	80029c4 <HAL_RCC_GetPCLK1Freq>
 8002e6c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	4613      	mov	r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	4413      	add	r3, r2
 8002e76:	009a      	lsls	r2, r3, #2
 8002e78:	441a      	add	r2, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e84:	4a22      	ldr	r2, [pc, #136]	; (8002f10 <UART_SetConfig+0x118>)
 8002e86:	fba2 2303 	umull	r2, r3, r2, r3
 8002e8a:	095b      	lsrs	r3, r3, #5
 8002e8c:	0119      	lsls	r1, r3, #4
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	4613      	mov	r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	4413      	add	r3, r2
 8002e96:	009a      	lsls	r2, r3, #2
 8002e98:	441a      	add	r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ea4:	4b1a      	ldr	r3, [pc, #104]	; (8002f10 <UART_SetConfig+0x118>)
 8002ea6:	fba3 0302 	umull	r0, r3, r3, r2
 8002eaa:	095b      	lsrs	r3, r3, #5
 8002eac:	2064      	movs	r0, #100	; 0x64
 8002eae:	fb00 f303 	mul.w	r3, r0, r3
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	011b      	lsls	r3, r3, #4
 8002eb6:	3332      	adds	r3, #50	; 0x32
 8002eb8:	4a15      	ldr	r2, [pc, #84]	; (8002f10 <UART_SetConfig+0x118>)
 8002eba:	fba2 2303 	umull	r2, r3, r2, r3
 8002ebe:	095b      	lsrs	r3, r3, #5
 8002ec0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ec4:	4419      	add	r1, r3
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	4413      	add	r3, r2
 8002ece:	009a      	lsls	r2, r3, #2
 8002ed0:	441a      	add	r2, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002edc:	4b0c      	ldr	r3, [pc, #48]	; (8002f10 <UART_SetConfig+0x118>)
 8002ede:	fba3 0302 	umull	r0, r3, r3, r2
 8002ee2:	095b      	lsrs	r3, r3, #5
 8002ee4:	2064      	movs	r0, #100	; 0x64
 8002ee6:	fb00 f303 	mul.w	r3, r0, r3
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	011b      	lsls	r3, r3, #4
 8002eee:	3332      	adds	r3, #50	; 0x32
 8002ef0:	4a07      	ldr	r2, [pc, #28]	; (8002f10 <UART_SetConfig+0x118>)
 8002ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef6:	095b      	lsrs	r3, r3, #5
 8002ef8:	f003 020f 	and.w	r2, r3, #15
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	440a      	add	r2, r1
 8002f02:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002f04:	bf00      	nop
 8002f06:	3710      	adds	r7, #16
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	40013800 	.word	0x40013800
 8002f10:	51eb851f 	.word	0x51eb851f

08002f14 <_vsiprintf_r>:
 8002f14:	b500      	push	{lr}
 8002f16:	b09b      	sub	sp, #108	; 0x6c
 8002f18:	9100      	str	r1, [sp, #0]
 8002f1a:	9104      	str	r1, [sp, #16]
 8002f1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002f20:	9105      	str	r1, [sp, #20]
 8002f22:	9102      	str	r1, [sp, #8]
 8002f24:	4905      	ldr	r1, [pc, #20]	; (8002f3c <_vsiprintf_r+0x28>)
 8002f26:	9103      	str	r1, [sp, #12]
 8002f28:	4669      	mov	r1, sp
 8002f2a:	f000 f995 	bl	8003258 <_svfiprintf_r>
 8002f2e:	2200      	movs	r2, #0
 8002f30:	9b00      	ldr	r3, [sp, #0]
 8002f32:	701a      	strb	r2, [r3, #0]
 8002f34:	b01b      	add	sp, #108	; 0x6c
 8002f36:	f85d fb04 	ldr.w	pc, [sp], #4
 8002f3a:	bf00      	nop
 8002f3c:	ffff0208 	.word	0xffff0208

08002f40 <vsiprintf>:
 8002f40:	4613      	mov	r3, r2
 8002f42:	460a      	mov	r2, r1
 8002f44:	4601      	mov	r1, r0
 8002f46:	4802      	ldr	r0, [pc, #8]	; (8002f50 <vsiprintf+0x10>)
 8002f48:	6800      	ldr	r0, [r0, #0]
 8002f4a:	f7ff bfe3 	b.w	8002f14 <_vsiprintf_r>
 8002f4e:	bf00      	nop
 8002f50:	20000064 	.word	0x20000064

08002f54 <memset>:
 8002f54:	4603      	mov	r3, r0
 8002f56:	4402      	add	r2, r0
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d100      	bne.n	8002f5e <memset+0xa>
 8002f5c:	4770      	bx	lr
 8002f5e:	f803 1b01 	strb.w	r1, [r3], #1
 8002f62:	e7f9      	b.n	8002f58 <memset+0x4>

08002f64 <__errno>:
 8002f64:	4b01      	ldr	r3, [pc, #4]	; (8002f6c <__errno+0x8>)
 8002f66:	6818      	ldr	r0, [r3, #0]
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	20000064 	.word	0x20000064

08002f70 <__libc_init_array>:
 8002f70:	b570      	push	{r4, r5, r6, lr}
 8002f72:	2600      	movs	r6, #0
 8002f74:	4d0c      	ldr	r5, [pc, #48]	; (8002fa8 <__libc_init_array+0x38>)
 8002f76:	4c0d      	ldr	r4, [pc, #52]	; (8002fac <__libc_init_array+0x3c>)
 8002f78:	1b64      	subs	r4, r4, r5
 8002f7a:	10a4      	asrs	r4, r4, #2
 8002f7c:	42a6      	cmp	r6, r4
 8002f7e:	d109      	bne.n	8002f94 <__libc_init_array+0x24>
 8002f80:	f000 fc7a 	bl	8003878 <_init>
 8002f84:	2600      	movs	r6, #0
 8002f86:	4d0a      	ldr	r5, [pc, #40]	; (8002fb0 <__libc_init_array+0x40>)
 8002f88:	4c0a      	ldr	r4, [pc, #40]	; (8002fb4 <__libc_init_array+0x44>)
 8002f8a:	1b64      	subs	r4, r4, r5
 8002f8c:	10a4      	asrs	r4, r4, #2
 8002f8e:	42a6      	cmp	r6, r4
 8002f90:	d105      	bne.n	8002f9e <__libc_init_array+0x2e>
 8002f92:	bd70      	pop	{r4, r5, r6, pc}
 8002f94:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f98:	4798      	blx	r3
 8002f9a:	3601      	adds	r6, #1
 8002f9c:	e7ee      	b.n	8002f7c <__libc_init_array+0xc>
 8002f9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fa2:	4798      	blx	r3
 8002fa4:	3601      	adds	r6, #1
 8002fa6:	e7f2      	b.n	8002f8e <__libc_init_array+0x1e>
 8002fa8:	08003f2c 	.word	0x08003f2c
 8002fac:	08003f2c 	.word	0x08003f2c
 8002fb0:	08003f2c 	.word	0x08003f2c
 8002fb4:	08003f30 	.word	0x08003f30

08002fb8 <__retarget_lock_acquire_recursive>:
 8002fb8:	4770      	bx	lr

08002fba <__retarget_lock_release_recursive>:
 8002fba:	4770      	bx	lr

08002fbc <_free_r>:
 8002fbc:	b538      	push	{r3, r4, r5, lr}
 8002fbe:	4605      	mov	r5, r0
 8002fc0:	2900      	cmp	r1, #0
 8002fc2:	d040      	beq.n	8003046 <_free_r+0x8a>
 8002fc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fc8:	1f0c      	subs	r4, r1, #4
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	bfb8      	it	lt
 8002fce:	18e4      	addlt	r4, r4, r3
 8002fd0:	f000 f8dc 	bl	800318c <__malloc_lock>
 8002fd4:	4a1c      	ldr	r2, [pc, #112]	; (8003048 <_free_r+0x8c>)
 8002fd6:	6813      	ldr	r3, [r2, #0]
 8002fd8:	b933      	cbnz	r3, 8002fe8 <_free_r+0x2c>
 8002fda:	6063      	str	r3, [r4, #4]
 8002fdc:	6014      	str	r4, [r2, #0]
 8002fde:	4628      	mov	r0, r5
 8002fe0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002fe4:	f000 b8d8 	b.w	8003198 <__malloc_unlock>
 8002fe8:	42a3      	cmp	r3, r4
 8002fea:	d908      	bls.n	8002ffe <_free_r+0x42>
 8002fec:	6820      	ldr	r0, [r4, #0]
 8002fee:	1821      	adds	r1, r4, r0
 8002ff0:	428b      	cmp	r3, r1
 8002ff2:	bf01      	itttt	eq
 8002ff4:	6819      	ldreq	r1, [r3, #0]
 8002ff6:	685b      	ldreq	r3, [r3, #4]
 8002ff8:	1809      	addeq	r1, r1, r0
 8002ffa:	6021      	streq	r1, [r4, #0]
 8002ffc:	e7ed      	b.n	8002fda <_free_r+0x1e>
 8002ffe:	461a      	mov	r2, r3
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	b10b      	cbz	r3, 8003008 <_free_r+0x4c>
 8003004:	42a3      	cmp	r3, r4
 8003006:	d9fa      	bls.n	8002ffe <_free_r+0x42>
 8003008:	6811      	ldr	r1, [r2, #0]
 800300a:	1850      	adds	r0, r2, r1
 800300c:	42a0      	cmp	r0, r4
 800300e:	d10b      	bne.n	8003028 <_free_r+0x6c>
 8003010:	6820      	ldr	r0, [r4, #0]
 8003012:	4401      	add	r1, r0
 8003014:	1850      	adds	r0, r2, r1
 8003016:	4283      	cmp	r3, r0
 8003018:	6011      	str	r1, [r2, #0]
 800301a:	d1e0      	bne.n	8002fde <_free_r+0x22>
 800301c:	6818      	ldr	r0, [r3, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	4408      	add	r0, r1
 8003022:	6010      	str	r0, [r2, #0]
 8003024:	6053      	str	r3, [r2, #4]
 8003026:	e7da      	b.n	8002fde <_free_r+0x22>
 8003028:	d902      	bls.n	8003030 <_free_r+0x74>
 800302a:	230c      	movs	r3, #12
 800302c:	602b      	str	r3, [r5, #0]
 800302e:	e7d6      	b.n	8002fde <_free_r+0x22>
 8003030:	6820      	ldr	r0, [r4, #0]
 8003032:	1821      	adds	r1, r4, r0
 8003034:	428b      	cmp	r3, r1
 8003036:	bf01      	itttt	eq
 8003038:	6819      	ldreq	r1, [r3, #0]
 800303a:	685b      	ldreq	r3, [r3, #4]
 800303c:	1809      	addeq	r1, r1, r0
 800303e:	6021      	streq	r1, [r4, #0]
 8003040:	6063      	str	r3, [r4, #4]
 8003042:	6054      	str	r4, [r2, #4]
 8003044:	e7cb      	b.n	8002fde <_free_r+0x22>
 8003046:	bd38      	pop	{r3, r4, r5, pc}
 8003048:	20000350 	.word	0x20000350

0800304c <sbrk_aligned>:
 800304c:	b570      	push	{r4, r5, r6, lr}
 800304e:	4e0e      	ldr	r6, [pc, #56]	; (8003088 <sbrk_aligned+0x3c>)
 8003050:	460c      	mov	r4, r1
 8003052:	6831      	ldr	r1, [r6, #0]
 8003054:	4605      	mov	r5, r0
 8003056:	b911      	cbnz	r1, 800305e <sbrk_aligned+0x12>
 8003058:	f000 fbaa 	bl	80037b0 <_sbrk_r>
 800305c:	6030      	str	r0, [r6, #0]
 800305e:	4621      	mov	r1, r4
 8003060:	4628      	mov	r0, r5
 8003062:	f000 fba5 	bl	80037b0 <_sbrk_r>
 8003066:	1c43      	adds	r3, r0, #1
 8003068:	d00a      	beq.n	8003080 <sbrk_aligned+0x34>
 800306a:	1cc4      	adds	r4, r0, #3
 800306c:	f024 0403 	bic.w	r4, r4, #3
 8003070:	42a0      	cmp	r0, r4
 8003072:	d007      	beq.n	8003084 <sbrk_aligned+0x38>
 8003074:	1a21      	subs	r1, r4, r0
 8003076:	4628      	mov	r0, r5
 8003078:	f000 fb9a 	bl	80037b0 <_sbrk_r>
 800307c:	3001      	adds	r0, #1
 800307e:	d101      	bne.n	8003084 <sbrk_aligned+0x38>
 8003080:	f04f 34ff 	mov.w	r4, #4294967295
 8003084:	4620      	mov	r0, r4
 8003086:	bd70      	pop	{r4, r5, r6, pc}
 8003088:	20000354 	.word	0x20000354

0800308c <_malloc_r>:
 800308c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003090:	1ccd      	adds	r5, r1, #3
 8003092:	f025 0503 	bic.w	r5, r5, #3
 8003096:	3508      	adds	r5, #8
 8003098:	2d0c      	cmp	r5, #12
 800309a:	bf38      	it	cc
 800309c:	250c      	movcc	r5, #12
 800309e:	2d00      	cmp	r5, #0
 80030a0:	4607      	mov	r7, r0
 80030a2:	db01      	blt.n	80030a8 <_malloc_r+0x1c>
 80030a4:	42a9      	cmp	r1, r5
 80030a6:	d905      	bls.n	80030b4 <_malloc_r+0x28>
 80030a8:	230c      	movs	r3, #12
 80030aa:	2600      	movs	r6, #0
 80030ac:	603b      	str	r3, [r7, #0]
 80030ae:	4630      	mov	r0, r6
 80030b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80030b4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003188 <_malloc_r+0xfc>
 80030b8:	f000 f868 	bl	800318c <__malloc_lock>
 80030bc:	f8d8 3000 	ldr.w	r3, [r8]
 80030c0:	461c      	mov	r4, r3
 80030c2:	bb5c      	cbnz	r4, 800311c <_malloc_r+0x90>
 80030c4:	4629      	mov	r1, r5
 80030c6:	4638      	mov	r0, r7
 80030c8:	f7ff ffc0 	bl	800304c <sbrk_aligned>
 80030cc:	1c43      	adds	r3, r0, #1
 80030ce:	4604      	mov	r4, r0
 80030d0:	d155      	bne.n	800317e <_malloc_r+0xf2>
 80030d2:	f8d8 4000 	ldr.w	r4, [r8]
 80030d6:	4626      	mov	r6, r4
 80030d8:	2e00      	cmp	r6, #0
 80030da:	d145      	bne.n	8003168 <_malloc_r+0xdc>
 80030dc:	2c00      	cmp	r4, #0
 80030de:	d048      	beq.n	8003172 <_malloc_r+0xe6>
 80030e0:	6823      	ldr	r3, [r4, #0]
 80030e2:	4631      	mov	r1, r6
 80030e4:	4638      	mov	r0, r7
 80030e6:	eb04 0903 	add.w	r9, r4, r3
 80030ea:	f000 fb61 	bl	80037b0 <_sbrk_r>
 80030ee:	4581      	cmp	r9, r0
 80030f0:	d13f      	bne.n	8003172 <_malloc_r+0xe6>
 80030f2:	6821      	ldr	r1, [r4, #0]
 80030f4:	4638      	mov	r0, r7
 80030f6:	1a6d      	subs	r5, r5, r1
 80030f8:	4629      	mov	r1, r5
 80030fa:	f7ff ffa7 	bl	800304c <sbrk_aligned>
 80030fe:	3001      	adds	r0, #1
 8003100:	d037      	beq.n	8003172 <_malloc_r+0xe6>
 8003102:	6823      	ldr	r3, [r4, #0]
 8003104:	442b      	add	r3, r5
 8003106:	6023      	str	r3, [r4, #0]
 8003108:	f8d8 3000 	ldr.w	r3, [r8]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d038      	beq.n	8003182 <_malloc_r+0xf6>
 8003110:	685a      	ldr	r2, [r3, #4]
 8003112:	42a2      	cmp	r2, r4
 8003114:	d12b      	bne.n	800316e <_malloc_r+0xe2>
 8003116:	2200      	movs	r2, #0
 8003118:	605a      	str	r2, [r3, #4]
 800311a:	e00f      	b.n	800313c <_malloc_r+0xb0>
 800311c:	6822      	ldr	r2, [r4, #0]
 800311e:	1b52      	subs	r2, r2, r5
 8003120:	d41f      	bmi.n	8003162 <_malloc_r+0xd6>
 8003122:	2a0b      	cmp	r2, #11
 8003124:	d917      	bls.n	8003156 <_malloc_r+0xca>
 8003126:	1961      	adds	r1, r4, r5
 8003128:	42a3      	cmp	r3, r4
 800312a:	6025      	str	r5, [r4, #0]
 800312c:	bf18      	it	ne
 800312e:	6059      	strne	r1, [r3, #4]
 8003130:	6863      	ldr	r3, [r4, #4]
 8003132:	bf08      	it	eq
 8003134:	f8c8 1000 	streq.w	r1, [r8]
 8003138:	5162      	str	r2, [r4, r5]
 800313a:	604b      	str	r3, [r1, #4]
 800313c:	4638      	mov	r0, r7
 800313e:	f104 060b 	add.w	r6, r4, #11
 8003142:	f000 f829 	bl	8003198 <__malloc_unlock>
 8003146:	f026 0607 	bic.w	r6, r6, #7
 800314a:	1d23      	adds	r3, r4, #4
 800314c:	1af2      	subs	r2, r6, r3
 800314e:	d0ae      	beq.n	80030ae <_malloc_r+0x22>
 8003150:	1b9b      	subs	r3, r3, r6
 8003152:	50a3      	str	r3, [r4, r2]
 8003154:	e7ab      	b.n	80030ae <_malloc_r+0x22>
 8003156:	42a3      	cmp	r3, r4
 8003158:	6862      	ldr	r2, [r4, #4]
 800315a:	d1dd      	bne.n	8003118 <_malloc_r+0x8c>
 800315c:	f8c8 2000 	str.w	r2, [r8]
 8003160:	e7ec      	b.n	800313c <_malloc_r+0xb0>
 8003162:	4623      	mov	r3, r4
 8003164:	6864      	ldr	r4, [r4, #4]
 8003166:	e7ac      	b.n	80030c2 <_malloc_r+0x36>
 8003168:	4634      	mov	r4, r6
 800316a:	6876      	ldr	r6, [r6, #4]
 800316c:	e7b4      	b.n	80030d8 <_malloc_r+0x4c>
 800316e:	4613      	mov	r3, r2
 8003170:	e7cc      	b.n	800310c <_malloc_r+0x80>
 8003172:	230c      	movs	r3, #12
 8003174:	4638      	mov	r0, r7
 8003176:	603b      	str	r3, [r7, #0]
 8003178:	f000 f80e 	bl	8003198 <__malloc_unlock>
 800317c:	e797      	b.n	80030ae <_malloc_r+0x22>
 800317e:	6025      	str	r5, [r4, #0]
 8003180:	e7dc      	b.n	800313c <_malloc_r+0xb0>
 8003182:	605b      	str	r3, [r3, #4]
 8003184:	deff      	udf	#255	; 0xff
 8003186:	bf00      	nop
 8003188:	20000350 	.word	0x20000350

0800318c <__malloc_lock>:
 800318c:	4801      	ldr	r0, [pc, #4]	; (8003194 <__malloc_lock+0x8>)
 800318e:	f7ff bf13 	b.w	8002fb8 <__retarget_lock_acquire_recursive>
 8003192:	bf00      	nop
 8003194:	2000034c 	.word	0x2000034c

08003198 <__malloc_unlock>:
 8003198:	4801      	ldr	r0, [pc, #4]	; (80031a0 <__malloc_unlock+0x8>)
 800319a:	f7ff bf0e 	b.w	8002fba <__retarget_lock_release_recursive>
 800319e:	bf00      	nop
 80031a0:	2000034c 	.word	0x2000034c

080031a4 <__ssputs_r>:
 80031a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031a8:	461f      	mov	r7, r3
 80031aa:	688e      	ldr	r6, [r1, #8]
 80031ac:	4682      	mov	sl, r0
 80031ae:	42be      	cmp	r6, r7
 80031b0:	460c      	mov	r4, r1
 80031b2:	4690      	mov	r8, r2
 80031b4:	680b      	ldr	r3, [r1, #0]
 80031b6:	d82c      	bhi.n	8003212 <__ssputs_r+0x6e>
 80031b8:	898a      	ldrh	r2, [r1, #12]
 80031ba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80031be:	d026      	beq.n	800320e <__ssputs_r+0x6a>
 80031c0:	6965      	ldr	r5, [r4, #20]
 80031c2:	6909      	ldr	r1, [r1, #16]
 80031c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80031c8:	eba3 0901 	sub.w	r9, r3, r1
 80031cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80031d0:	1c7b      	adds	r3, r7, #1
 80031d2:	444b      	add	r3, r9
 80031d4:	106d      	asrs	r5, r5, #1
 80031d6:	429d      	cmp	r5, r3
 80031d8:	bf38      	it	cc
 80031da:	461d      	movcc	r5, r3
 80031dc:	0553      	lsls	r3, r2, #21
 80031de:	d527      	bpl.n	8003230 <__ssputs_r+0x8c>
 80031e0:	4629      	mov	r1, r5
 80031e2:	f7ff ff53 	bl	800308c <_malloc_r>
 80031e6:	4606      	mov	r6, r0
 80031e8:	b360      	cbz	r0, 8003244 <__ssputs_r+0xa0>
 80031ea:	464a      	mov	r2, r9
 80031ec:	6921      	ldr	r1, [r4, #16]
 80031ee:	f000 fafd 	bl	80037ec <memcpy>
 80031f2:	89a3      	ldrh	r3, [r4, #12]
 80031f4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80031f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031fc:	81a3      	strh	r3, [r4, #12]
 80031fe:	6126      	str	r6, [r4, #16]
 8003200:	444e      	add	r6, r9
 8003202:	6026      	str	r6, [r4, #0]
 8003204:	463e      	mov	r6, r7
 8003206:	6165      	str	r5, [r4, #20]
 8003208:	eba5 0509 	sub.w	r5, r5, r9
 800320c:	60a5      	str	r5, [r4, #8]
 800320e:	42be      	cmp	r6, r7
 8003210:	d900      	bls.n	8003214 <__ssputs_r+0x70>
 8003212:	463e      	mov	r6, r7
 8003214:	4632      	mov	r2, r6
 8003216:	4641      	mov	r1, r8
 8003218:	6820      	ldr	r0, [r4, #0]
 800321a:	f000 faaf 	bl	800377c <memmove>
 800321e:	2000      	movs	r0, #0
 8003220:	68a3      	ldr	r3, [r4, #8]
 8003222:	1b9b      	subs	r3, r3, r6
 8003224:	60a3      	str	r3, [r4, #8]
 8003226:	6823      	ldr	r3, [r4, #0]
 8003228:	4433      	add	r3, r6
 800322a:	6023      	str	r3, [r4, #0]
 800322c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003230:	462a      	mov	r2, r5
 8003232:	f000 fae9 	bl	8003808 <_realloc_r>
 8003236:	4606      	mov	r6, r0
 8003238:	2800      	cmp	r0, #0
 800323a:	d1e0      	bne.n	80031fe <__ssputs_r+0x5a>
 800323c:	4650      	mov	r0, sl
 800323e:	6921      	ldr	r1, [r4, #16]
 8003240:	f7ff febc 	bl	8002fbc <_free_r>
 8003244:	230c      	movs	r3, #12
 8003246:	f8ca 3000 	str.w	r3, [sl]
 800324a:	89a3      	ldrh	r3, [r4, #12]
 800324c:	f04f 30ff 	mov.w	r0, #4294967295
 8003250:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003254:	81a3      	strh	r3, [r4, #12]
 8003256:	e7e9      	b.n	800322c <__ssputs_r+0x88>

08003258 <_svfiprintf_r>:
 8003258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800325c:	4698      	mov	r8, r3
 800325e:	898b      	ldrh	r3, [r1, #12]
 8003260:	4607      	mov	r7, r0
 8003262:	061b      	lsls	r3, r3, #24
 8003264:	460d      	mov	r5, r1
 8003266:	4614      	mov	r4, r2
 8003268:	b09d      	sub	sp, #116	; 0x74
 800326a:	d50e      	bpl.n	800328a <_svfiprintf_r+0x32>
 800326c:	690b      	ldr	r3, [r1, #16]
 800326e:	b963      	cbnz	r3, 800328a <_svfiprintf_r+0x32>
 8003270:	2140      	movs	r1, #64	; 0x40
 8003272:	f7ff ff0b 	bl	800308c <_malloc_r>
 8003276:	6028      	str	r0, [r5, #0]
 8003278:	6128      	str	r0, [r5, #16]
 800327a:	b920      	cbnz	r0, 8003286 <_svfiprintf_r+0x2e>
 800327c:	230c      	movs	r3, #12
 800327e:	603b      	str	r3, [r7, #0]
 8003280:	f04f 30ff 	mov.w	r0, #4294967295
 8003284:	e0d0      	b.n	8003428 <_svfiprintf_r+0x1d0>
 8003286:	2340      	movs	r3, #64	; 0x40
 8003288:	616b      	str	r3, [r5, #20]
 800328a:	2300      	movs	r3, #0
 800328c:	9309      	str	r3, [sp, #36]	; 0x24
 800328e:	2320      	movs	r3, #32
 8003290:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003294:	2330      	movs	r3, #48	; 0x30
 8003296:	f04f 0901 	mov.w	r9, #1
 800329a:	f8cd 800c 	str.w	r8, [sp, #12]
 800329e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8003440 <_svfiprintf_r+0x1e8>
 80032a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80032a6:	4623      	mov	r3, r4
 80032a8:	469a      	mov	sl, r3
 80032aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80032ae:	b10a      	cbz	r2, 80032b4 <_svfiprintf_r+0x5c>
 80032b0:	2a25      	cmp	r2, #37	; 0x25
 80032b2:	d1f9      	bne.n	80032a8 <_svfiprintf_r+0x50>
 80032b4:	ebba 0b04 	subs.w	fp, sl, r4
 80032b8:	d00b      	beq.n	80032d2 <_svfiprintf_r+0x7a>
 80032ba:	465b      	mov	r3, fp
 80032bc:	4622      	mov	r2, r4
 80032be:	4629      	mov	r1, r5
 80032c0:	4638      	mov	r0, r7
 80032c2:	f7ff ff6f 	bl	80031a4 <__ssputs_r>
 80032c6:	3001      	adds	r0, #1
 80032c8:	f000 80a9 	beq.w	800341e <_svfiprintf_r+0x1c6>
 80032cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80032ce:	445a      	add	r2, fp
 80032d0:	9209      	str	r2, [sp, #36]	; 0x24
 80032d2:	f89a 3000 	ldrb.w	r3, [sl]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	f000 80a1 	beq.w	800341e <_svfiprintf_r+0x1c6>
 80032dc:	2300      	movs	r3, #0
 80032de:	f04f 32ff 	mov.w	r2, #4294967295
 80032e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80032e6:	f10a 0a01 	add.w	sl, sl, #1
 80032ea:	9304      	str	r3, [sp, #16]
 80032ec:	9307      	str	r3, [sp, #28]
 80032ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80032f2:	931a      	str	r3, [sp, #104]	; 0x68
 80032f4:	4654      	mov	r4, sl
 80032f6:	2205      	movs	r2, #5
 80032f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032fc:	4850      	ldr	r0, [pc, #320]	; (8003440 <_svfiprintf_r+0x1e8>)
 80032fe:	f000 fa67 	bl	80037d0 <memchr>
 8003302:	9a04      	ldr	r2, [sp, #16]
 8003304:	b9d8      	cbnz	r0, 800333e <_svfiprintf_r+0xe6>
 8003306:	06d0      	lsls	r0, r2, #27
 8003308:	bf44      	itt	mi
 800330a:	2320      	movmi	r3, #32
 800330c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003310:	0711      	lsls	r1, r2, #28
 8003312:	bf44      	itt	mi
 8003314:	232b      	movmi	r3, #43	; 0x2b
 8003316:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800331a:	f89a 3000 	ldrb.w	r3, [sl]
 800331e:	2b2a      	cmp	r3, #42	; 0x2a
 8003320:	d015      	beq.n	800334e <_svfiprintf_r+0xf6>
 8003322:	4654      	mov	r4, sl
 8003324:	2000      	movs	r0, #0
 8003326:	f04f 0c0a 	mov.w	ip, #10
 800332a:	9a07      	ldr	r2, [sp, #28]
 800332c:	4621      	mov	r1, r4
 800332e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003332:	3b30      	subs	r3, #48	; 0x30
 8003334:	2b09      	cmp	r3, #9
 8003336:	d94d      	bls.n	80033d4 <_svfiprintf_r+0x17c>
 8003338:	b1b0      	cbz	r0, 8003368 <_svfiprintf_r+0x110>
 800333a:	9207      	str	r2, [sp, #28]
 800333c:	e014      	b.n	8003368 <_svfiprintf_r+0x110>
 800333e:	eba0 0308 	sub.w	r3, r0, r8
 8003342:	fa09 f303 	lsl.w	r3, r9, r3
 8003346:	4313      	orrs	r3, r2
 8003348:	46a2      	mov	sl, r4
 800334a:	9304      	str	r3, [sp, #16]
 800334c:	e7d2      	b.n	80032f4 <_svfiprintf_r+0x9c>
 800334e:	9b03      	ldr	r3, [sp, #12]
 8003350:	1d19      	adds	r1, r3, #4
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	9103      	str	r1, [sp, #12]
 8003356:	2b00      	cmp	r3, #0
 8003358:	bfbb      	ittet	lt
 800335a:	425b      	neglt	r3, r3
 800335c:	f042 0202 	orrlt.w	r2, r2, #2
 8003360:	9307      	strge	r3, [sp, #28]
 8003362:	9307      	strlt	r3, [sp, #28]
 8003364:	bfb8      	it	lt
 8003366:	9204      	strlt	r2, [sp, #16]
 8003368:	7823      	ldrb	r3, [r4, #0]
 800336a:	2b2e      	cmp	r3, #46	; 0x2e
 800336c:	d10c      	bne.n	8003388 <_svfiprintf_r+0x130>
 800336e:	7863      	ldrb	r3, [r4, #1]
 8003370:	2b2a      	cmp	r3, #42	; 0x2a
 8003372:	d134      	bne.n	80033de <_svfiprintf_r+0x186>
 8003374:	9b03      	ldr	r3, [sp, #12]
 8003376:	3402      	adds	r4, #2
 8003378:	1d1a      	adds	r2, r3, #4
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	9203      	str	r2, [sp, #12]
 800337e:	2b00      	cmp	r3, #0
 8003380:	bfb8      	it	lt
 8003382:	f04f 33ff 	movlt.w	r3, #4294967295
 8003386:	9305      	str	r3, [sp, #20]
 8003388:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8003444 <_svfiprintf_r+0x1ec>
 800338c:	2203      	movs	r2, #3
 800338e:	4650      	mov	r0, sl
 8003390:	7821      	ldrb	r1, [r4, #0]
 8003392:	f000 fa1d 	bl	80037d0 <memchr>
 8003396:	b138      	cbz	r0, 80033a8 <_svfiprintf_r+0x150>
 8003398:	2240      	movs	r2, #64	; 0x40
 800339a:	9b04      	ldr	r3, [sp, #16]
 800339c:	eba0 000a 	sub.w	r0, r0, sl
 80033a0:	4082      	lsls	r2, r0
 80033a2:	4313      	orrs	r3, r2
 80033a4:	3401      	adds	r4, #1
 80033a6:	9304      	str	r3, [sp, #16]
 80033a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033ac:	2206      	movs	r2, #6
 80033ae:	4826      	ldr	r0, [pc, #152]	; (8003448 <_svfiprintf_r+0x1f0>)
 80033b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80033b4:	f000 fa0c 	bl	80037d0 <memchr>
 80033b8:	2800      	cmp	r0, #0
 80033ba:	d038      	beq.n	800342e <_svfiprintf_r+0x1d6>
 80033bc:	4b23      	ldr	r3, [pc, #140]	; (800344c <_svfiprintf_r+0x1f4>)
 80033be:	bb1b      	cbnz	r3, 8003408 <_svfiprintf_r+0x1b0>
 80033c0:	9b03      	ldr	r3, [sp, #12]
 80033c2:	3307      	adds	r3, #7
 80033c4:	f023 0307 	bic.w	r3, r3, #7
 80033c8:	3308      	adds	r3, #8
 80033ca:	9303      	str	r3, [sp, #12]
 80033cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033ce:	4433      	add	r3, r6
 80033d0:	9309      	str	r3, [sp, #36]	; 0x24
 80033d2:	e768      	b.n	80032a6 <_svfiprintf_r+0x4e>
 80033d4:	460c      	mov	r4, r1
 80033d6:	2001      	movs	r0, #1
 80033d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80033dc:	e7a6      	b.n	800332c <_svfiprintf_r+0xd4>
 80033de:	2300      	movs	r3, #0
 80033e0:	f04f 0c0a 	mov.w	ip, #10
 80033e4:	4619      	mov	r1, r3
 80033e6:	3401      	adds	r4, #1
 80033e8:	9305      	str	r3, [sp, #20]
 80033ea:	4620      	mov	r0, r4
 80033ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80033f0:	3a30      	subs	r2, #48	; 0x30
 80033f2:	2a09      	cmp	r2, #9
 80033f4:	d903      	bls.n	80033fe <_svfiprintf_r+0x1a6>
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d0c6      	beq.n	8003388 <_svfiprintf_r+0x130>
 80033fa:	9105      	str	r1, [sp, #20]
 80033fc:	e7c4      	b.n	8003388 <_svfiprintf_r+0x130>
 80033fe:	4604      	mov	r4, r0
 8003400:	2301      	movs	r3, #1
 8003402:	fb0c 2101 	mla	r1, ip, r1, r2
 8003406:	e7f0      	b.n	80033ea <_svfiprintf_r+0x192>
 8003408:	ab03      	add	r3, sp, #12
 800340a:	9300      	str	r3, [sp, #0]
 800340c:	462a      	mov	r2, r5
 800340e:	4638      	mov	r0, r7
 8003410:	4b0f      	ldr	r3, [pc, #60]	; (8003450 <_svfiprintf_r+0x1f8>)
 8003412:	a904      	add	r1, sp, #16
 8003414:	f3af 8000 	nop.w
 8003418:	1c42      	adds	r2, r0, #1
 800341a:	4606      	mov	r6, r0
 800341c:	d1d6      	bne.n	80033cc <_svfiprintf_r+0x174>
 800341e:	89ab      	ldrh	r3, [r5, #12]
 8003420:	065b      	lsls	r3, r3, #25
 8003422:	f53f af2d 	bmi.w	8003280 <_svfiprintf_r+0x28>
 8003426:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003428:	b01d      	add	sp, #116	; 0x74
 800342a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800342e:	ab03      	add	r3, sp, #12
 8003430:	9300      	str	r3, [sp, #0]
 8003432:	462a      	mov	r2, r5
 8003434:	4638      	mov	r0, r7
 8003436:	4b06      	ldr	r3, [pc, #24]	; (8003450 <_svfiprintf_r+0x1f8>)
 8003438:	a904      	add	r1, sp, #16
 800343a:	f000 f87d 	bl	8003538 <_printf_i>
 800343e:	e7eb      	b.n	8003418 <_svfiprintf_r+0x1c0>
 8003440:	08003ef6 	.word	0x08003ef6
 8003444:	08003efc 	.word	0x08003efc
 8003448:	08003f00 	.word	0x08003f00
 800344c:	00000000 	.word	0x00000000
 8003450:	080031a5 	.word	0x080031a5

08003454 <_printf_common>:
 8003454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003458:	4616      	mov	r6, r2
 800345a:	4699      	mov	r9, r3
 800345c:	688a      	ldr	r2, [r1, #8]
 800345e:	690b      	ldr	r3, [r1, #16]
 8003460:	4607      	mov	r7, r0
 8003462:	4293      	cmp	r3, r2
 8003464:	bfb8      	it	lt
 8003466:	4613      	movlt	r3, r2
 8003468:	6033      	str	r3, [r6, #0]
 800346a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800346e:	460c      	mov	r4, r1
 8003470:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003474:	b10a      	cbz	r2, 800347a <_printf_common+0x26>
 8003476:	3301      	adds	r3, #1
 8003478:	6033      	str	r3, [r6, #0]
 800347a:	6823      	ldr	r3, [r4, #0]
 800347c:	0699      	lsls	r1, r3, #26
 800347e:	bf42      	ittt	mi
 8003480:	6833      	ldrmi	r3, [r6, #0]
 8003482:	3302      	addmi	r3, #2
 8003484:	6033      	strmi	r3, [r6, #0]
 8003486:	6825      	ldr	r5, [r4, #0]
 8003488:	f015 0506 	ands.w	r5, r5, #6
 800348c:	d106      	bne.n	800349c <_printf_common+0x48>
 800348e:	f104 0a19 	add.w	sl, r4, #25
 8003492:	68e3      	ldr	r3, [r4, #12]
 8003494:	6832      	ldr	r2, [r6, #0]
 8003496:	1a9b      	subs	r3, r3, r2
 8003498:	42ab      	cmp	r3, r5
 800349a:	dc2b      	bgt.n	80034f4 <_printf_common+0xa0>
 800349c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80034a0:	1e13      	subs	r3, r2, #0
 80034a2:	6822      	ldr	r2, [r4, #0]
 80034a4:	bf18      	it	ne
 80034a6:	2301      	movne	r3, #1
 80034a8:	0692      	lsls	r2, r2, #26
 80034aa:	d430      	bmi.n	800350e <_printf_common+0xba>
 80034ac:	4649      	mov	r1, r9
 80034ae:	4638      	mov	r0, r7
 80034b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80034b4:	47c0      	blx	r8
 80034b6:	3001      	adds	r0, #1
 80034b8:	d023      	beq.n	8003502 <_printf_common+0xae>
 80034ba:	6823      	ldr	r3, [r4, #0]
 80034bc:	6922      	ldr	r2, [r4, #16]
 80034be:	f003 0306 	and.w	r3, r3, #6
 80034c2:	2b04      	cmp	r3, #4
 80034c4:	bf14      	ite	ne
 80034c6:	2500      	movne	r5, #0
 80034c8:	6833      	ldreq	r3, [r6, #0]
 80034ca:	f04f 0600 	mov.w	r6, #0
 80034ce:	bf08      	it	eq
 80034d0:	68e5      	ldreq	r5, [r4, #12]
 80034d2:	f104 041a 	add.w	r4, r4, #26
 80034d6:	bf08      	it	eq
 80034d8:	1aed      	subeq	r5, r5, r3
 80034da:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80034de:	bf08      	it	eq
 80034e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80034e4:	4293      	cmp	r3, r2
 80034e6:	bfc4      	itt	gt
 80034e8:	1a9b      	subgt	r3, r3, r2
 80034ea:	18ed      	addgt	r5, r5, r3
 80034ec:	42b5      	cmp	r5, r6
 80034ee:	d11a      	bne.n	8003526 <_printf_common+0xd2>
 80034f0:	2000      	movs	r0, #0
 80034f2:	e008      	b.n	8003506 <_printf_common+0xb2>
 80034f4:	2301      	movs	r3, #1
 80034f6:	4652      	mov	r2, sl
 80034f8:	4649      	mov	r1, r9
 80034fa:	4638      	mov	r0, r7
 80034fc:	47c0      	blx	r8
 80034fe:	3001      	adds	r0, #1
 8003500:	d103      	bne.n	800350a <_printf_common+0xb6>
 8003502:	f04f 30ff 	mov.w	r0, #4294967295
 8003506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800350a:	3501      	adds	r5, #1
 800350c:	e7c1      	b.n	8003492 <_printf_common+0x3e>
 800350e:	2030      	movs	r0, #48	; 0x30
 8003510:	18e1      	adds	r1, r4, r3
 8003512:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003516:	1c5a      	adds	r2, r3, #1
 8003518:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800351c:	4422      	add	r2, r4
 800351e:	3302      	adds	r3, #2
 8003520:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003524:	e7c2      	b.n	80034ac <_printf_common+0x58>
 8003526:	2301      	movs	r3, #1
 8003528:	4622      	mov	r2, r4
 800352a:	4649      	mov	r1, r9
 800352c:	4638      	mov	r0, r7
 800352e:	47c0      	blx	r8
 8003530:	3001      	adds	r0, #1
 8003532:	d0e6      	beq.n	8003502 <_printf_common+0xae>
 8003534:	3601      	adds	r6, #1
 8003536:	e7d9      	b.n	80034ec <_printf_common+0x98>

08003538 <_printf_i>:
 8003538:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800353c:	7e0f      	ldrb	r7, [r1, #24]
 800353e:	4691      	mov	r9, r2
 8003540:	2f78      	cmp	r7, #120	; 0x78
 8003542:	4680      	mov	r8, r0
 8003544:	460c      	mov	r4, r1
 8003546:	469a      	mov	sl, r3
 8003548:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800354a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800354e:	d807      	bhi.n	8003560 <_printf_i+0x28>
 8003550:	2f62      	cmp	r7, #98	; 0x62
 8003552:	d80a      	bhi.n	800356a <_printf_i+0x32>
 8003554:	2f00      	cmp	r7, #0
 8003556:	f000 80d5 	beq.w	8003704 <_printf_i+0x1cc>
 800355a:	2f58      	cmp	r7, #88	; 0x58
 800355c:	f000 80c1 	beq.w	80036e2 <_printf_i+0x1aa>
 8003560:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003564:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003568:	e03a      	b.n	80035e0 <_printf_i+0xa8>
 800356a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800356e:	2b15      	cmp	r3, #21
 8003570:	d8f6      	bhi.n	8003560 <_printf_i+0x28>
 8003572:	a101      	add	r1, pc, #4	; (adr r1, 8003578 <_printf_i+0x40>)
 8003574:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003578:	080035d1 	.word	0x080035d1
 800357c:	080035e5 	.word	0x080035e5
 8003580:	08003561 	.word	0x08003561
 8003584:	08003561 	.word	0x08003561
 8003588:	08003561 	.word	0x08003561
 800358c:	08003561 	.word	0x08003561
 8003590:	080035e5 	.word	0x080035e5
 8003594:	08003561 	.word	0x08003561
 8003598:	08003561 	.word	0x08003561
 800359c:	08003561 	.word	0x08003561
 80035a0:	08003561 	.word	0x08003561
 80035a4:	080036eb 	.word	0x080036eb
 80035a8:	08003611 	.word	0x08003611
 80035ac:	080036a5 	.word	0x080036a5
 80035b0:	08003561 	.word	0x08003561
 80035b4:	08003561 	.word	0x08003561
 80035b8:	0800370d 	.word	0x0800370d
 80035bc:	08003561 	.word	0x08003561
 80035c0:	08003611 	.word	0x08003611
 80035c4:	08003561 	.word	0x08003561
 80035c8:	08003561 	.word	0x08003561
 80035cc:	080036ad 	.word	0x080036ad
 80035d0:	682b      	ldr	r3, [r5, #0]
 80035d2:	1d1a      	adds	r2, r3, #4
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	602a      	str	r2, [r5, #0]
 80035d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80035dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80035e0:	2301      	movs	r3, #1
 80035e2:	e0a0      	b.n	8003726 <_printf_i+0x1ee>
 80035e4:	6820      	ldr	r0, [r4, #0]
 80035e6:	682b      	ldr	r3, [r5, #0]
 80035e8:	0607      	lsls	r7, r0, #24
 80035ea:	f103 0104 	add.w	r1, r3, #4
 80035ee:	6029      	str	r1, [r5, #0]
 80035f0:	d501      	bpl.n	80035f6 <_printf_i+0xbe>
 80035f2:	681e      	ldr	r6, [r3, #0]
 80035f4:	e003      	b.n	80035fe <_printf_i+0xc6>
 80035f6:	0646      	lsls	r6, r0, #25
 80035f8:	d5fb      	bpl.n	80035f2 <_printf_i+0xba>
 80035fa:	f9b3 6000 	ldrsh.w	r6, [r3]
 80035fe:	2e00      	cmp	r6, #0
 8003600:	da03      	bge.n	800360a <_printf_i+0xd2>
 8003602:	232d      	movs	r3, #45	; 0x2d
 8003604:	4276      	negs	r6, r6
 8003606:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800360a:	230a      	movs	r3, #10
 800360c:	4859      	ldr	r0, [pc, #356]	; (8003774 <_printf_i+0x23c>)
 800360e:	e012      	b.n	8003636 <_printf_i+0xfe>
 8003610:	682b      	ldr	r3, [r5, #0]
 8003612:	6820      	ldr	r0, [r4, #0]
 8003614:	1d19      	adds	r1, r3, #4
 8003616:	6029      	str	r1, [r5, #0]
 8003618:	0605      	lsls	r5, r0, #24
 800361a:	d501      	bpl.n	8003620 <_printf_i+0xe8>
 800361c:	681e      	ldr	r6, [r3, #0]
 800361e:	e002      	b.n	8003626 <_printf_i+0xee>
 8003620:	0641      	lsls	r1, r0, #25
 8003622:	d5fb      	bpl.n	800361c <_printf_i+0xe4>
 8003624:	881e      	ldrh	r6, [r3, #0]
 8003626:	2f6f      	cmp	r7, #111	; 0x6f
 8003628:	bf0c      	ite	eq
 800362a:	2308      	moveq	r3, #8
 800362c:	230a      	movne	r3, #10
 800362e:	4851      	ldr	r0, [pc, #324]	; (8003774 <_printf_i+0x23c>)
 8003630:	2100      	movs	r1, #0
 8003632:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003636:	6865      	ldr	r5, [r4, #4]
 8003638:	2d00      	cmp	r5, #0
 800363a:	bfa8      	it	ge
 800363c:	6821      	ldrge	r1, [r4, #0]
 800363e:	60a5      	str	r5, [r4, #8]
 8003640:	bfa4      	itt	ge
 8003642:	f021 0104 	bicge.w	r1, r1, #4
 8003646:	6021      	strge	r1, [r4, #0]
 8003648:	b90e      	cbnz	r6, 800364e <_printf_i+0x116>
 800364a:	2d00      	cmp	r5, #0
 800364c:	d04b      	beq.n	80036e6 <_printf_i+0x1ae>
 800364e:	4615      	mov	r5, r2
 8003650:	fbb6 f1f3 	udiv	r1, r6, r3
 8003654:	fb03 6711 	mls	r7, r3, r1, r6
 8003658:	5dc7      	ldrb	r7, [r0, r7]
 800365a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800365e:	4637      	mov	r7, r6
 8003660:	42bb      	cmp	r3, r7
 8003662:	460e      	mov	r6, r1
 8003664:	d9f4      	bls.n	8003650 <_printf_i+0x118>
 8003666:	2b08      	cmp	r3, #8
 8003668:	d10b      	bne.n	8003682 <_printf_i+0x14a>
 800366a:	6823      	ldr	r3, [r4, #0]
 800366c:	07de      	lsls	r6, r3, #31
 800366e:	d508      	bpl.n	8003682 <_printf_i+0x14a>
 8003670:	6923      	ldr	r3, [r4, #16]
 8003672:	6861      	ldr	r1, [r4, #4]
 8003674:	4299      	cmp	r1, r3
 8003676:	bfde      	ittt	le
 8003678:	2330      	movle	r3, #48	; 0x30
 800367a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800367e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003682:	1b52      	subs	r2, r2, r5
 8003684:	6122      	str	r2, [r4, #16]
 8003686:	464b      	mov	r3, r9
 8003688:	4621      	mov	r1, r4
 800368a:	4640      	mov	r0, r8
 800368c:	f8cd a000 	str.w	sl, [sp]
 8003690:	aa03      	add	r2, sp, #12
 8003692:	f7ff fedf 	bl	8003454 <_printf_common>
 8003696:	3001      	adds	r0, #1
 8003698:	d14a      	bne.n	8003730 <_printf_i+0x1f8>
 800369a:	f04f 30ff 	mov.w	r0, #4294967295
 800369e:	b004      	add	sp, #16
 80036a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036a4:	6823      	ldr	r3, [r4, #0]
 80036a6:	f043 0320 	orr.w	r3, r3, #32
 80036aa:	6023      	str	r3, [r4, #0]
 80036ac:	2778      	movs	r7, #120	; 0x78
 80036ae:	4832      	ldr	r0, [pc, #200]	; (8003778 <_printf_i+0x240>)
 80036b0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80036b4:	6823      	ldr	r3, [r4, #0]
 80036b6:	6829      	ldr	r1, [r5, #0]
 80036b8:	061f      	lsls	r7, r3, #24
 80036ba:	f851 6b04 	ldr.w	r6, [r1], #4
 80036be:	d402      	bmi.n	80036c6 <_printf_i+0x18e>
 80036c0:	065f      	lsls	r7, r3, #25
 80036c2:	bf48      	it	mi
 80036c4:	b2b6      	uxthmi	r6, r6
 80036c6:	07df      	lsls	r7, r3, #31
 80036c8:	bf48      	it	mi
 80036ca:	f043 0320 	orrmi.w	r3, r3, #32
 80036ce:	6029      	str	r1, [r5, #0]
 80036d0:	bf48      	it	mi
 80036d2:	6023      	strmi	r3, [r4, #0]
 80036d4:	b91e      	cbnz	r6, 80036de <_printf_i+0x1a6>
 80036d6:	6823      	ldr	r3, [r4, #0]
 80036d8:	f023 0320 	bic.w	r3, r3, #32
 80036dc:	6023      	str	r3, [r4, #0]
 80036de:	2310      	movs	r3, #16
 80036e0:	e7a6      	b.n	8003630 <_printf_i+0xf8>
 80036e2:	4824      	ldr	r0, [pc, #144]	; (8003774 <_printf_i+0x23c>)
 80036e4:	e7e4      	b.n	80036b0 <_printf_i+0x178>
 80036e6:	4615      	mov	r5, r2
 80036e8:	e7bd      	b.n	8003666 <_printf_i+0x12e>
 80036ea:	682b      	ldr	r3, [r5, #0]
 80036ec:	6826      	ldr	r6, [r4, #0]
 80036ee:	1d18      	adds	r0, r3, #4
 80036f0:	6961      	ldr	r1, [r4, #20]
 80036f2:	6028      	str	r0, [r5, #0]
 80036f4:	0635      	lsls	r5, r6, #24
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	d501      	bpl.n	80036fe <_printf_i+0x1c6>
 80036fa:	6019      	str	r1, [r3, #0]
 80036fc:	e002      	b.n	8003704 <_printf_i+0x1cc>
 80036fe:	0670      	lsls	r0, r6, #25
 8003700:	d5fb      	bpl.n	80036fa <_printf_i+0x1c2>
 8003702:	8019      	strh	r1, [r3, #0]
 8003704:	2300      	movs	r3, #0
 8003706:	4615      	mov	r5, r2
 8003708:	6123      	str	r3, [r4, #16]
 800370a:	e7bc      	b.n	8003686 <_printf_i+0x14e>
 800370c:	682b      	ldr	r3, [r5, #0]
 800370e:	2100      	movs	r1, #0
 8003710:	1d1a      	adds	r2, r3, #4
 8003712:	602a      	str	r2, [r5, #0]
 8003714:	681d      	ldr	r5, [r3, #0]
 8003716:	6862      	ldr	r2, [r4, #4]
 8003718:	4628      	mov	r0, r5
 800371a:	f000 f859 	bl	80037d0 <memchr>
 800371e:	b108      	cbz	r0, 8003724 <_printf_i+0x1ec>
 8003720:	1b40      	subs	r0, r0, r5
 8003722:	6060      	str	r0, [r4, #4]
 8003724:	6863      	ldr	r3, [r4, #4]
 8003726:	6123      	str	r3, [r4, #16]
 8003728:	2300      	movs	r3, #0
 800372a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800372e:	e7aa      	b.n	8003686 <_printf_i+0x14e>
 8003730:	462a      	mov	r2, r5
 8003732:	4649      	mov	r1, r9
 8003734:	4640      	mov	r0, r8
 8003736:	6923      	ldr	r3, [r4, #16]
 8003738:	47d0      	blx	sl
 800373a:	3001      	adds	r0, #1
 800373c:	d0ad      	beq.n	800369a <_printf_i+0x162>
 800373e:	6823      	ldr	r3, [r4, #0]
 8003740:	079b      	lsls	r3, r3, #30
 8003742:	d413      	bmi.n	800376c <_printf_i+0x234>
 8003744:	68e0      	ldr	r0, [r4, #12]
 8003746:	9b03      	ldr	r3, [sp, #12]
 8003748:	4298      	cmp	r0, r3
 800374a:	bfb8      	it	lt
 800374c:	4618      	movlt	r0, r3
 800374e:	e7a6      	b.n	800369e <_printf_i+0x166>
 8003750:	2301      	movs	r3, #1
 8003752:	4632      	mov	r2, r6
 8003754:	4649      	mov	r1, r9
 8003756:	4640      	mov	r0, r8
 8003758:	47d0      	blx	sl
 800375a:	3001      	adds	r0, #1
 800375c:	d09d      	beq.n	800369a <_printf_i+0x162>
 800375e:	3501      	adds	r5, #1
 8003760:	68e3      	ldr	r3, [r4, #12]
 8003762:	9903      	ldr	r1, [sp, #12]
 8003764:	1a5b      	subs	r3, r3, r1
 8003766:	42ab      	cmp	r3, r5
 8003768:	dcf2      	bgt.n	8003750 <_printf_i+0x218>
 800376a:	e7eb      	b.n	8003744 <_printf_i+0x20c>
 800376c:	2500      	movs	r5, #0
 800376e:	f104 0619 	add.w	r6, r4, #25
 8003772:	e7f5      	b.n	8003760 <_printf_i+0x228>
 8003774:	08003f07 	.word	0x08003f07
 8003778:	08003f18 	.word	0x08003f18

0800377c <memmove>:
 800377c:	4288      	cmp	r0, r1
 800377e:	b510      	push	{r4, lr}
 8003780:	eb01 0402 	add.w	r4, r1, r2
 8003784:	d902      	bls.n	800378c <memmove+0x10>
 8003786:	4284      	cmp	r4, r0
 8003788:	4623      	mov	r3, r4
 800378a:	d807      	bhi.n	800379c <memmove+0x20>
 800378c:	1e43      	subs	r3, r0, #1
 800378e:	42a1      	cmp	r1, r4
 8003790:	d008      	beq.n	80037a4 <memmove+0x28>
 8003792:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003796:	f803 2f01 	strb.w	r2, [r3, #1]!
 800379a:	e7f8      	b.n	800378e <memmove+0x12>
 800379c:	4601      	mov	r1, r0
 800379e:	4402      	add	r2, r0
 80037a0:	428a      	cmp	r2, r1
 80037a2:	d100      	bne.n	80037a6 <memmove+0x2a>
 80037a4:	bd10      	pop	{r4, pc}
 80037a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80037aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80037ae:	e7f7      	b.n	80037a0 <memmove+0x24>

080037b0 <_sbrk_r>:
 80037b0:	b538      	push	{r3, r4, r5, lr}
 80037b2:	2300      	movs	r3, #0
 80037b4:	4d05      	ldr	r5, [pc, #20]	; (80037cc <_sbrk_r+0x1c>)
 80037b6:	4604      	mov	r4, r0
 80037b8:	4608      	mov	r0, r1
 80037ba:	602b      	str	r3, [r5, #0]
 80037bc:	f7fd fb92 	bl	8000ee4 <_sbrk>
 80037c0:	1c43      	adds	r3, r0, #1
 80037c2:	d102      	bne.n	80037ca <_sbrk_r+0x1a>
 80037c4:	682b      	ldr	r3, [r5, #0]
 80037c6:	b103      	cbz	r3, 80037ca <_sbrk_r+0x1a>
 80037c8:	6023      	str	r3, [r4, #0]
 80037ca:	bd38      	pop	{r3, r4, r5, pc}
 80037cc:	20000348 	.word	0x20000348

080037d0 <memchr>:
 80037d0:	4603      	mov	r3, r0
 80037d2:	b510      	push	{r4, lr}
 80037d4:	b2c9      	uxtb	r1, r1
 80037d6:	4402      	add	r2, r0
 80037d8:	4293      	cmp	r3, r2
 80037da:	4618      	mov	r0, r3
 80037dc:	d101      	bne.n	80037e2 <memchr+0x12>
 80037de:	2000      	movs	r0, #0
 80037e0:	e003      	b.n	80037ea <memchr+0x1a>
 80037e2:	7804      	ldrb	r4, [r0, #0]
 80037e4:	3301      	adds	r3, #1
 80037e6:	428c      	cmp	r4, r1
 80037e8:	d1f6      	bne.n	80037d8 <memchr+0x8>
 80037ea:	bd10      	pop	{r4, pc}

080037ec <memcpy>:
 80037ec:	440a      	add	r2, r1
 80037ee:	4291      	cmp	r1, r2
 80037f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80037f4:	d100      	bne.n	80037f8 <memcpy+0xc>
 80037f6:	4770      	bx	lr
 80037f8:	b510      	push	{r4, lr}
 80037fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037fe:	4291      	cmp	r1, r2
 8003800:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003804:	d1f9      	bne.n	80037fa <memcpy+0xe>
 8003806:	bd10      	pop	{r4, pc}

08003808 <_realloc_r>:
 8003808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800380c:	4680      	mov	r8, r0
 800380e:	4614      	mov	r4, r2
 8003810:	460e      	mov	r6, r1
 8003812:	b921      	cbnz	r1, 800381e <_realloc_r+0x16>
 8003814:	4611      	mov	r1, r2
 8003816:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800381a:	f7ff bc37 	b.w	800308c <_malloc_r>
 800381e:	b92a      	cbnz	r2, 800382c <_realloc_r+0x24>
 8003820:	f7ff fbcc 	bl	8002fbc <_free_r>
 8003824:	4625      	mov	r5, r4
 8003826:	4628      	mov	r0, r5
 8003828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800382c:	f000 f81b 	bl	8003866 <_malloc_usable_size_r>
 8003830:	4284      	cmp	r4, r0
 8003832:	4607      	mov	r7, r0
 8003834:	d802      	bhi.n	800383c <_realloc_r+0x34>
 8003836:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800383a:	d812      	bhi.n	8003862 <_realloc_r+0x5a>
 800383c:	4621      	mov	r1, r4
 800383e:	4640      	mov	r0, r8
 8003840:	f7ff fc24 	bl	800308c <_malloc_r>
 8003844:	4605      	mov	r5, r0
 8003846:	2800      	cmp	r0, #0
 8003848:	d0ed      	beq.n	8003826 <_realloc_r+0x1e>
 800384a:	42bc      	cmp	r4, r7
 800384c:	4622      	mov	r2, r4
 800384e:	4631      	mov	r1, r6
 8003850:	bf28      	it	cs
 8003852:	463a      	movcs	r2, r7
 8003854:	f7ff ffca 	bl	80037ec <memcpy>
 8003858:	4631      	mov	r1, r6
 800385a:	4640      	mov	r0, r8
 800385c:	f7ff fbae 	bl	8002fbc <_free_r>
 8003860:	e7e1      	b.n	8003826 <_realloc_r+0x1e>
 8003862:	4635      	mov	r5, r6
 8003864:	e7df      	b.n	8003826 <_realloc_r+0x1e>

08003866 <_malloc_usable_size_r>:
 8003866:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800386a:	1f18      	subs	r0, r3, #4
 800386c:	2b00      	cmp	r3, #0
 800386e:	bfbc      	itt	lt
 8003870:	580b      	ldrlt	r3, [r1, r0]
 8003872:	18c0      	addlt	r0, r0, r3
 8003874:	4770      	bx	lr
	...

08003878 <_init>:
 8003878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800387a:	bf00      	nop
 800387c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800387e:	bc08      	pop	{r3}
 8003880:	469e      	mov	lr, r3
 8003882:	4770      	bx	lr

08003884 <_fini>:
 8003884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003886:	bf00      	nop
 8003888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800388a:	bc08      	pop	{r3}
 800388c:	469e      	mov	lr, r3
 800388e:	4770      	bx	lr
